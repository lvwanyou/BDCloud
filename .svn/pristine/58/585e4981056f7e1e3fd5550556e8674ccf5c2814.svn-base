package com.xl.cloud.util;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHitField;
import org.elasticsearch.search.highlight.HighlightField;

import com.xl.cloud.bean.BankDetail;
import com.xl.cloud.bean.ContainerDetail;
import com.xl.cloud.bean.CreditDetail;
import com.xl.cloud.bean.EmlDetail;
import com.xl.cloud.bean.FixedDetail;
import com.xl.cloud.bean.IdentityDetail;
import com.xl.cloud.bean.PassportDetail;
import com.xl.cloud.bean.PlateDetail;
import com.xl.cloud.bean.TeleDetail;
import com.xl.cloud.bean.TransferDetail;
import com.xl.cloud.bean.TransportDetail;
import com.xl.cloud.common.Global;
import com.xl.cloud.dao.SqlDao;

/**
 * 数据挖掘功能,在一个案件建立索引后，将数据信息中银行卡号，身份证号等
 * 
 * @author lcl
 *
 */
public class SearchAllUtil {
	public static Map<String, Object> searchAll(String regexpQuery, String caseId) {

		List<String> list = new ArrayList<String>();
		// 精确搜索
		BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档

		String quickflag = "";
		if ("手机号".equals(regexpQuery)) {
			quickflag = Global.regPhone;
		} else if ("固定电话".equals(regexpQuery)) {
			quickflag = Global.regTel;
		} else if ("身份证号".equals(regexpQuery)) {
			quickflag = Global.regSFZ;
		} else if ("邮箱号".equals(regexpQuery)) {
			quickflag = Global.regEmail;
		} else if ("银行卡号".equals(regexpQuery)) {
			quickflag = Global.regCard;
		} else if ("车牌号".equals(regexpQuery)) {
			quickflag = Global.regLicense;
		} else if ("运输车号".equals(regexpQuery)) {
			quickflag = Global.regModel;
		} else if ("集装箱号".equals(regexpQuery)) {
			quickflag = Global.regContainer;
		} else if ("电汇".equals(regexpQuery)) {
			quickflag = Global.regTT;
		} else if ("信用证".equals(regexpQuery)) {
			quickflag = Global.regLC;
		} else if ("护照".equals(regexpQuery)) {
			quickflag = Global.passport;
		}

		if (!"".equals(quickflag)) {
			QueryBuilder qb = QueryBuilders.regexpQuery("content", quickflag);
			mustQuery.must(qb);
		}

		if (!"".equals(caseId)) {
			QueryBuilder qb = QueryBuilders.matchPhraseQuery("caseID", caseId);
			mustQuery.must(qb);
		}
		SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("doc", "es")
				.setTypes("docType", "email").setQuery(mustQuery).addHighlightedField("*")
				/* 星号表示在所有字段都高亮 */.setHighlighterRequireFieldMatch(false)// 配置高亮显示搜索结果
				.setHighlighterPreTags("<font color='red' >").setHighlighterPostTags("</font>");// 配置高亮显示搜索结果

		// 执行搜索
		SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();
		int totalHits = (int) searchResponse.getHits().getTotalHits();
		SearchHit[] hits = searchResponse.getHits().getHits();
		String fileName = "";
		for (SearchHit searchHit : hits) {
			Map<String, Object> source = searchHit.getSource();
			String downloadUrl = (String) source.get("file_download_url");
			if ("".equals(fileName)) {
				fileName += downloadUrl.split("/")[8]; // 截取文件名
			} else {
				fileName += "/" + downloadUrl.split("/")[8];
			}
			Map<String, HighlightField> highlightFields = searchHit.getHighlightFields();
			HighlightField highlightcontent = highlightFields.get("content");
			if ((highlightcontent.toString()).indexOf("font") != -1) {
				String gaoliang = highlightcontent.toString();
				String gaoliang1 = gaoliang.split("font")[1];
				String gaoliang2 = gaoliang1.substring(14, gaoliang1.length() - 2);
				list.add(gaoliang2);
			}

		}
		Map<String, Object> map = new HashMap<>();
		map.put("list", list);
		map.put("fileName", fileName);

		return map;
	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的电话号
	 * 
	 */
	public static void teleToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		TeleDetail teleDetail = null;
		for (String teleNum : listStr) {
			teleDetail = new TeleDetail();
			teleDetail.setTeleNum(teleNum);
			List<TeleDetail> listfromMysql = dao.getListfromMysql(teleDetail);
			if (listfromMysql.size() > 0) {
				TeleDetail teleDetail2 = listfromMysql.get(0);
				teleDetail2.setCount(teleDetail2.getCount() + 1);
				dao.updateToMysql(teleDetail2);
			} else {
				teleDetail.setBelongCity("北京");
				teleDetail.setCaseId(caseId);
				teleDetail.setBelongProvince("北京");
				teleDetail.setTeleType("联通");
				teleDetail.setCount(1);
				teleDetail.setEvid(fileName);
				dao.setBeanToMysql(teleDetail);
			}
		}

	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的身份证号
	 * 
	 */
	public static void identityToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		IdentityDetail identityDetail = null;
		for (String idenNum : listStr) {
			identityDetail = new IdentityDetail();
			identityDetail.setIdentityNum(idenNum);
			List<IdentityDetail> listfromMysql = dao.getListfromMysql(identityDetail);
			if (listfromMysql.size() > 0) {
				IdentityDetail identityDetail2 = listfromMysql.get(0);
				identityDetail2.setCount(identityDetail2.getCount() + 1);
				dao.updateToMysql(identityDetail2);
			} else {
				identityDetail.setBirthdate("1990-08-17");
				identityDetail.setCaseId(caseId);
				identityDetail.setGender("男");
				identityDetail.setBelongarea("北京");
				identityDetail.setCount(1 + "");
				identityDetail.setEvid(fileName);
				dao.setBeanToMysql(identityDetail);
			}
		}

	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的车牌号
	 * 
	 */
	public static void plateToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		PlateDetail plateDetail = null;
		for (String platenum : listStr) {
			plateDetail = new PlateDetail();
			plateDetail.setPlatenum(platenum);
			List<PlateDetail> listfromMysql = dao.getListfromMysql(plateDetail);
			if (listfromMysql.size() > 0) {
				PlateDetail plateDetail2 = listfromMysql.get(0);
				plateDetail2.setCount(plateDetail2.getCount() + 1);
				dao.updateToMysql(plateDetail2);
			} else {
				plateDetail.setPlateCity("湖南");
				plateDetail.setCaseId(caseId);
				plateDetail.setPlateType("轿车");
				plateDetail.setCount(1);
				plateDetail.setEvid(fileName);
				dao.setBeanToMysql(plateDetail);
			}
		}

	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的电汇号信息
	 * 
	 */
	public static void transferToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		TransferDetail transferDetail = null;
		for (String transfernum : listStr) {
			transferDetail = new TransferDetail();
			transferDetail.setTransfernum(transfernum);
			List<TransferDetail> listfromMysql = dao.getListfromMysql(transferDetail);
			if (listfromMysql.size() > 0) {
				TransferDetail transferDetail2 = listfromMysql.get(0);
				transferDetail2.setCount(transferDetail2.getCount() + 1);
				dao.updateToMysql(transferDetail2);
			} else {
				transferDetail.setCaseId(caseId);
				transferDetail.setCount(1);
				transferDetail.setEvid(fileName);
				dao.setBeanToMysql(transferDetail);
			}
		}

	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的运输车号信息
	 * 
	 */
	public static void lateToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		TransportDetail transportDetail = null;
		for (String transportnum : listStr) {
			transportDetail = new TransportDetail();
			transportDetail.setTransportnum(transportnum);
			List<TransportDetail> listfromMysql = dao.getListfromMysql(transportDetail);
			if (listfromMysql.size() > 0) {
				TransportDetail transportDetail2 = listfromMysql.get(0);
				transportDetail2.setCount(transportDetail2.getCount() + 1);
				dao.updateToMysql(transportDetail2);
			} else {
				transportDetail.setCaseId(caseId);
				transportDetail.setCount(1);
				transportDetail.setEvid(fileName);
				dao.setBeanToMysql(transportDetail);
			}
		}

	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的护照号信息
	 * 
	 */
	public static void passportToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		PassportDetail passportDetail = null;
		for (String passportnum : listStr) {
			passportDetail = new PassportDetail();
			passportDetail.setPassportnum(passportnum);
			List<PassportDetail> listfromMysql = dao.getListfromMysql(passportDetail);
			if (listfromMysql.size() > 0) {
				PassportDetail passportDetail2 = listfromMysql.get(0);
				passportDetail2.setCount(passportDetail2.getCount() + 1);
				dao.updateToMysql(passportDetail2);
			} else {
				passportDetail.setCaseId(caseId);
				passportDetail.setCount(1);
				passportDetail.setEvid(fileName);
				dao.setBeanToMysql(passportDetail);
			}
		}
	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的固定电话号码信息
	 * 
	 */
	public static void fixedToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		FixedDetail fixedDetail = null;
		for (String fixednum : listStr) {
			fixedDetail = new FixedDetail();
			fixedDetail.setFixednum(fixednum);
			List<FixedDetail> listfromMysql = dao.getListfromMysql(fixedDetail);
			if (listfromMysql.size() > 0) {
				FixedDetail fixedDetail2 = listfromMysql.get(0);
				fixedDetail2.setCount(fixedDetail2.getCount() + 1);
				dao.updateToMysql(fixedDetail2);
			} else {
				fixedDetail.setFixedCity("贵阳");
				fixedDetail.setFixedProvince("贵州");
				fixedDetail.setCount(1);
				fixedDetail.setCaseId(caseId);
				fixedDetail.setEvid(fileName);
				dao.setBeanToMysql(fixedDetail);
			}
		}
	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的邮箱号信息
	 * 
	 */
	public static void emlToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		EmlDetail emlDetail = null;
		for (String emlnum : listStr) {
			emlDetail = new EmlDetail();
			emlDetail.setEmlnum(emlnum);
			List<EmlDetail> listfromMysql = dao.getListfromMysql(emlDetail);
			if (listfromMysql.size() > 0) {
				EmlDetail emlDetail2 = listfromMysql.get(0);
				emlDetail2.setCount(emlDetail2.getCount() + 1);
				dao.updateToMysql(emlDetail2);
			} else {
				emlDetail.setEmlType("QQ");
				emlDetail.setCaseId(caseId);
				emlDetail.setCount(1);
				emlDetail.setEvid(fileName);
				dao.setBeanToMysql(emlDetail);
			}
		}
	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的信用证号信息
	 * 
	 */
	public static void creditToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		CreditDetail creditDetail = null;
		for (String creditnum : listStr) {
			creditDetail = new CreditDetail();
			creditDetail.setCreditnum(creditnum);
			List<CreditDetail> listfromMysql = dao.getListfromMysql(creditDetail);
			if (listfromMysql.size() > 0) {
				CreditDetail creditDetail2 = listfromMysql.get(0);
				creditDetail2.setCount(creditDetail2.getCount() + 1);
				dao.updateToMysql(creditDetail2);
			} else {
				creditDetail.setCaseId(caseId);
				creditDetail.setCount(1);
				creditDetail.setEvid(fileName);
				dao.setBeanToMysql(creditDetail);
			}
		}
	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的集装箱号信息
	 * 
	 */
	public static void containerToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		ContainerDetail containerDetail = null;
		for (String containernum : listStr) {
			containerDetail = new ContainerDetail();
			containerDetail.setContainernum(containernum);
			List<ContainerDetail> listfromMysql = dao.getListfromMysql(containerDetail);
			if (listfromMysql.size() > 0) {
				ContainerDetail container2 = listfromMysql.get(0);
				container2.setCount(container2.getCount() + 1);
				dao.updateToMysql(container2);
			} else {
				containerDetail.setCaseId(caseId);
				containerDetail.setCount(1);
				containerDetail.setEvid(fileName);
				dao.setBeanToMysql(containerDetail);
			}
		}
	}

	/**
	 * 
	 * @param regexpQuery
	 * @param caseId
	 *            根据案件ID 查询出相应的银行卡号信息
	 * 
	 */
	public static void bankToDB(String regexpQuery, String caseId, String evid, SqlDao dao) {
		Map<String, Object> searchAll = searchAll(regexpQuery, caseId);
		String fileName = (String) searchAll.get("fileName");
		List<String> listStr = (List<String>) searchAll.get("list");
		BankDetail bankDetail = null;
		for (String banknum : listStr) {
			bankDetail = new BankDetail();
			bankDetail.setBanknum(banknum);
			List<BankDetail> listfromMysql = dao.getListfromMysql(bankDetail);
			if (listfromMysql.size() > 0) {
				BankDetail bankDetail2 = listfromMysql.get(0);
				bankDetail2.setCount(bankDetail2.getCount() + 1);
				dao.updateToMysql(bankDetail2);
			} else {
				bankDetail.setBankname("民生银行");
				bankDetail.setBankType("工资卡");
				bankDetail.setBankCity("上海");
				bankDetail.setBankaddress("徐汇支行");
				bankDetail.setCaseId(caseId);
				bankDetail.setCount(1);
				bankDetail.setEvid(fileName);
				dao.setBeanToMysql(bankDetail);
			}
		}
	}

	// 主线程
	public static void main(String[] args) {
		Map<String, Object> searchAllUtil = SearchAllUtil.searchAll("手机号", "2063");
		SqlDao sd = new SqlDao();

		// SearchAllUtil.teleToDB("手机号","1987", sd);
		for (String string : searchAllUtil.keySet()) {

		}
	}
}

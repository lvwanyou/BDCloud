package com.xl.cloud.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.lucene.util.automaton.RegExp;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.common.text.Text;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.MatchQueryBuilder.Operator;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.QueryStringQueryBuilder;
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.highlight.HighlightField;
import org.elasticsearch.search.sort.SortBuilder;
import org.elasticsearch.search.sort.SortBuilders;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.xl.cloud.bean.Caseinfo;
import com.xl.cloud.bean.EmailDTO;
import com.xl.cloud.bean.EmailNode2LinkDTO;
import com.xl.cloud.bean.EmailNodeDTO;
import com.xl.cloud.bean.EmailNodeDTO2;
import com.xl.cloud.bean.Evidence;
import com.xl.cloud.bean.SuspectInfo;
import com.xl.cloud.common.Global;
import com.xl.cloud.dao.SqlDao;
import com.xl.cloud.util.EsClient;
import com.xl.cloud.util.JsonUtil;

import jodd.mail.EmailAttachment;
import jodd.mail.EmailMessage;
import jodd.mail.EmailUtil;
import jodd.mail.ReceivedEmail;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

@Controller
public class EmaiExcavatelAction {
	private SqlDao sqlDao = new SqlDao();
	public SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	public List<EmailDTO> getDomainEmail = new ArrayList<EmailDTO>();
	final Logger logger = Logger.getLogger(BuildCollection.class);
	
	/**
	 * 数据管理-邮件工作台-查询邮件 执行分布式搜索访问并处理数据
	 * */
	@RequestMapping(value = "/emaiExcavatel/getEmailList.php")
	public void getEmailList(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		  response.setContentType("textml; charset=UTF-8");
		  String sortType = request.getParameter("sortType");
		  String regexpQuery = request.getParameter("regexpQuery");
		  String emailKeyword = request.getParameter("emailKeyword");
		  String caseidStr = request.getParameter("caseidStr");
		  String pageIndexstr = request.getParameter("pageIndex");
			String startDate = request.getParameter("startDate");// 开始时间
			String endDate = request.getParameter("endDate");// 结束时间
		  int pageIndex = 1;
		  int pageSize=10;
		  if (pageIndexstr !=null && !"".equals(pageIndexstr)) {
			  pageIndex= Integer.parseInt(pageIndexstr);
		  }
		  if(caseidStr== null || "".equals(caseidStr)){
			  caseidStr="";
		  }
		  String riqi="";
		  String read="";
		  String star="";
		  String fuj="";
		  String[] caseids =  {""}; 
		  if(!"".equals(caseidStr)){
				caseids=caseidStr.split(" ");
		  }
		  String sortConditon = "";
			  if ("未读".equals(sortType)) {
				  read="0";
				  sortConditon="date"; 
			  }else if ("已读".equals(sortType)) {
				  read="1";
				  sortConditon="date";
			  }else if ("星标".equals(sortType)) {
				  star="1";
				  sortConditon="date";
			  }else if ("日期".equals(sortType)) {
				  sortConditon="date";
			  }else if ("收件人".equals(sortType)) {
				  sortConditon="toWho";
			  }else if ("发件人".equals(sortType)) {
				  sortConditon="fromWho";
			  }else if ("IP".equals(sortType)) {
				  sortConditon="ip";
			  }else if ("附件".equals(sortType)) {
				  fuj="123";
				  sortConditon="date";
			  }
		  String quickflag = "";
		  	if("手机号".equals(regexpQuery)) {
				 quickflag=Global.regPhone;
			 }else if ("固定电话".equals(regexpQuery)) {
				 quickflag=Global.regTel;
			 }else if ("身份证号".equals(regexpQuery)) {
				 quickflag=Global.regSFZ;
			 }else if ("邮箱号".equals(regexpQuery)) {
				 quickflag=Global.regEmail;
			 }else if ("银行卡号".equals(regexpQuery)) {
				 quickflag=Global.regCard;
			 }else if ("车牌号".equals(regexpQuery)) {
				 quickflag=Global.regLicense;
			 }else if ("运输车号".equals(regexpQuery)) {
				 quickflag=Global.regModel;
			 }else if ("集装箱号".equals(regexpQuery)) {
				 quickflag=Global.regContainer;
			 }else if ("装箱单".equals(regexpQuery)) {
				 quickflag=Global.regPacking;
			 }else if ("提单号".equals(regexpQuery)) {
				 quickflag=Global.regBill;
			 }else if ("价格".equals(regexpQuery)) {
				 quickflag=Global.regPrice;
			 }else if ("合同编号".equals(regexpQuery)) {
				 quickflag=Global.regContract;
			 }else if ("发票代码".equals(regexpQuery)) {
				 quickflag=Global.regStamp;
			 }else if ("信用证".equals(regexpQuery)) {
				 quickflag=Global.regLC;
			 }else if ("电汇".equals(regexpQuery)) {
				 quickflag=Global.regTT;
			 }else if ("GPS".equals(regexpQuery)) {
				 quickflag=Global.regGPS;
			 }
		  	 System.out.println("es查询开始========>>"+new Date());;	
					  //精确搜索
					  BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
					  mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
					  //caseid集合
					  if(!"".equals(caseidStr)){
						  mustQuery.must(QueryBuilders.termsQuery("caseID",caseids));
					  }
					  //已读未读状态
					  if(!"".equals(read)){
						  mustQuery.must(QueryBuilders.matchPhraseQuery("readFlag", read));
					  }
					  //星标状态
					  if(!"".equals(star)){
						  mustQuery.must(QueryBuilders.matchPhraseQuery("starFlag", star));
					  }
					  //附件
					  if(!"".equals(fuj)){
						  mustQuery.mustNot(QueryBuilders.matchPhraseQuery("attachmentname", ""));
					  }
					  //关键词搜索
					  if(emailKeyword!=null && !"".equals(emailKeyword)){
						  QueryBuilder queryBuilder = QueryBuilders.queryStringQuery(emailKeyword)//.escape(true)//escape 转义 设为true，避免搜索[]、结尾为!的关键词时异常 但无法搜索*
								  .defaultOperator(QueryStringQueryBuilder.Operator.AND);//不同关键词之间使用and关系
						  mustQuery.must(queryBuilder);//添加第4条must的条件 关键词全文搜索筛选条件
					  }
					  //特殊号码
					/* if(!"".equals(quickflag)){
						 QueryBuilder qb = QueryBuilders.regexpQuery("content", quickflag);
					      mustQuery.must(qb);
					 }*/
					// 日期范围
					if (startDate != null && !"".equals(startDate)) {
						RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date")
								.from(startDate + " 00:00:00").to(endDate + " 23:59:59");
						System.out.println("时间分割");
						mustQuery.must(rangequerybuilder);
					}
					
					
					
					  SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email")
							  .setQuery(mustQuery)
							  //.addHighlightedField("*")/*星号表示在所有字段都高亮*/.setHighlighterRequireFieldMatch(false)//配置高亮显示搜索结果
							  //.setHighlighterPreTags("<font color='red' >").setHighlighterPostTags("</font>")//配置高亮显示搜索结果
							  //模糊查询
							  //.setQuery(QueryBuilders.matchQuery("subject", "信用管家").operator(Operator.AND)) //根据tom分词查询name,默认or
							  .setFrom((pageIndex - 1) * pageSize)//分页起始位置（跳过开始的n个）
				              .setSize(pageSize);//本次返回的文档数量
					  //searchRequestBuilder = searchRequestBuilder.addAggregation(AggregationBuilders.terms("agg1(聚类返回时根据此key获取聚类结果)")
					  //.size(1000)/*返回1000条聚类结果*/.field("要在文档中聚类的字段，如果是嵌套的则用点连接父子字段，如【person.company.name】"));
					  
					  //排序 执行
					  SearchResponse searchResponse =null;
					  if("date".equals(sortConditon)){
						   searchResponse = searchRequestBuilder
									
								  //.addSort(riqi, SortOrder.DESC)
								 // .addSort(sortBuilder)
								 // .addSort(sortConditon, SortOrder.ASC)
								.addSort(SortBuilders.fieldSort(sortConditon).order(SortOrder.DESC))//按类型排序
								// .addSort(SortBuilders.fieldSort(riqi).order(SortOrder.DESC))//按类型排序
								
								  .execute().actionGet();//执行搜索  
					  }else{
						   searchResponse = searchRequestBuilder
									
								  //.addSort(riqi, SortOrder.DESC)
								 // .addSort(sortBuilder)
								 // .addSort(sortConditon, SortOrder.ASC)
								.addSort(SortBuilders.fieldSort(sortConditon).order(SortOrder.ASC))//按类型排序
								// .addSort(SortBuilders.fieldSort(riqi).order(SortOrder.DESC))//按类型排序
								
								  .execute().actionGet();//执行搜索
					  }
					 

					  
					  SearchHit[] hits = searchResponse.getHits().getHits();
					  long totalHits = searchResponse.getHits().getTotalHits();
					  List<EmailDTO> emailDTOList = new ArrayList<EmailDTO>();
					  for (SearchHit searchHit : hits) {
						  String esID = (String)searchHit.getId();
						  Map<String, Object> source = searchHit.getSource();
						  String subject = (String) source.get("subject");
						  String fromWho = (String) source.get("fromWho");
						  String toWho = (String) source.get("toWho");
						  String downloadUrl = (String) source.get("file_download_url");
						  String date = (String) source.get("date");
						  String attachmentname = (String) source.get("attachmentname");//LW:附件名
						  String content = (String) source.get("content");
						  String readFlag = (String) source.get("readFlag");
						  String starFlag = (String) source.get("starFlag");
						  String ip = (String)source.get("ip");
						  Map<String, HighlightField> highlightFields = searchHit.getHighlightFields();
						  int quickflagflag=0;
							EmailDTO emailDTO = new EmailDTO();
							emailDTO.setEsID(esID);
							emailDTO.setRead(Integer.parseInt(readFlag));
							emailDTO.setStar(Integer.parseInt(starFlag));
							emailDTO.setIp(ip);
							emailDTO.setAttachmentname(attachmentname);
							if(emailKeyword!=null && !"".equals(emailKeyword)){
								  String s1 =subject.replace(emailKeyword, "<font style='color: red;background-color: yellow;'>"+emailKeyword+"</font>");
								 /* for (int i=0;i<subject.length();i++) {
									  int flag=0;
									  String char1=subject.charAt(i)+"";
									  for (int j=0;j<emailKeyword.length();j++) {
										  String char2=emailKeyword.charAt(j)+"";
										  if(char1.equals(char2)){
											  flag=1;
										  }
									  } if(flag==0){
										  s1+= char1;
									  }else{
										  s1+="<font style='color: red;background-color: yellow;'>"+char1+"</font>"; 
									  }
								  }*/
								  emailDTO.setSubject(s1);
							  } else{
								  emailDTO.setSubject(subject);
								  }
							if(emailKeyword!=null && !"".equals(emailKeyword)){
								String s1 =fromWho.replace(emailKeyword, "<font style='color: red;background-color: yellow;'>"+emailKeyword+"</font>");
								  emailDTO.setFromWho(s1);
							  }else{
								  emailDTO.setFromWho(fromWho);
							  }
							if(emailKeyword!=null && !"".equals(emailKeyword)){
								String s1 =toWho.replace(emailKeyword, "<font style='color: red;background-color: yellow;'>"+emailKeyword+"</font>");
								  emailDTO.setToWho(s1);
							  }else{
								  emailDTO.setToWho(toWho);
							  }  
							if(emailKeyword!=null && !"".equals(emailKeyword)){
								String s1 =content.replace(emailKeyword, "<font style='color: red;background-color: yellow;'>"+emailKeyword+"</font>");
								  emailDTO.setContent(s1);
							  }else if(quickflag!=null && !"".equals(quickflag)){
								  quickflagflag=1;
								 
								  String s1 =content;
								  Pattern pattern = Pattern.compile(quickflag);
							        // 创建匹配给定输入与此模式的匹配器。
							        Matcher matcher = pattern.matcher(content);
							        //查找字符串中是否有符合的子字符串
							        while(matcher.find()){
							        	quickflagflag=0;
							                //查找到符合的即输出
							        	String group = matcher.group();
							        	 s1 =s1.replace(group, "<font style='color: red;background-color: yellow;'>"+group+"</font>");
							            //System.out.println("查询到一个符合的手机号码："+group);
							        }
							    
								  
								  emailDTO.setContent(s1);
								  
							  }else{
								  emailDTO.setContent(content);
							  }
							if(emailKeyword!=null && !"".equals(emailKeyword)){
								String s1 =date.replace(emailKeyword, "<font style='color: red;background-color: yellow;'>"+emailKeyword+"</font>");
								  emailDTO.setDate(s1);
							  }else{
								  emailDTO.setDate(date);
							  }
							  emailDTO.setDownloadUrl(downloadUrl);
							  if(quickflagflag==0){
								  emailDTOList.add(emailDTO);   
							  }
							  
				  	}
		 /* 
		  * 查询未读数目
		  * */
		  //精确搜索
		  BoolQueryBuilder mustQuery2 = QueryBuilders.boolQuery();
		  //caseid集合
		  if(!"".equals(caseidStr)){
			  mustQuery2.must(QueryBuilders.termsQuery("caseID",caseids));
		  }
		//附件
		  if(!"".equals(fuj)){
			  mustQuery2.mustNot(QueryBuilders.matchPhraseQuery("attachmentname", ""));
		  }
		  //未读
		  mustQuery2.must(QueryBuilders.matchPhraseQuery("readFlag", "0"));
		  //星标状态
		  if(!"".equals(star)){
			  mustQuery2.must(QueryBuilders.matchPhraseQuery("starFlag", star));
		  }
		  //关键词搜索
		  if(emailKeyword!=null && !"".equals(emailKeyword)){
			  QueryBuilder queryBuilder2 = QueryBuilders.queryStringQuery(emailKeyword)//.escape(true)//escape 转义 设为true，避免搜索[]、结尾为!的关键词时异常 但无法搜索*
					  .defaultOperator(QueryStringQueryBuilder.Operator.AND);//不同关键词之间使用and关系
			  mustQuery2.must(queryBuilder2);//添加第4条must的条件 关键词全文搜索筛选条件
		  }
		  //特殊号码
		 if(!"".equals(quickflag)){
			 QueryBuilder qb2 = QueryBuilders.regexpQuery("content", quickflag);
		      mustQuery2.must(qb2);
		 }
		// 日期范围
			if (startDate != null && !"".equals(startDate)) {
				RangeQueryBuilder rangequerybuilder2 = QueryBuilders.rangeQuery("date")
						.from(startDate + " 00:00:00").to(endDate + " 23:59:59");
				System.out.println("时间分割");
				mustQuery2.must(rangequerybuilder2);
			}
		  SearchRequestBuilder searchRequestBuilder2 = EsClient.getClient().prepareSearch("es").setTypes("email")
				  .setQuery(mustQuery2)
				  //.addHighlightedField("*")/*星号表示在所有字段都高亮*/.setHighlighterRequireFieldMatch(false)//配置高亮显示搜索结果
				 // .setHighlighterPreTags("<font color='red' >").setHighlighterPostTags("</font>")//配置高亮显示搜索结果
				  //模糊查询
				  //.setQuery(QueryBuilders.matchQuery("subject", "信用管家").operator(Operator.AND)) //根据tom分词查询name,默认or
				  .setFrom(0)//分页起始位置（跳过开始的n个）
	              .setSize(1);//本次返回的文档数量
		  //searchRequestBuilder = searchRequestBuilder.addAggregation(AggregationBuilders.terms("agg1(聚类返回时根据此key获取聚类结果)")
		  //.size(1000)/*返回1000条聚类结果*/.field("要在文档中聚类的字段，如果是嵌套的则用点连接父子字段，如【person.company.name】"));
		  
		  //排序 执行
		  SearchResponse searchResponse2 = searchRequestBuilder2
				  
				  .addSort(sortConditon, SortOrder.DESC)//排序.addSort(SortBuilders.fieldSort(sortConditon))//按类型排序
				  .execute().actionGet();//执行搜索
		  long read0 = searchResponse2.getHits().getTotalHits();
		  if("1".equals(read)){
			  read0=0; 
		  }
		  Map<String, Object> map = new HashMap<String, Object>();
		  getDomainEmail = emailDTOList;
		  map.put("emailDTOList", emailDTOList);
		  map.put("count", totalHits);
		  map.put("read0", read0);
		  PrintWriter writer = null;
		  try {
			  writer = response.getWriter();
			  writer.write(JsonUtil.map2json(map));
			  writer.flush();
		  } catch (Exception e) {
			  e.printStackTrace();
		  } finally {
			  if (writer != null) {
				  writer.close();
			  }
		  }  
			  
	}
	/**
	 * 邮件工作台-更改邮件状态和星标
	 */
	@RequestMapping(value = "/emaiExcavatel/upEmailStatus.php")
	public void upEmailStatus(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String read = request.getParameter("read");
		String star = request.getParameter("star");
		String esId = request.getParameter("esId");
		System.out.println("esID  =  ==================   " + esId);
		String key = "";
		String value = "";
		if (!"".equals(read)) {
			key = "readFlag";
			value = read;
		}
		if (!"".equals(star)) {
			key = "starFlag";
			value = star;
		}
		EsClient.update("es", "email", esId, key, value);
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(value+"");
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}

	
	/**
	 * 邮件挖掘-联系人分析
	 * @author suny
	 * @time 2017-8-25
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws InterruptedException
	 */
	@RequestMapping(value = "/emaiExcavatel/contactsAnalyze.php")
	public void contactsAnalyze(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String caseidStr = request.getParameter("caseidStr");//案件id
		String suspectsNameStr = request.getParameter("suspectsName");//嫌疑人姓名
		String startDate = request.getParameter("startDate");// 开始时间
		String endDate = request.getParameter("endDate");// 结束时间
		
		List<String> suspectsEmail = new ArrayList<String>();
		if(suspectsNameStr!=null && !"".equals(suspectsNameStr)){
			SuspectInfo suspectInfo12 = new SuspectInfo();
			suspectInfo12.setSuspectName(suspectsNameStr);
			List<SuspectInfo> suspectsEmailList = sqlDao.getListfromMysqlLike(suspectInfo12);
			for (int i=0;i<suspectsEmailList.size();i++) {
				suspectsEmail.add(suspectsEmailList.get(i).getSuspectMail());
			}
		}
		List<EmailNodeDTO> emailNodeDTOList = new ArrayList<EmailNodeDTO>();
		  if(caseidStr== null || "".equals(caseidStr)){
			  
			    Evidence evidence = new Evidence();
				evidence.setIndexFlag(1);
				evidence.setEvType(1);
				List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
				Evidence evidence3 = listfromMysql.get(listfromMysql.size()-1);
				int caseid = evidence3.getCaseID();
				caseidStr=""+caseid;
		  }
		   String[] caseids =  caseidStr.split(" ");
		   int caseidi=0;
		   int caseidiflag=0;
		  for (String caseid : caseids) {
			  caseidiflag=0;
			  Caseinfo caseinfo = new Caseinfo();
			  caseinfo.setId(Integer.parseInt(caseid));
			  List<Caseinfo> listfromMysql = sqlDao.getListfromMysql(caseinfo);
			  String caseName = listfromMysql.get(0).getCaseName();
			  //精确搜索
			  BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
			  mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
			  //caseid
			  mustQuery.must(QueryBuilders.matchPhraseQuery("caseID", caseid));
			
			  // 日期范围
				if (startDate != null && !"".equals(startDate)) {
					RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date")
							.from(startDate + " 00:00:00").to(endDate + " 23:59:59");
					System.out.println("时间分割");
					mustQuery.must(rangequerybuilder);
				}
			  SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email");
					  //嫌疑人姓名
					  if(suspectsNameStr!=null && !"".equals(suspectsNameStr)){
						  searchRequestBuilder.setQuery(QueryBuilders.multiMatchQuery(suspectsEmail, "toWho", "fromWho")); 
					  }
					
			  searchRequestBuilder.setQuery(mustQuery)
					  .setFrom(0)//分页起始位置（跳过开始的n个）
		              .setSize(10000);//本次返回的文档数量
			  //排序 执行
			  SearchResponse searchResponse = searchRequestBuilder
					  .execute().actionGet();//执行搜索
			  SearchHit[] hits = searchResponse.getHits().getHits();
			  long totalHits = searchResponse.getHits().getTotalHits();
			 // List<EmailDTO> emailDTOList = new ArrayList<EmailDTO>();
			  for (SearchHit searchHit : hits) {
				  caseidiflag=1;
				  String esID = (String)searchHit.getId();
				  Map<String, Object> source = searchHit.getSource();
				  String fromWho = (String) source.get("fromWho");
				  String toWho = (String) source.get("toWho");
				  //发件人邮箱添加到node
				  EmailNodeDTO emailNodeDTO = new EmailNodeDTO();
				  emailNodeDTO.setName(fromWho.replace("&lt;", "<").replace("&gt;", ">"));
				  emailNodeDTO.setToWho(toWho.replace("&lt;", "<").replace("&gt;", ">"));
				  emailNodeDTO.setCategory(caseidi);
				  emailNodeDTO.setCaseName(caseName);
				  if(emailNodeDTOList.size()>0){
					  int flag=0;
					  int i = 0;
					  for (EmailNodeDTO emailNodeDTO2 : emailNodeDTOList) {
						if((fromWho.replace("&lt;", "<").replace("&gt;", ">")).equals(emailNodeDTO2.getName())){
							flag=1;
							emailNodeDTOList.get(i).setValue(emailNodeDTOList.get(i).getValue()+1);
							emailNodeDTOList.get(i).setSymbolSize(emailNodeDTOList.get(i).getSymbolSize()+1);
							if(!toWho.equals(emailNodeDTO2.getToWho())){
								emailNodeDTOList.get(i).setToWho(emailNodeDTOList.get(i).getToWho()+"/"+toWho);
							}
						}
						i++;
					  }
					  if(flag==0){
						  emailNodeDTO.setId(i);
						  emailNodeDTO.setValue(1);
						  emailNodeDTO.setSymbolSize(1);
						  emailNodeDTOList.add(emailNodeDTO);
					  }
				  }else{
					  emailNodeDTO.setId(0);
					  emailNodeDTO.setValue(1);  
					  emailNodeDTO.setSymbolSize(1);
					  emailNodeDTOList.add(emailNodeDTO);
				  }
			  }
				  for (SearchHit searchHit : hits) { 
				   //收件人邮箱添加到node
				  String esID = (String)searchHit.getId();
				  Map<String, Object> source = searchHit.getSource();
				  String fromWho = (String) source.get("fromWho");
				  String toWho = (String) source.get("toWho");
				  String[] toWhos = toWho.split(";;");
				  for (String toWho2 : toWhos) {
					  EmailNodeDTO emailNodeDTO3 = new EmailNodeDTO();
					  emailNodeDTO3.setName(toWho2.replace("&lt;", "<").replace("&gt;", ">"));
					  emailNodeDTO3.setToWho(fromWho.replace("&lt;", "<").replace("&gt;", ">"));
					  emailNodeDTO3.setCategory(caseidi);
					  emailNodeDTO3.setCaseName(caseName);
					  if(emailNodeDTOList.size()>0){
						  int flag=0;
						  int i = 0;
						  for (EmailNodeDTO emailNodeDTO4 : emailNodeDTOList) {
							if((toWho2.replace("&lt;", "<").replace("&gt;", ">")).equals(emailNodeDTO4.getName())){
								flag=1;
								emailNodeDTOList.get(i).setValue(emailNodeDTOList.get(i).getValue()+1);
								emailNodeDTOList.get(i).setSymbolSize(emailNodeDTOList.get(i).getSymbolSize()+1);
							}
							i++;
						  }
						  if(flag==0){
							  emailNodeDTO3.setId(i);
							  emailNodeDTO3.setValue(1);  
							  emailNodeDTO3.setSymbolSize(1);
							  emailNodeDTOList.add(emailNodeDTO3);
						  }
					  }else{
						  emailNodeDTO3.setId(0);
						  emailNodeDTO3.setValue(1);  
						  emailNodeDTO3.setSymbolSize(1);
						  emailNodeDTOList.add(emailNodeDTO3);
					  }
				  }
		  	}//遍历hits结束
				  if(caseidiflag==1){
					  caseidi++;
				  }
				 
		  }
		//Map<String, Object> map = new HashMap<String, Object>();
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.list2json(emailNodeDTOList));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}
	
	/**
	 * 邮件挖掘-联系人分析2
	 * @author suny
	 * @time 2017-8-28
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws InterruptedException
	 */
	@RequestMapping(value = "/emaiExcavatel/contactsAnalyze2.php")
	public void contactsAnalyze2(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String caseidStr = request.getParameter("caseidStr");//案件id
		String suspectsNameStr = request.getParameter("suspectsName");//嫌疑人姓名
		String startDate = request.getParameter("startDate");// 开始时间
		String endDate = request.getParameter("endDate");// 结束时间
		/**
		 *============前端选择的案件 ID 集合 ===============
		 */
		 if(caseidStr== null || "".equals(caseidStr)){
			 Evidence evidence = new Evidence();
				evidence.setIndexFlag(1);
				evidence.setEvType(1);
				List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
				Evidence evidence3 = listfromMysql.get(listfromMysql.size()-1);
				int caseid = evidence3.getCaseID();
				caseidStr=""+caseid;
		  }
		String[] caseidStrs = caseidStr.split(" ");
		System.out.println("前端选择的案件 ID 时间===================================="+new Date());
		/**
		 *============嫌疑人list===============
		 */
		List<SuspectInfo> suspectsEmailList = new ArrayList<SuspectInfo>();
		if(suspectsNameStr!=null && !"".equals(suspectsNameStr)){
			SuspectInfo suspectInfo = new SuspectInfo();
			suspectInfo.setSuspectName(suspectsNameStr);
			List<SuspectInfo> suspectsEmail = sqlDao.getListfromMysqlLike(suspectInfo);
			for (int i=0;i<suspectsEmail.size();i++) {
				suspectsEmailList.add(suspectsEmail.get(i));
			}
		}else{
			/**
			 *============所选案件下的所有嫌疑人 ===============
			 */
			for (String caseid : caseidStrs) {
				 Caseinfo caseinfo = new Caseinfo();
				 caseinfo.setId(Integer.parseInt(caseid));
				 List<Caseinfo> listfromMysql = sqlDao.getListfromMysql(caseinfo);
				Caseinfo caseinfo2 = listfromMysql.get(0);
				String mainParty = caseinfo2.getMainParty();
				String[] split = mainParty.split(",");
				//遍历嫌疑人
				for (String string : split) {
					SuspectInfo suspectInfo = new SuspectInfo();
					suspectInfo.setId(Integer.parseInt(string));
					List<SuspectInfo> suspectsEmail = sqlDao.getListfromMysqlLike(suspectInfo);
					if(suspectsEmail.size()>0){
						suspectInfo=suspectsEmail.get(0);
					}
					int susFlag=0;	
					for (SuspectInfo suspectInfo2 : suspectsEmailList) {
						if(suspectInfo.getId()==suspectInfo2.getId()){
							susFlag=1;
						}
					}
					if(susFlag==0){
						suspectsEmailList.add(suspectInfo);
					}	
				}
			}
			
		}
		System.out.println("所选案件下的所有嫌疑人 时间================================"+new Date());
		
		/**
		 *============创建node集合 和link集合 ===============
		 */
		List<EmailNodeDTO2> nodes = new ArrayList<EmailNodeDTO2>();
		List<EmailNode2LinkDTO> links = new ArrayList<EmailNode2LinkDTO>();
		/**
		 *============es查询===============
		 */
		//精确搜索
		  BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		  mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
		//caseid
		 // mustQuery.must(QueryBuilders.matchPhraseQuery("caseID", caseid));
		  // 日期范围
			if (startDate != null && !"".equals(startDate)) {
				RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date")
						.from(startDate + " 00:00:00").to(endDate + " 23:59:59");
				//System.out.println("时间分割");
				mustQuery.must(rangequerybuilder);
			}				
		  SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email")
				  .setQuery(mustQuery)
				 // .setQuery(QueryBuilders.multiMatchQuery(suspectMail, "toWho", "fromWho")) 
				  .setFrom(0)//分页起始位置（跳过开始的n个）
	              .setSize(10000);//本次返回的文档数量
		  //排序 执行
		  SearchResponse searchResponse = searchRequestBuilder
				  .execute().actionGet();//执行搜索
		  SearchHit[] hits = searchResponse.getHits().getHits();
		  
		  System.out.println("es结束 sum:"+searchResponse.getHits().getTotalHits()+" ======================================="+new Date());
		 
		  for (SearchHit searchHit : hits) {
			  String esID = (String)searchHit.getId();
			  Map<String, Object> source = searchHit.getSource();
			  String fromWho = (String) source.get("fromWho");//发件人
			  String toWho = (String) source.get("toWho");
			  String[] toWhos = toWho.split(";;");
			  for (SuspectInfo suspectInfo : suspectsEmailList) {
				  String suspectName=suspectInfo.getSuspectName();
				  String suspectMail=suspectInfo.getSuspectMail();
				  if(fromWho.indexOf(suspectMail)!=-1 || toWho.indexOf(suspectMail)!=-1){// System.out.println("包含");
				 //发件人添加到nodescaseidi
					  EmailNodeDTO2 node1 = new EmailNodeDTO2();
					  if(fromWho.indexOf(suspectMail)!=-1 ){
						  node1.setName(suspectName);
						  node1.setIsSuspect(1);
					  }else{
						  node1.setName(fromWho.replace("&lt;", "<").replace("&gt;", ">"));
						  node1.setIsSuspect(0);
					  }
					  int flag1=0;
					  for (EmailNodeDTO2 node : nodes) {
						if(node1.getName().equals(node.getName())){
							flag1=1;
						}
					  }
					  if(flag1==0){
						  nodes.add(node1); 
					  }
					  //收件人添加到nodes
					  for (String toWho2 : toWhos) {
						  EmailNodeDTO2 node2 = new EmailNodeDTO2();
						  if(toWho2.indexOf(suspectMail)!=-1){
							  node2.setName(suspectName);
							  node2.setIsSuspect(1);
						  }else{
							  node2.setName(toWho2.replace("&lt;", "<").replace("&gt;", ">"));
							  node2.setIsSuspect(0);
						  }
						  int flag2=0;
						  for (EmailNodeDTO2 node : nodes) {
							if(node2.getName().equals(node.getName())){
								flag2=1;
							}
						  }
						  if(flag2==0){
							  nodes.add(node2); 
						  }
						  //连线
						  EmailNode2LinkDTO link = new EmailNode2LinkDTO();
						  link.setFromWho(node1.getName());
						  link.setToWho(node2.getName());
						  link.setEsID(esID);
						  int i =0;
						  int j =0;
						  for (EmailNode2LinkDTO link1 : links) {
							  if(node1.getName().equals(link1.getFromWho()) && node2.getName().equals(link1.getToWho())){
								  //if(esID.equals(link1.getEsID())){
									  links.get(i).setValue(links.get(i).getValue()+1);
								 // }
								  j=1;
							  }
							  i++;
						  }
						  if(j==0){
							  link.setValue(1);
							  links.add(link);
						  }  
					  }
				  }
			  }//emails
		  }//hits
		  
		  System.out.println("结束时间============================"+new Date());
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("nodes", nodes);//nodes"+nodes.size()+"=links="+links.size()+"==linksise="+linksise+"==
		map.put("links", links);
		System.out.println("结束时间nodes"+nodes.size()+"=links="+links.size()+"================================="+new Date());
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.map2json(map));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}
	
			// 收发件分析 导出功能
						@RequestMapping("/ExportMail.php")
						public void ExportMail(HttpServletRequest request, Map<String, Object> map, HttpSession session,
								HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
								IllegalAccessException, InvocationTargetException {
							String filename = "data";
							String projectpath = request.getSession().getServletContext().getRealPath("");
							System.out.println("进入了这个方法！----------------------------------------------------------------------------");
							try {
								HSSFWorkbook wb = null;
								POIFSFileSystem fs = null;
								String path = projectpath + filename + ".xls";
								File file = new File(path);
								createMail(path);
								fs = new POIFSFileSystem(new FileInputStream(path));
								wb = new HSSFWorkbook(fs);
								System.out.println("测试数据！");
								for(EmailDTO testData : getDomainEmail) {
									System.out.println(testData.getEmailType());
								}
								for(int i = 0; i < getDomainEmail.size(); i++) {
									writeMail(getDomainEmail.get(i), wb, path);
								}
								
								String fileName = null;// 下载文件名
								InputStream ins = null;
								OutputStream ous = null;
								try {
									if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") > 0) {
										fileName = new String(file.getName().getBytes(request.getCharacterEncoding()), "ISO8859-1");
									} else {
										fileName = URLEncoder.encode(file.getName(), "UTF-8");
									}
									response.addHeader("content-disposition", "attachment; filename=" + fileName);
									ins = new FileInputStream(file);
									ous = response.getOutputStream();
									int len = 0;
									byte[] buf = new byte[1024];
									while ((len = ins.read(buf)) != -1) {
										ous.write(buf, 0, len);
									}
									/* ous.flush(); */
								} catch (FileNotFoundException e) {
									e.printStackTrace();
								} catch (IOException e) {
									e.printStackTrace();
								} finally {
									if (ins != null) {
										try {
											ins.close();
										} catch (IOException e) {
											e.printStackTrace();
										}
									}
									if (ous != null) {
										try {
											ous.close();
										} catch (IOException e) {
											e.printStackTrace();
										}
									}
								}
								// System.out.println(JSON.toJSONString(bean));
							} catch (Exception e) {
								System.out.println(e);
							}
						}

						public void createMail(String path) throws Exception {
							// 创建Excel的工作书册 Workbook,对应到一个excel文档
							HSSFWorkbook wb = new HSSFWorkbook();

							// 创建Excel的工作sheet,对应到一个excel文档的tab
							HSSFSheet sheet = wb.createSheet("sheet2");

							// 创建Excel的sheet的一行
							HSSFRow row = sheet.createRow(0);

							// 创建一个Excel的单元格
							HSSFCell cell = row.createCell(0);

							// 给Excel的单元格设置样式和赋值
							cell.setCellValue("邮件主题");
							cell = row.createCell(1);
							cell.setCellValue("发件人");
							cell = row.createCell(2);
							cell.setCellValue("收件人");
							cell = row.createCell(3);
							cell.setCellValue("发送日期");
							cell = row.createCell(4);

							FileOutputStream os = new FileOutputStream(path);
							// FileOutputStream os = new FileOutputStream("c:\\spider\\tex.xls");
							wb.write(os);
							os.close();
						}

						public static void writeMail(EmailDTO bean, HSSFWorkbook wb, String path) throws Exception {
							HSSFSheet sheet = wb.getSheetAt(0);
							int begin = sheet.getFirstRowNum();
							int end = sheet.getLastRowNum();
							int m = 0;
							for (int n = begin; n <= end; n++) {
								// System.out.println(sheet.getRow(i).getCell(0).toString());
								try {
									// String cell2 = sheet.getRow(n).getCell(0).toString();
									m++;
								} catch (Exception e) {
									break;
								}
							}

							HSSFRow row1 = sheet.createRow(m);

							// HSSFHyperlink link1 = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
							HSSFCell cell = row1.createCell(0);
							cell.setCellValue(bean.getSubject());
							cell = row1.createCell(1);
							cell.setCellValue(bean.getFromWho());
							cell = row1.createCell(2);
							cell.setCellValue(bean.getToWho());
							cell = row1.createCell(3);
							cell.setCellValue(bean.getDate());
							cell = row1.createCell(4);

							FileOutputStream os = new FileOutputStream(path);
							// FileOutputStream os = new FileOutputStream("c:\\spider\\tex.xls");
							wb.write(os);
							os.close();
						}
	/**
	 * 数据管理-邮件工作台-快速标记查询
	 * */
	@RequestMapping(value = "/emaiExcavatel/quickFlags.php")
	public void quickFlags(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		  response.setContentType("textml; charset=UTF-8");
		  String sortType = request.getParameter("sortType");
		  String regexpQuery = request.getParameter("regexpQuery");
		  String emailKeyword = request.getParameter("emailKeyword");
		  String caseidStr = request.getParameter("caseidStr");
		  String pageIndexstr = request.getParameter("pageIndex");
			String startDate = request.getParameter("startDate");// 开始时间
			String endDate = request.getParameter("endDate");// 结束时间
		  int pageIndex = 1;
		  int pageSize=10;
		  if (pageIndexstr !=null && !"".equals(pageIndexstr)) {
			  pageIndex= Integer.parseInt(pageIndexstr);
		  }
		  if(caseidStr== null || "".equals(caseidStr)){
			  caseidStr="";
		  }
		  String riqi="";
		  String read="";
		  String star="";
		  String fuj="";
		  String[] caseids =  {""}; 
		  if(!"".equals(caseidStr)){
				caseids=caseidStr.split(" ");
		  }
		  String sortConditon = "";
			  if ("未读".equals(sortType)) {
				  read="0";
				  sortConditon="date"; 
			  }else if ("已读".equals(sortType)) {
				  read="1";
				  sortConditon="date";
			  }else if ("星标".equals(sortType)) {
				  star="1";
				  sortConditon="date";
			  }else if ("日期".equals(sortType)) {
				  sortConditon="date";
			  }else if ("收件人".equals(sortType)) {
				  sortConditon="toWho";
			  }else if ("发件人".equals(sortType)) {
				  sortConditon="fromWho";
			  }else if ("IP".equals(sortType)) {
				  sortConditon="ip";
			  }else if ("附件".equals(sortType)) {
				  fuj="123";
				  sortConditon="date";
			  }
		  String quickflag = "";
		  	if("手机号".equals(regexpQuery)) {
				 quickflag=Global.regPhone;
			 }else if ("固定电话".equals(regexpQuery)) {
				 quickflag=Global.regTel;
			 }else if ("身份证号".equals(regexpQuery)) {
				 quickflag=Global.regSFZ;
			 }else if ("邮箱号".equals(regexpQuery)) {
				 quickflag=Global.regEmail;
			 }else if ("银行卡号".equals(regexpQuery)) {
				 quickflag=Global.regCard;
			 }else if ("车牌号".equals(regexpQuery)) {
				 quickflag=Global.regLicense;
			 }else if ("运输车号".equals(regexpQuery)) {
				 quickflag=Global.regModel;
			 }else if ("集装箱号".equals(regexpQuery)) {
				 quickflag=Global.regContainer;
			 }else if ("支付宝号".equals(regexpQuery)) {
				 quickflag=Global.regUP;
			 }else if ("价格".equals(regexpQuery)) {
				 quickflag=Global.regPrice;
			 }else if ("发票代码".equals(regexpQuery)) {
				 quickflag=Global.regStamp;
			 }else if ("信用证".equals(regexpQuery)) {
				 quickflag=Global.regLC;
			 }else if ("电汇".equals(regexpQuery)) {
				 quickflag=Global.regTT;
			 }else if ("QQ号".equals(regexpQuery)) {
				 quickflag=Global.QQnumber;
			 } else if ("推特号".equals(regexpQuery)) {
				 quickflag=Global.twitter;
			 }else if ("微信".equals(regexpQuery)) {
				 quickflag=Global.weChat;
			 }else if ("护照编号".equals(regexpQuery)) {
				 quickflag=Global.passport;
			 }
		  	 System.out.println("es查询开始========>>"+new Date());;	
					  //精确搜索
					  BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
					  mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
					  //caseid集合
					  if(!"".equals(caseidStr)){
						  mustQuery.must(QueryBuilders.termsQuery("caseID",caseids));
					  }
					  //已读未读状态
					  if(!"".equals(read)){
						  mustQuery.must(QueryBuilders.matchPhraseQuery("readFlag", read));
					  }
					  //星标状态
					  if(!"".equals(star)){
						  mustQuery.must(QueryBuilders.matchPhraseQuery("starFlag", star));
					  }
					  //附件
					  if(!"".equals(fuj)){
						  mustQuery.mustNot(QueryBuilders.matchPhraseQuery("attachmentname", ""));
					  }
					  //关键词搜索
					  if(emailKeyword!=null && !"".equals(emailKeyword)){
						  QueryBuilder queryBuilder = QueryBuilders.queryStringQuery(emailKeyword)//.escape(true)//escape 转义 设为true，避免搜索[]、结尾为!的关键词时异常 但无法搜索*
								  .defaultOperator(QueryStringQueryBuilder.Operator.AND);//不同关键词之间使用and关系
						  mustQuery.must(queryBuilder);//添加第4条must的条件 关键词全文搜索筛选条件
					  }
					  //特殊号码
					/* if(!"".equals(quickflag)){
						 QueryBuilder qb = QueryBuilders.regexpQuery("content", quickflag);
					      mustQuery.must(qb);
					 }*/
					// 日期范围
					if (startDate != null && !"".equals(startDate)) {
						RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date")
								.from(startDate + " 00:00:00").to(endDate + " 23:59:59");
						System.out.println("时间分割");
						mustQuery.must(rangequerybuilder);
					}
					
					  SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email")
							  .setQuery(mustQuery)
							  //模糊查询
							  .setFrom(0)//分页起始位置（跳过开始的n个）
				              .setSize(10000);//本次返回的文档数量
					  
					  //排序 执行
					  SearchResponse searchResponse =null;
					  if("date".equals(sortConditon)){
						   searchResponse = searchRequestBuilder
								.addSort(SortBuilders.fieldSort(sortConditon).order(SortOrder.DESC))//按类型排序
								  .execute().actionGet();//执行搜索  
					  }else{
						   searchResponse = searchRequestBuilder
								.addSort(SortBuilders.fieldSort(sortConditon).order(SortOrder.ASC))//按类型排序
								  .execute().actionGet();//执行搜索
					  }
					 
					  
					  SearchHit[] hits = searchResponse.getHits().getHits();

					  int read0 = 0;
					  if("1".equals(read)){
						  read0=0; 
					  }
					  List<EmailDTO> emailDTOList = new ArrayList<EmailDTO>();
					  
					  long fori=0;//计数
					  for (SearchHit searchHit : hits) {
						  String esID = (String)searchHit.getId();
						  Map<String, Object> source = searchHit.getSource();
						  String subject = (String) source.get("subject");
						  String fromWho = (String) source.get("fromWho");
						  String toWho = (String) source.get("toWho");
						  String downloadUrl = (String) source.get("file_download_url");
						  String date = (String) source.get("date");
						  String attachmentname = (String) source.get("attachmentname");//LW:附件名
						  String content = (String) source.get("content");
						  String readFlag = (String) source.get("readFlag");
						  String starFlag = (String) source.get("starFlag");
						  String ip = (String)source.get("ip");
						  
						  int quickflagflag=0;
							EmailDTO emailDTO = new EmailDTO();
							emailDTO.setEsID(esID);
							emailDTO.setRead(Integer.parseInt(readFlag));
							emailDTO.setStar(Integer.parseInt(starFlag));
							emailDTO.setIp(ip);
							emailDTO.setAttachmentname(attachmentname);
							emailDTO.setSubject(subject);
							emailDTO.setFromWho(fromWho);
							emailDTO.setToWho(toWho);
							  Pattern pattern = Pattern.compile(quickflag);
						        // 创建匹配给定输入与此模式的匹配器。
						        Matcher matcher = pattern.matcher(content);
						        //查找字符串中是否有符合的子字符串
						        while(matcher.find()){
						        	quickflagflag=1;
						                //查找到符合的即输出
						        	String group = matcher.group();
						        	content =content.replace(group, "<font style='color: red;background-color: yellow;'>"+group+"</font>");
						        }
							   emailDTO.setContent(content);
							 emailDTO.setDate(date);
							 emailDTO.setDownloadUrl(downloadUrl);
							  if(quickflagflag==1){
								  if(fori>=((pageIndex-1)*10) && fori<(pageIndex*10)){//页数
									  emailDTOList.add(emailDTO); 
								  }
								  if("0".equals(readFlag)){
									  read0+=1;
								  }
								  fori+=1;
							  }
				  	}
		 /* 
		  * 查询未读数目
		  * */
		
		  Map<String, Object> map = new HashMap<String, Object>();
		  map.put("emailDTOList", emailDTOList);
		  map.put("count", fori);
		  map.put("read0", read0);
		  PrintWriter writer = null;
		  try {
			  writer = response.getWriter();
			  writer.write(JsonUtil.map2json(map));
			  writer.flush();
		  } catch (Exception e) {
			  e.printStackTrace();
		  } finally {
			  if (writer != null) {
				  writer.close();
			  }
		  }  
			  
	}	
	
	/**
	 * 获取文件详情
	 * 
	 * @param request
	 * @param response
	 * @param session
	 */
	@RequestMapping(value = "/getCorrectEml.php")
	public void getCorrectEml(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		String emlPath = request.getParameter("emlpath");
		JSONObject resResult = new JSONObject();
		File tempFilePath = new File("/temp/");
		if (!tempFilePath.exists()) {
			tempFilePath.mkdir();
		}
		try {
			String cmd = "hadoop fs -copyToLocal " + emlPath + " /temp/";
			Process process = Runtime.getRuntime().exec(cmd);
			process.waitFor();
		} catch (Exception e1) {
//			e1.printStackTrace();
			System.out.println(e1.getMessage());
		}
		int inx = emlPath.lastIndexOf("/");
		String fname = emlPath.substring(inx + 1);
		File tempFile = new File("/temp/"+fname);
		String content = "";
		try {
			if(tempFile.exists()){
				ReceivedEmail email = EmailUtil.parseEML(tempFile);
				List<EmailMessage> messageList = email.getAllMessages();
				for(EmailMessage message:messageList){
					content = message.getContent();
				}
				List<EmailAttachment> attachments = email.getAttachments();
				if(attachments != null){
					String destPathStr = Global.tomcatPath + "/eml/";
					
					File destPath = new File(destPathStr);
					System.out.println(destPath.exists()+"destPath11111111111111111111"+destPathStr);
					if (!destPath.exists()) {
						destPath.mkdirs();
						System.out.println("destPath2222222222222222222222"+destPath.exists());
					}
					for(EmailAttachment attachment:attachments){
						if(attachment.isInline()){
							attachment.writeToFile(new File(destPathStr+attachment.getName()));
							String contentId = attachment.getContentId();
							System.out.println("contentId<<<<<<<<<<<<>>>>>>>>>>"+contentId);
							contentId = contentId.replace("<", "");
							contentId = contentId.replace(">", "");
							content = content.replace("src=\"cid:"+contentId+"\"", "src=\"/emlpic/"+attachment.getName()+"\"");
							System.out.println();
						}
					}
				}
			}else{
			}
			System.out.println(content);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (MessagingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		
		if (content == null) {
			resResult.put("content", "");
		} else {
//			content = content.replaceAll("\r\n", "<br/>");
//			content = content.replaceAll("\n", "<br/>");
				if(!content.startsWith("<html")){
					content = "<pre>"+content+"</pre>";
				}
				resResult.put("content", content);
		}
//		content = content.replaceAll("\r\n", "<br/>");
//		content = content.replaceAll("\n", "<br/>");
//		resResult.put("content", content);
		PrintWriter pw = null;
		try {
			response.setCharacterEncoding("utf-8");
			response.setContentType("text/html; charset=utf-8");
			pw = response.getWriter();
//			pw.write(content);
			pw.write("{\"resData\":" + resResult.toString() + "}");
			pw.flush();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if(pw != null){
				pw.close();
			}
		}
	}
						
}


















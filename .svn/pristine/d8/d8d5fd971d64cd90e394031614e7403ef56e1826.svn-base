package com.xl.cloud.action;

import com.xl.cloud.bean.*;
import com.xl.cloud.dao.SqlDao;
import com.xl.cloud.util.JsonUtil;
import com.xl.cloud.util.TrimIllegalChar;

import net.sf.json.JSONArray;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/*
 * YC_TODO:
 * 2017/9/18
 *
 * 线索管理
 */
@Controller
public class ThreadManageAction {
    private SqlDao sqlDao = new SqlDao();
    final Logger logger = Logger.getLogger(BuildCollection.class);
    private static final long serialVersionUID = 1L;
    final static TrimIllegalChar tic=new TrimIllegalChar();
    public SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    
 // 操作记录
 		public void actionLog(String name, String action, String module) throws UnknownHostException {
 			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
 			UserAction userActionBean = new UserAction();
 			InetAddress address = InetAddress.getLocalHost();//获取的是本地的IP地址 //PC-20140317PXKX/192.168.0.121
 	        String hostAddress = address.getHostAddress();
 			Date date = new Date();
 			String createDate = sdf.format(date);
 			userActionBean.setName(name);
 			userActionBean.setAction(action);
 			userActionBean.setModule(module);
 			userActionBean.setCreateDate(createDate);
 			userActionBean.setIp(hostAddress);
 			sqlDao.setBeanToMysql(userActionBean);
 		}
    
    //线索上报的跳转进度条页面
    @RequestMapping(value = "/ThreadManage/evidence_adding_Person.php")
	public String evidence_adding_Person(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException {
		return "evidence_adding_Person";
	}
    
    /* YC_TODO: 2017/9/19 线索上报_涉嫌人员的静态页面 */
    @RequestMapping("/showAddInvolve.php")
    public String showAddInvolve_Person(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException {
        return "addInvolve_Person";
    }

/*	 YC_TODO: 2017/9/21 线索上报_涉嫌人员检测 
	@RequestMapping(value = "/checkName_person.php")
	public void checkName_person(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		response.setContentType("text/html;charset=utf-8");
		String evName = request.getParameter("evName");
		String res = "succ";
		if (StringUtils.isEmpty(evName)) {
			evName = "-1";
		}
		//System.out.println("------YC------evName的值 = " + evName + ", " + "当前类 = ThreadManageAction, 当前方法 = checkName_person;");
		Involve_Person involve_person = new Involve_Person();
		involve_person.setPhone(evName);
		List<Involve_Person>  involve_personList = sqlDao.getListfromMysql(involve_person);
		//System.out.println("------YC------involve_personList.size()的值 = " + involve_personList.size() + ", " + "当前类 = ThreadManageAction, 当前方法 = checkName_person;");
		if (involve_personList.size() > 0) {
			res = "exist";
		}

		PrintWriter pw = null;
		try {
			pw = response.getWriter();
			pw.write("{\"res\":\"" + res + "\"}");
			pw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}*/

	
	
	// 查询嫌疑人是否存在
		@RequestMapping(value = "admin/checkEvName.php")
		public void checkEvName(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
			response.setContentType("text/html;charset=utf-8");
			String SuspectPhone = request.getParameter("SuspectPhone");
			
			String suName = request.getParameter("suName");
			String suPhone = request.getParameter("suPhone");
			String suEmail = request.getParameter("suEmail");
			
			
			List<Involve_Person> involve_person1 = new ArrayList<Involve_Person>();

			if (SuspectPhone != null && !"".equals(SuspectPhone)) {
				/*String[] split = SuspectPhone.split(" ");
				String name = split[0];
				String phone = split[1];
				String mail = split[2];*/
				
				if (!"".equals(suName) && suName != null) {
				/*	SuspectInfo suspectInfo = new SuspectInfo();
					suspectInfo.setSuspectName(suName);
					*/
					Involve_Person involve_person = new Involve_Person();
					involve_person.setName(suName);
					List<Involve_Person> eviTemps = sqlDao.getListfromMysql(involve_person);
					if (eviTemps.size() > 0) {
						involve_person = eviTemps.get(0);
						if (involve_person1.size() == 0) {
							System.out.println("(suspectInfoList.size()=="+involve_person1.size());
							involve_person1.add(involve_person);
						} else {
							int flag = 0;
							for (Involve_Person Involve_Person11 : involve_person1) {
								if (Involve_Person11.getId() != involve_person.getId()) {
									flag = 1;
								}
							}
							if (flag == 1) {
								involve_person1.add(involve_person);
							}
						}
					}
				}
				
				
				if (!"".equals(suPhone) && suPhone != null) {
					Involve_Person Involve_Person2 = new Involve_Person();
					Involve_Person2.setPhone(suPhone);
					List<Involve_Person> eviTemps2 = sqlDao.getListfromMysql(Involve_Person2);
					if (eviTemps2.size() > 0) {
						Involve_Person2 = eviTemps2.get(0);
						if (involve_person1.size() == 0) {
							involve_person1.add(Involve_Person2);
						} else {
							int flag = 0;
							for (Involve_Person Involve_Person22 : involve_person1) {
								if (Involve_Person22.getId() != Involve_Person2.getId()) {
									flag = 1;
								}
							}
							if (flag == 1) {
								involve_person1.add(Involve_Person2);
							}
						}
					}
				}
					
				if (!"".equals(suEmail) && suEmail !=null) {
					/*SuspectInfo suspectInfo3 = new SuspectInfo();
					suspectInfo3.setSuspectMail(suEmail);*/
					
					Involve_Person Involve_Person3 = new Involve_Person();
					Involve_Person3.setEmail(suEmail);
					List<Involve_Person> eviTemps3 = sqlDao.getListfromMysql(Involve_Person3);
					if (eviTemps3.size() > 0) {
						Involve_Person3 = eviTemps3.get(0);
						if (involve_person1.size() == 0) {
							involve_person1.add(Involve_Person3);
						} else {
							int flag = 0;
							for (Involve_Person Involve_Person33 : involve_person1) {
								if (Involve_Person33.getId() != Involve_Person3.getId()) {
									flag = 1;
								}
							}
							if (flag == 1) {
								involve_person1.add(Involve_Person3);
							}
						}
					}
				}
					
			}
				

			PrintWriter pw = null;
			try {
				pw = response.getWriter();
				pw.write(JsonUtil.list2json(involve_person1));
				pw.flush();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (pw != null) {
					pw.close();
				}
			}
		}
	
	
	
	/* YC_TODO: 2017/9/21 线索上报_涉嫌单位检测 */
	@RequestMapping(value = "/checkName_unit.php")
	public void checkName_unit(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		response.setContentType("text/html;charset=utf-8");
		String evName = request.getParameter("evName");
		String res = "succ";
		if (StringUtils.isEmpty(evName)) {
			evName = "-1";
		}
		//System.out.println("------YC------evName的值 = " + evName + ", " + "当前类 = ThreadManageAction, 当前方法 = checkName_person;");
		Involve_Unit involve_Unit = new Involve_Unit();
		involve_Unit.setSusUnit(evName);
		List<Involve_Unit>  involve_unitList = sqlDao.getListfromMysql(involve_Unit);
		//System.out.println("------YC------involve_personList.size()的值 = " + involve_unitList.size() + ", " + "当前类 = ThreadManageAction, 当前方法 = checkName_person;");
		if (involve_unitList.size() > 0) {
			res = "exist";
		}

		PrintWriter pw = null;
		try {
			pw = response.getWriter();
			pw.write("{\"res\":\"" + res + "\"}");
			pw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}
	/*@RequestMapping("/admin/addInvolve_Person.php")
	public void adminaddInvolve_Person(HttpServletRequest request, Map<String, Object> map, HttpServletResponse response,
								  HttpSession session) {
		final String userName = (String) session.getAttribute("userName");
		String section = (String) session.getAttribute("section");
		User user = (User) session.getAttribute("user");
		final String addcaseid = request.getParameter("caseid");
		String dataTypes = request.getParameter("dataTypes");
		//String filelength = request.getParameter("filelength");
		String region = request.getParameter("region");
		String status = request.getParameter("status");
		String id = request.getParameter("id");
		String evName = request.getParameter("evName");// 证据名称
		String evName2 = request.getParameter("evName");
		String comment = request.getParameter("comment");// 证据描述
		String threadType = null;
		if ("涉税".equals(dataTypes)) {
			dataTypes = "8";
			threadType = "涉税";
		} else if ("非涉税".equals(dataTypes)) {
			dataTypes = "9";
			threadType = "非涉税";
		} else {
			dataTypes = "-1";
		}
	if(status.equals("0")) {
			
			Involve_Person involve_person = new Involve_Person();
		
			if(evName2!=null && !evName2.equals("")&& evName2!=""){
				String[] spliteName = evName2.split("\\s");
				involve_person.setName(spliteName[0]);
				if(spliteName.length>1){
			    	if(spliteName[1].indexOf("@")>0){
			    		involve_person.setEmail(spliteName[1]);
			    	}else{
			    		involve_person.setPhone(spliteName[1]);
			    	}
				}else if(spliteName.length>2){
					involve_person.setPhone(spliteName[1]);
					involve_person.setEmail(spliteName[2]);
				}
				involve_person.setSuspectName(evName2);
				
			}
		//	involve_person.setUploadStyle(uploadStyle);
			involve_person.setThreadType(threadType);

			involve_person.setSusItem(comment);

			involve_person.setReportPerson(userName);
			//involve_person.setFilePath(filepath);
			involve_person.setCreatedTime(dateFormat.format(new Date()));
			//involve_person.setFileType(fileType);
			if(region!=null && !region.equals("")&& region!=""){
			involve_person.setRegion(region);}
			//System.out.println("测试数据：" + involve_person.getSuspectName());
			sqlDao.setBeanToMysql(involve_person);
			//List<Involve_Person>  involve_personList = sqlDao.getListfromMysql(involve_person);
		//	spersonID = involve_personList.get(0).getId();
		//	evi.setSpersonID(spersonID);
		} else {
			//System.out.println("进入了Unit增加");
			Involve_Unit involve_unit = new Involve_Unit();
			involve_unit.setCreatedTime(dateFormat.format(new Date()));
		//	involve_unit.setFilePath(filepath);
		//	involve_unit.setFileType(fileType);
			involve_unit.setReportPerson(userName);
			involve_unit.setRegion(region);
			involve_unit.setSusItem(comment);
			involve_unit.setSusUnit(evName);
			involve_unit.setThreadType(threadType);
	//		involve_unit.setUploadStyle(uploadStyle);
			//System.out.println("走到这一步");
			sqlDao.setBeanToMysql(involve_unit);
			//System.out.println("没走到这一步");
		//	List<Involve_Unit>  involve_personList = sqlDao.getListfromMysql(involve_unit);
		//	spersonID = involve_personList.get(0).getId();
		//	getName = evName;
		//	evi.setSunitID(spersonID);
		}
		
	
	}*/
	
	
	
	/* YC_TODO: 2017/9/20 线索上报_新建涉嫌人员 */
	@RequestMapping("/addInvolve_Person.php")
	public void addInvolve_Person(HttpServletRequest request, Map<String, Object> map, HttpServletResponse response,
								  HttpSession session) {
		response.setContentType("text/html;charset=utf-8");
		final String userName = (String) session.getAttribute("userName");
		String section = (String) session.getAttribute("section");
		User user = (User) session.getAttribute("user");
		final String addcaseid = request.getParameter("caseid");
		String dataTypes = request.getParameter("dataTypes");
		String filelength = request.getParameter("filelength");
		String region = request.getParameter("region");
		String status = request.getParameter("status");
		String id = request.getParameter("id");
		//System.out.println("测试测试测试："+status);

		String threadType = null;
		if ("涉税".equals(dataTypes)) {
			dataTypes = "8";
			threadType = "涉税";
		} else if ("非涉税".equals(dataTypes)) {
			dataTypes = "9";
			threadType = "非涉税";
		} else {
			dataTypes = "-1";
		}
		String uuid = request.getParameter("evUUID");
		String evName = request.getParameter("evName");// 证据名称
		String evName2 = request.getParameter("evName");
		if(evName==null || ("").equals(evName)){
			evName="case"+uuid.substring(0, 5);
		}
		if(evName.contains(" ")){
			session.setAttribute("evName", evName.substring(0,evName.indexOf(" ")));
			evName = evName.substring(0,evName.indexOf(" "));
		}else{
			session.setAttribute("evName", evName);
		}
		
		String name = evName;
	
		session.setAttribute("evUUID", uuid);

		final String collectionName = name;
		System.out.println(collectionName);
		final String hdfsPath = "/tmp/emaildata/" + addcaseid;//删除collectionname
		String res = "{}";

		String evType = request.getParameter("evType");// 数据类型
		String comment = request.getParameter("comment");// 证据描述
		String evAdmin = userName;
		// 管理人
		/*
		 * String evAdmin = request.getParameter("evAdmin");// 管理人
		 */ String tempPath = request.getParameter("dirPath");// 文件夹路径
		String fangshi = request.getParameter("fangshi");
		String fileType = null;
		if ("电子邮件".equals(evType)) {
			evType = "1";
			fileType = "电子邮件";
		} else if ("综合文档".equals(evType)) {
			evType = "2";
			fileType = "综合文档";
		} else if ("电子话单".equals(evType)) {
			evType = "3";
			fileType = "电子话单";
		} else if ("手机取证".equals(evType)) {
			evType = "4";
			fileType = "手机取证";
		} else if ("黑客数据".equals(evType)) {
			evType = "5";
			fileType = "黑客数据";
		} else if ("图片资料".equals(evType)) {
			evType = "6";
			fileType = "图片资料";
		} else {
			evType = "-1";
		}
		//System.out.println("上传方式："+fileType);
		int uptype = -1;
		String uploadStyle = null;
		if (fangshi.equals("选择本地文件夹上传")) {
			if (!StringUtils.isEmpty(tempPath)) {
				tempPath = "/emaildata/" + evName;
			}
			uptype = 1;
			uploadStyle = "文件夹上传";
		} else if (fangshi.equals("选择本地文件上传")) {
			if (!StringUtils.isEmpty(tempPath)) {
				int inx = tempPath.lastIndexOf("\\");
				tempPath = tempPath.substring(inx + 1);
				tempPath = "/emaildata/" + tempPath;
			}
			uptype = 0;
			uploadStyle = "文件上传";
		}
		final String dirPath = tempPath;

		Evidence evi = new Evidence();
		evi.setCaseID(Integer.parseInt(addcaseid));

		final String filepath = "/emaildata/" + addcaseid + "/" + addcaseid + uuid.substring(0, 10);
		String getName = null;
		int spersonID = -1;
		if(status.equals("0")) {
			
			Involve_Person involve_person = new Involve_Person();
		
			if(evName2!=null && !evName2.equals("")&& evName2!=""){
				String[] spliteName = evName2.split("\\s");
				involve_person.setName(spliteName[0]);
				getName = spliteName[0];
				involve_person.setPhone(spliteName[1]);
				involve_person.setEmail(spliteName[2]);
				involve_person.setSuspectName(evName2);
			}
		
			involve_person.setThreadType(threadType);

			involve_person.setSusItem(comment);

			involve_person.setReportPerson(userName);
	
			involve_person.setCreatedTime(dateFormat.format(new Date()));
			
			if(region!=null && !region.equals("")&& region!=""){
			involve_person.setRegion(region);}
			//System.out.println("测试数据：" + involve_person.getSuspectName());
			sqlDao.setBeanToMysql(involve_person);
			List<Involve_Person>  involve_personList = sqlDao.getListfromMysql(involve_person);
			spersonID = involve_personList.get(0).getId();
			evi.setSpersonID(spersonID);
		} else {
			//System.out.println("进入了Unit增加");
			Involve_Unit involve_unit = new Involve_Unit();
			involve_unit.setCreatedTime(dateFormat.format(new Date()));
			involve_unit.setFilePath(filepath);
			involve_unit.setFileType(fileType);
			involve_unit.setReportPerson(userName);
			involve_unit.setRegion(region);
			involve_unit.setSusItem(comment);
			involve_unit.setSusUnit(evName);
			involve_unit.setThreadType(threadType);
			involve_unit.setUploadStyle(uploadStyle);
			//System.out.println("走到这一步");
			sqlDao.setBeanToMysql(involve_unit);
			//System.out.println("没走到这一步");
			List<Involve_Unit>  involve_personList = sqlDao.getListfromMysql(involve_unit);
			spersonID = involve_personList.get(0).getId();
			getName = evName;
			evi.setSunitID(spersonID);
		}

		//System.out.println("准备插入数据库");
		evi.setEvType(Integer.parseInt(evType));
		if(dataTypes!=null && !dataTypes.equals("")&& dataTypes!=""){
		evi.setDataTypes(Integer.parseInt(dataTypes));}
		//if(comment!=null && !comment.equals("")&& comment!=""){
		evi.setComment(comment);
		//}
//		evi.setDirPath(filepath);
		evi.setDirPath("/tmp/emaildata/"+addcaseid + uuid.substring(0, 10)+".har");//存放hdfs的xxx.har的文件路径
		evi.setEvAdmin(evAdmin);
		evi.setUptype(uptype);
		evi.setEvName(getName);
		evi.setUploadNum(filelength);
		evi.setSuccessNum("0");
		evi.setErrorNum(filelength);
		evi.setFinished("true");
		evi.setStatus("on");
		evi.setAddTime(dateFormat.format(new Date()));
		evi.setStartSolrTime(evi.getAddTime());
		evi.setCurrFlag("1");
		//evi.setOlState(1);
		evi.setUUID(addcaseid + uuid.substring(0, 10));
		//System.out.println("插入数据库");
		sqlDao.setBeanToMysql(evi);
		Evidence eviTemp = new Evidence();
		eviTemp.setUUID(addcaseid + uuid.substring(0, 10));
		List<Evidence> eviTemps = sqlDao.getListfromMysql(eviTemp);
		if (eviTemps != null && eviTemps.size() > 0) {
			eviTemp = eviTemps.get(0);
		}
		final int eviTempID = eviTemp.getId();
		session.setAttribute("eviTempID", eviTempID);

		class Runs implements Runnable {
			@Override
			public void run() {
				String copyLocal = "hadoop fs -copyFromLocal " + filepath + " " + hdfsPath;
				String mkdir = "hadoop fs -mkdir -p " + hdfsPath;
				Process process;
				try {
					logger.info("<============================================>");
					logger.info("<=========mkdir:" + mkdir + "==========>");
					logger.info("<=========unzipCmd:" + copyLocal + "==========>");
					logger.info("<============================================>");
					process = Runtime.getRuntime().exec(mkdir);
					process.waitFor();
					process = Runtime.getRuntime().exec(copyLocal);

					InputStream iserror = process.getErrorStream();
					InputStreamReader isrerror = new InputStreamReader(iserror);
					BufferedReader brerror = new BufferedReader(isrerror);
					while (true) {
						String s = brerror.readLine();
						// logger.info("run1--------------" + s);
						if (s == null) {
							break;
						}
					}
					process.waitFor();
					Evidence evidence = new Evidence();
					evidence.setId(eviTempID);
					List<Evidence> evidences = sqlDao.getListfromMysql(evidence);
					if (evidences.size() > 0) {
						evidence = evidences.get(0);
						evidence.setFinished("true");
						sqlDao.updateToMysql(evidence);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		Runs runs = new Runs();
		Thread unzipThread2 = new Thread(runs);
		unzipThread2.start();
		res = "{\"evID\":\"" + eviTempID + "\",\"res\":\"succ\"}";
		PrintWriter pw = null;
		try {
			pw = response.getWriter();
			pw.write(res);
			pw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}
    
    
    //涉嫌人员
	@RequestMapping(value = "/admin/cluelist.php")
	public String showIndexQueue(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException {
	
		return "cluelist";
	}
	
	@RequestMapping(value = "/admin/cluelistss.php")
	public void cluelistss(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException, UnknownHostException {
		String name = request.getParameter("name");//涉嫌人员姓名
		System.out.println("name"+name);
		String region = request.getParameter("region");//地区
		System.out.println("region"+region);
		String startDate = request.getParameter("startDate");//开始时间
		String endDate = request.getParameter("endDate");//结束时间
		String pageno = request.getParameter("pageno");
		String threadType = request.getParameter("threadType");//线索类型
		String threadSource = request.getParameter("threadSource");//线索来源
		String disposal = request.getParameter("disposal");//线索处置
		String	threadNum = request.getParameter("threadNum");//线索编号
		String	susItem = request.getParameter("susItem");//线索内容
		String	status = request.getParameter("status");//线索状态
		
		
		
		int pageIndex = 1;//当前页数
		int pageSize = 10;//每页个数
		int num = 0;//总页数
		if (!StringUtils.isEmpty(pageno)) {
			pageIndex = Integer.parseInt(pageno);
		}
/*		SuspectAddress Address = new SuspectAddress();
		String id = "";
		if(region!=null && !region.equals("")){
			Address.setRegion(region);
			List<SuspectAddress> k = sqlDao.getListfromMysqlLike(Address);
			for(int i=0;i<k.size();i++){
				SuspectAddress suspectAddress = k.get(i);
				if(id == ""){
					id = Integer.toString(suspectAddress.getId());
				}else{
					id+=","+id+k.get(i).getId();
				}
				Involve_Person involve_Person = new Involve_Person();
				involve_Person.setSuspectAddressID(Integer.toString(suspectAddress.getId()));
				List<Involve_Person> involve_PersonList = sqlDao.getListfromMysqlLike(involve_Person);
				
			}
		}
		String[] ids = id.split(",");*/
		
		//List<Involve_Person> list = new ArrayList<Involve_Person>();
		Involve_Person involve_person = new Involve_Person();
		List<Involve_Person> list1= new ArrayList<Involve_Person>();
		 List<Involve_Person> list2;
		if(threadType!="全部" && !threadType.equals("全部")){
			 involve_person.setThreadType(threadType);
		}
		if(threadSource!="全部"  && !threadSource.equals("全部")){
			 involve_person.setThreadSource(threadSource);
		}
		if(disposal!="全部"  && !disposal.equals("全部")){
			 involve_person.setDisposal(disposal);
		}
		if(status!="全部"  && !status.equals("全部")){
			 involve_person.setStatus(status);
		}
/*		if(name!=null && !name.equals("") ){
			involve_person.setName(name);
		}
	
		if(region!=null && !region.equals("")){
			involve_person.setRegion(region);
		}*/
		if(threadNum!=null && !threadNum.equals("") ){
			involve_person.setThreadNum(threadNum);
		}
		if(susItem!=null && !susItem.equals("") ){
			involve_person.setName(susItem);
		}
		int total = 0;
		if(startDate != null && !"".equals(startDate) && endDate != null && !"".equals(endDate)){
			 list1 =  sqlDao.getListfromMysqlLikTimeecase(involve_person, startDate + " 00:00:00", endDate + " 23:59:59", (pageIndex - 1) * pageSize, pageSize);
			list2 = sqlDao.getListfromMysqlLikecase(involve_person, startDate + " 00:00:00", endDate + " 23:59:59");
			 total=  list2.size();
		}else{
		
			 list1 = sqlDao.getListfromMysqlLike(involve_person,(pageIndex - 1) * pageSize, pageSize);
			 list2 =  sqlDao.getListfromMysqlLike(involve_person);
			 total = sqlDao.getcountfromMysqlLike(involve_person);
		}
	


		


			
			List<Integer> pageList = new ArrayList<Integer>();
			/*	if (num < 5) {
				for (int i = 1; i <= num; i++) {
					pageList.add(i);
				}
			} else {
				if (pageIndex <= 5) {
					for (int i = 1; i <= 5; i++) {
						pageList.add(i);
					}
				} else {
					if (pageIndex + 2 <= num) {
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
						pageList.add(pageIndex + 1);
						pageList.add(pageIndex + 2);
					} else if (pageIndex + 1 <= num) {
						pageList.add(pageIndex - 3);
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
						pageList.add(pageIndex + 1);
					} else {
						pageList.add(pageIndex - 4);
						pageList.add(pageIndex - 3);
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
					}

				}
			}*/
			
			num = total / pageSize;
			if (total % pageSize != 0) {
				num++;
			}

			JSONArray jsonArray = JSONArray.fromObject(list1);
			JSONArray jsonArray2 = JSONArray.fromObject(list2);
			String json_str = jsonArray.toString();
			String json_str2 = jsonArray2.toString();
			String result_data = "{\"totalNum\":\"" + total + "\",\"totalPages\":\"" + num + "\",\"nowPage\":\""
					+ pageIndex + "\",\"resData\":" + json_str + ",\"resData2\":" + json_str2 + "}";
			actionLog((String) session.getAttribute("userName"), "新增", "涉案人员");
			PrintWriter writer = null;
			try {
				writer = response.getWriter();
				writer.write(result_data);
				writer.flush();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (writer != null) {
					writer.close();
				}
			}
			map.put("list", list1);//返回所有的线索信息
			map.put("totalNum", total);
			map.put("totalPages", num);
			map.put("nowPage", pageIndex);
			map.put("pageList", pageList);
	}
	
	
	
    //涉嫌单位
	@RequestMapping(value = "/admin/unitlist.php")
	public String unitlist(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException, UnknownHostException {
		
		String name = request.getParameter("name");//涉嫌人员姓名
		String region = request.getParameter("region");//地区
		String startDate = request.getParameter("startDate");//开始时间
		String endDate = request.getParameter("endDate");//结束时间
		String pageno = request.getParameter("pageno");
		int pageIndex = 1;//当前页数
		int pageSize = 10;//每页个数
		int num = 0;//总页数
		if (!StringUtils.isEmpty(pageno)) {
			pageIndex = Integer.parseInt(pageno);
		}

		
		//List<Involve_Person> list = new ArrayList<Involve_Person>();
		Involve_Unit involve_unit = new Involve_Unit();
		List<Involve_Unit> list1= new ArrayList<Involve_Unit>();
		if(name!=null && !name.equals("") ){
			involve_unit.setSusUnit(name);
		}
		if(region!=null && !region.equals("")){
			involve_unit.setRegion(region);
		}
		
		if(startDate != null && !"".equals(startDate) && endDate != null && !"".equals(endDate)){
			 list1 =  sqlDao.getListfromMysqlLikeev(involve_unit, startDate + " 00:00:00", endDate + " 23:59:59", (pageIndex - 1) * pageSize, pageSize);
		}else{
			 list1 = sqlDao.getListfromMysqlLike(involve_unit,(pageIndex - 1) * pageSize, pageSize);
		}
	

	
			
/*			num = total / pageSize;
			if (total % pageSize != 0) {
				num++;
			}

			List<Integer> pageList = new ArrayList<Integer>();
			if (num < 5) {
				for (int i = 1; i <= num; i++) {
					pageList.add(i);
				}
			} else {
				if (pageIndex <= 5) {
					for (int i = 1; i <= 5; i++) {
						pageList.add(i);
					}
				} else {
					if (pageIndex + 2 <= num) {
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
						pageList.add(pageIndex + 1);
						pageList.add(pageIndex + 2);
					} else if (pageIndex + 1 <= num) {
						pageList.add(pageIndex - 3);
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
						pageList.add(pageIndex + 1);
					} else {
						pageList.add(pageIndex - 4);
						pageList.add(pageIndex - 3);
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
					}

				}
			}*/
		int total = sqlDao.getcountfromMysqlLike(involve_unit);
			num = total / pageSize;
			if (total % pageSize != 0) {
				num++;
			}

			JSONArray jsonArray = JSONArray.fromObject(list1);
		
			String json_str = jsonArray.toString();

			//System.out.println("jsonArray12："+json_str);
			//System.out.println("jsonArray13："+jsonArray);
			String result_data = "{\"totalNum\":\"" + total + "\",\"totalPages\":\"" + num + "\",\"nowPage\":\""
					+ pageIndex + "\",\"resData\":" + json_str + "}";
			actionLog((String) session.getAttribute("userName"), "新增", "涉案单位");

			//System.out.println("jsonArray11：");

			PrintWriter writer = null;
			try {
				writer = response.getWriter();
				writer.write(result_data);
				writer.flush();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (writer != null) {
					writer.close();
				}
			}
/*			map.put("list2", list1);//返回所有的线索信息
			map.put("totalNum2", total);
			map.put("totalPages2", num);
			map.put("nowPage2", pageIndex);
			map.put("pageList2", pageList);*/
		return "cluelist";
	}
	
	
	
	
	
	//删除线索
	@RequestMapping(value = "/deleteclue.php")
	public void deleteclue(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException, UnknownHostException {
		String id  = request.getParameter("id");
		Involve_Person involve_person = new Involve_Person();
		involve_person.setId(Integer.parseInt(id)); //获取线索id 去删除线索
		
		Evidence evidence = new Evidence();
		evidence.setSpersonID(Integer.parseInt(id));//获取线索id 去数据表删除对于数据
		List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);//取数据表查对应线索的数据然后删除hdfs上的文件
		sqlDao.deletefromMysql(involve_person);
		sqlDao.deletefromMysql(evidence);
		if(listfromMysql.size()>0){
			for(int i = 0;i<listfromMysql.size();i++){
				Evidence evidence1 = listfromMysql.get(i);
			String DirPath = evidence1.getDirPath();
			String evName = evidence1.getEvName();
			
			final String hdfsPath = DirPath;//去掉/tmp/+evName一级目录
			//System.out.println("hdfs路径+++++++++++++"+hdfsPath);
			
			String mkdir = "hadoop fs -rm -R " + hdfsPath;
			Process process;

			try {
				process = Runtime.getRuntime().exec(mkdir);
				process.waitFor();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			}
		}
		
		actionLog((String) session.getAttribute("userName"), "删除", "删除线索");
		PrintWriter pw = null;
		try {
			pw = response.getWriter();
			pw.write("{\"res\":\"succ\"}");
			pw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}
	
	//删除单位
	@RequestMapping(value = "/deleteunit.php")
	public void deleteunit(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException, UnknownHostException {
		String id  = request.getParameter("id");
		Involve_Unit iu = new Involve_Unit();
		iu.setId(Integer.parseInt(id)); //获取线索id 去删除线索
		
		Evidence evidence = new Evidence();
		evidence.setSunitID(Integer.parseInt(id));//获取线索id 去数据表删除对于数据
		List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);//取数据表查对应线索的数据然后删除hdfs上的文件
		sqlDao.deletefromMysql(iu);
		sqlDao.deletefromMysql(evidence);
		if(listfromMysql.size()>0){
			for(int i = 0;i<listfromMysql.size();i++){
				Evidence evidence1 = listfromMysql.get(i);
			String DirPath = evidence1.getDirPath();
			String evName = evidence1.getEvName();
			
			final String hdfsPath = DirPath;//去掉/tmp/+evName一级目录
			//System.out.println("hdfs路径+++++++++++++"+hdfsPath);
			
			String mkdir = "hadoop fs -rm -R " + hdfsPath;
			Process process;

			try {
				process = Runtime.getRuntime().exec(mkdir);
				process.waitFor();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			}
		}
		
		actionLog((String) session.getAttribute("userName"), "删除", "删除单位");
		PrintWriter pw = null;
		try {
			pw = response.getWriter();
			pw.write("{\"res\":\"succ\"}");
			pw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}
	
	
	//编辑线索
	@RequestMapping(value = "/editclue.php")
	public void editclue(HttpServletRequest request, Map<String, Object> map, HttpServletResponse response,
			HttpSession session) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException, UnknownHostException {
		String id = request.getParameter("id");
		String name = request.getParameter("name");
		String phone = request.getParameter("phone");
		String emali = request.getParameter("emali");
		String region = request.getParameter("region");
		String threadType = request.getParameter("threadType");
		String susItem = request.getParameter("susItem");
		Involve_Person involve_person = new Involve_Person();
		
		involve_person.setId(Integer.parseInt(id));
		involve_person.setName(name);
		involve_person.setPhone(phone);
		involve_person.setEmail(emali);
		involve_person.setRegion(region);
		involve_person.setThreadType(threadType);
		involve_person.setSusItem(susItem);
		sqlDao.updateToMysql(involve_person);
		String res = "succ";

		actionLog((String) session.getAttribute("userName"), "编辑", "编辑线索");	
		PrintWriter pw = null;

		try {
			pw = response.getWriter();
			pw.write("{\"res\":\"" + res + "\"}");
			pw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}
	
	
	
	/*//关联案件
	@RequestMapping(value = "/admin/addcluecase.php")
	public void addclue(HttpServletRequest request, Map<String, Object> map, HttpServletResponse response,
			HttpSession session) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
			IllegalAccessException, InvocationTargetException {
		response.setContentType("textml; charset=UTF-8");
		String caseIDstr = request.getParameter("caseID");// 案件id
		String evIDstr = request.getParameter("evID");// 数据id
		String types = request.getParameter("types");//
		String res = "succ";
		
		int evID = Integer.parseInt(evIDstr);
		String[] split = caseIDstr.split(",");
		if(types.equals(1)||types=="1"||types.equals("1")){
		for (String string : split) {
			//System.out.println(string);
			int caseID = Integer.parseInt(string);
			Evidence evidence = new Evidence();
			evidence.setSpersonID(evID);
			List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
			if(listfromMysql.size()>0){
				Involve_Person involve_person = new Involve_Person();
				for(int i=0;i<listfromMysql.size();i++){		
					Evidence evidence2 = listfromMysql.get(i);
					evidence2.setCaseID(caseID);
					evidence2.setIndexFlag(-1);
					Evidence evidence3 = new Evidence();
					evidence3.setCaseID(caseID);
					evidence3.setUUID(evidence2.getUUID());
					List<Evidence> listfromMysql2 = sqlDao.getListfromMysql(evidence3);
					
					if(listfromMysql2.size()==0){
						sqlDao.setBeanToMysql(evidence2);
						involve_person.setId(evID);
						involve_person.setClstate(2);
						sqlDao.updateToMysql(involve_person);
						//再次关联案件修改状态
						Evidence evidence4 = new Evidence();
						evidence4.setSpersonID(evID);
						evidence4.setCaseID(-2);
						List<Evidence> listfromMysql4 = sqlDao.getListfromMysql(evidence4);
						if(listfromMysql4.size()>0){
							Evidence evidence5 = listfromMysql4.get(0);
							evidence5.setIndexFlag(-1);
							sqlDao.updateToMysqlCase(evidence5);
						}
					}else{
						involve_person.setId(evID);
						involve_person.setClstate(2);
						sqlDao.updateToMysql(involve_person);
					}
				}
		
			}
		}
		}else if(types.equals(2)||types=="2"||types.equals("2")){
			for (String string : split) {
				//System.out.println(string);
				int caseID = Integer.parseInt(string);
				Evidence evidence = new Evidence();
				evidence.setSunitID(evID);
				List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
				if(listfromMysql.size()>0){
					Involve_Unit iu = new Involve_Unit();
					for(int i=0;i<listfromMysql.size();i++){		
						Evidence evidence2 = listfromMysql.get(i);
						evidence2.setCaseID(caseID);
						Evidence evidence3 = new Evidence();
						evidence3.setCaseID(caseID);
						evidence3.setUUID(evidence2.getUUID());
						List<Evidence> listfromMysql2 = sqlDao.getListfromMysql(evidence3);
						
						if(listfromMysql2.size()==0){
							sqlDao.setBeanToMysql(evidence2);
							iu.setId(evID);
							iu.setClstate(2);
							sqlDao.updateToMysql(iu);
							//再次关联案件修改状态
							Evidence evidence4 = new Evidence();
							evidence4.setSpersonID(evID);
							evidence4.setCaseID(-2);
							List<Evidence> listfromMysql4 = sqlDao.getListfromMysql(evidence4);
							if(listfromMysql4.size()>0){
								Evidence evidence5 = listfromMysql4.get(0);
								evidence5.setIndexFlag(-1);
								sqlDao.updateToMysqlCase(evidence5);
							}
						}else{
							iu.setId(evID);
							iu.setClstate(2);
							sqlDao.updateToMysql(iu);
						}
					}
			
				}
			}
		}
		
		
		PrintWriter pw = null;

	try {
			pw = response.getWriter();
			
			pw.write("{\"res\":\"" + res + "\"}");
			pw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}*/
	
	
	// 查询证据列表
		@RequestMapping(value = "/admin/clueevidencelist.php")
		public String getEvidencelist(HttpServletRequest request, Map<String, Object> map, HttpSession session,
				HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
				IllegalAccessException, InvocationTargetException {

			String pageno = request.getParameter("pageno");

			String evid = request.getParameter("clueid");

			int pageIndex = 1;
			int pageSize = 10;
			int num = 0;

			if (!StringUtils.isEmpty(pageno)) {
				pageIndex = Integer.parseInt(pageno);
			}
			Involve_Person ip=null;

			if (evid != null && !"".equals(evid)) {
				
				Involve_Person Person = new Involve_Person();
				Person.setId(Integer.parseInt(evid));
				List<Involve_Person> Person1 = sqlDao.getListfromMysql(Person);
				ip=Person1.get(0);
			}

			Evidence evidence = new Evidence();
			evidence.setSpersonID(Integer.parseInt(evid));
			List<Evidence> listfromMysql1 = new ArrayList<Evidence>();
			
			List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
			for(int i=0;i<listfromMysql.size();i++){
				Evidence evidence3 = listfromMysql.get(i);
				int flag = 0;
				for (int j=0;j<listfromMysql1.size();j++) {
					
					if(evidence3.getUUID().equals(listfromMysql1.get(j).getUUID())){
						flag = 1;
					}
				
					
				}	if(flag==0){
					listfromMysql1.add(evidence3);
				}
			}

			int total = listfromMysql1.size();
			num = total / pageSize;
			if (total % pageSize != 0) {
				num++;
			}

			List<Integer> pageList = new ArrayList<Integer>();
			if (num < 5) {
				for (int i = 1; i <= num; i++) {
					pageList.add(i);
				}
			} else {
				if (pageIndex <= 5) {
					for (int i = 1; i <= 5; i++) {
						pageList.add(i);
					}
				} else {
					if (pageIndex + 2 <= num) {
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
						pageList.add(pageIndex + 1);
						pageList.add(pageIndex + 2);
					} else if (pageIndex + 1 <= num) {
						pageList.add(pageIndex - 3);
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
						pageList.add(pageIndex + 1);
					} else {
						pageList.add(pageIndex - 4);
						pageList.add(pageIndex - 3);
						pageList.add(pageIndex - 2);
						pageList.add(pageIndex - 1);
						pageList.add(pageIndex);
					}
				}
			}

			map.put("result", ip);
			map.put("logs", listfromMysql1);
			map.put("totalNum", total);
			map.put("totalPages", num);
			map.put("nowPage", pageIndex);
			map.put("pageList", pageList);


			return "elue_evidence";
		}
		
		
		
		// 查询单位证据列表
				@RequestMapping(value = "/admin/unitevidencelist.php")
				public String unitevidencelist(HttpServletRequest request, Map<String, Object> map, HttpSession session,
						HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
						IllegalAccessException, InvocationTargetException {

					String pageno = request.getParameter("pageno");

					String evid = request.getParameter("clueid");

					int pageIndex = 1;
					int pageSize = 10;
					int num = 0;

					if (!StringUtils.isEmpty(pageno)) {
						pageIndex = Integer.parseInt(pageno);
					}
					Involve_Unit iu=null;

					if (evid != null && !"".equals(evid)) {
						
						Involve_Unit Unit = new Involve_Unit();
						Unit.setId(Integer.parseInt(evid));
						List<Involve_Unit> Unit1 = sqlDao.getListfromMysql(Unit);
						iu=Unit1.get(0);
					}

					Evidence evidence = new Evidence();
					evidence.setSunitID(Integer.parseInt(evid));
					List<Evidence> listfromMysql1 = new ArrayList<Evidence>();
					
					List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
					for(int i=0;i<listfromMysql.size();i++){
						Evidence evidence3 = listfromMysql.get(i);
						int flag = 0;
						for (int j=0;j<listfromMysql1.size();j++) {
							
							if(evidence3.getUUID().equals(listfromMysql1.get(j).getUUID())){
								flag = 1;
							}
						
							
						}	if(flag==0){
							listfromMysql1.add(evidence3);
						}
					}

					int total = listfromMysql1.size();
					num = total / pageSize;
					if (total % pageSize != 0) {
						num++;
					}

					List<Integer> pageList = new ArrayList<Integer>();
					if (num < 5) {
						for (int i = 1; i <= num; i++) {
							pageList.add(i);
						}
					} else {
						if (pageIndex <= 5) {
							for (int i = 1; i <= 5; i++) {
								pageList.add(i);
							}
						} else {
							if (pageIndex + 2 <= num) {
								pageList.add(pageIndex - 2);
								pageList.add(pageIndex - 1);
								pageList.add(pageIndex);
								pageList.add(pageIndex + 1);
								pageList.add(pageIndex + 2);
							} else if (pageIndex + 1 <= num) {
								pageList.add(pageIndex - 3);
								pageList.add(pageIndex - 2);
								pageList.add(pageIndex - 1);
								pageList.add(pageIndex);
								pageList.add(pageIndex + 1);
							} else {
								pageList.add(pageIndex - 4);
								pageList.add(pageIndex - 3);
								pageList.add(pageIndex - 2);
								pageList.add(pageIndex - 1);
								pageList.add(pageIndex);
							}
						}
					}

					map.put("result", iu);
					map.put("logs", listfromMysql1);
					map.put("totalNum", total);
					map.put("totalPages", num);
					map.put("nowPage", pageIndex);
					map.put("pageList", pageList);


					return "unit_evidence";
				}
		/**
		 * 无案件数据-上传完成修改数据
		 * 
		 * @param request
		 * @param response
		 * @throws IOException
		 * @throws InterruptedException
		 */
			@RequestMapping(value = "/ThreadManage/getevidencelist.php")
			public String getevidencelist(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {
					//String type=request.getParameter("type");
					//String sum=request.getParameter("sum");
				String uploadNum = request.getParameter("uploadNum");
				if(uploadNum != null && !"".equals(uploadNum)) {
					String getId = session.getAttribute("eviTempID").toString();
					//System.out.println("获取到的Id:\t"+getId);
					
					String successNum = request.getParameter("successNum");
					String errorNum = request.getParameter("errorNum");
					String evSize = request.getParameter("evSize");
					
					
					
					//System.out.println("uploadNum:\t"+uploadNum);
					//System.out.println("successNum:\t"+successNum);
					//System.out.println("errorNum:\t"+errorNum);
					//System.out.println("evSize:\t"+evSize);
					Evidence evidence = new Evidence();
					evidence.setId(Integer.parseInt(getId));
					List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
					Evidence evidence2 = listfromMysql.get(0);
					if(!"6".equals(evidence2.getEvType())){
					String []uu= evidence2.getDirPath().split("/");//截取dirPath的caseid+UUid的拼接路径
					String UUcaseid= uu[uu.length-1];
					String hdfsPath = "/tmp/emaildata/" + evidence2.getCaseID();
					final String archive="hadoop archive -archiveName "+UUcaseid+" -p "+hdfsPath+" "+"/tmp/emaildata/";//执行合并HDFS的小文件
					final String deleteFile="hadoop fs -rm -R "+hdfsPath;//输出之前的小文件的目录
					Process process;                
					try {
						//hadoop archive -archiveName 22099f9b6cf4ea.har.har -p /tmp/emaildata/2875 /tmp/emaildata/
						process = Runtime.getRuntime().exec(archive);
						System.out.println("archive========="+archive);
						process.waitFor();
						process = Runtime.getRuntime().exec(deleteFile);
						System.out.println("deleteFile========="+deleteFile);
						process.waitFor();
					} catch (IOException | InterruptedException e) {
						e.printStackTrace();
					}
					}
					int uploadNum2 = Integer.parseInt(evidence2.getUploadNum());
					int successNum2=Integer.parseInt(successNum);
					int errorNum2 =uploadNum2-successNum2;
					//evidence2.setUploadNum(uploadNum);
					evidence2.setSuccessNum(successNum);
					evidence2.setErrorNum(errorNum2+"");
					evidence2.setEvSize(evSize);
					sqlDao.updateToMysql(evidence2);
					//actionLog((String) session.getAttribute("userName"),"编辑","案件管理");
				}
				return "cluelist";
			}
			/**
			 * 无案件数据-实时更新数据
			 * 
			 * @param request
			 * @param response
			 * @throws IOException
			 * @throws InterruptedException
			 */
			@RequestMapping(value = "/ThreadManage/updateEvidence.php")
			public void updateEvidence(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {
					//String type=request.getParameter("type");
					//String sum=request.getParameter("sum");
				String uploadNum = request.getParameter("uploadNum");
				if(uploadNum != null && !"".equals(uploadNum)) {
					String getId = session.getAttribute("eviTempID").toString();
					//System.out.println("获取到的Id:\t"+getId);
					
					String successNum = request.getParameter("successNum");
					String errorNum = request.getParameter("errorNum");
					String evSize = request.getParameter("evSize");
					//System.out.println("uploadNum:\t"+uploadNum);
					//System.out.println("successNum:\t"+successNum);
					//System.out.println("errorNum:\t"+errorNum);
					//System.out.println("evSize:\t"+evSize);
					Evidence evidence = new Evidence();
					evidence.setId(Integer.parseInt(getId));
					List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence);
					Evidence evidence2 = listfromMysql.get(0);
					int uploadNum2 = Integer.parseInt(evidence2.getUploadNum());
					int successNum2=Integer.parseInt(successNum);
					int errorNum2 =uploadNum2-successNum2;
					//evidence2.setUploadNum(uploadNum);
					evidence2.setSuccessNum(successNum);
					evidence2.setErrorNum(errorNum2+"");
					evidence2.setEvSize(evSize);
					sqlDao.updateToMysql(evidence2);
					//actionLog((String) session.getAttribute("userName"),"编辑","案件管理");
				}
			}
			@RequestMapping(value = "/admin/importevidence_clue.php")
			public String importevidence(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {
				return "importevidence_clue";
			}
			
			
			@RequestMapping(value = "/admin/importevidence_unit.php")
			public String importevidence_unit(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {
				return "importevidence_unit";
			}
			//导入数据
			@RequestMapping(value = "/admin/addclue.php")
			public String getCaseSummary(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {


				String evid = request.getParameter("case_summary_id");


				Involve_Person ip=new Involve_Person();

				if (evid != null && !"".equals(evid)) {
					
					Involve_Person Person = new Involve_Person();
					Person.setId(Integer.parseInt(evid));
					List<Involve_Person> Person1 = sqlDao.getListfromMysql(Person);
					ip=Person1.get(0);
				}

				map.put("result", ip);
				session.setAttribute("caseinfo2", ip);
				return "importevidence_clue";
			}
			
			

			
			//单位导入数据
			@RequestMapping(value = "/admin/addunit.php")
			public String addunit(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {


				String evid = request.getParameter("case_summary_id");


				Involve_Unit iu=new Involve_Unit();

				if (evid != null && !"".equals(evid)) {
					
					Involve_Unit Unit = new Involve_Unit();
					Unit.setId(Integer.parseInt(evid));
					List<Involve_Unit> Unit1 = sqlDao.getListfromMysql(Unit);
					iu=Unit1.get(0);
				}

				map.put("result", iu);
				session.setAttribute("caseinfo2", iu);
				return "importevidence_unit";
			}
			
			// 查询数据关联的案件id
			@RequestMapping(value = "/admin/dirpathselect.php")
			public void dirpathselect(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {


					String evid = request.getParameter("evID");

					Evidence evdence = new Evidence();
					Evidence evidence2 = new Evidence();
					evdence.setId(Integer.parseInt(evid));
					List<Evidence> Unit1 =sqlDao.getListfromMysql(evdence);
					Evidence evidence = Unit1.get(0);
					String dirpath = evidence.getDirPath();
					evidence2.setDirPath(dirpath);
					List<Evidence> listfromMysql = sqlDao.getListfromMysql(evidence2);
					String evid2 =null;
					for (Evidence evidence3 : listfromMysql) {
						int caseid = evidence3.getCaseID();
						
						int id = evidence3.getId();
						
							if(evid2==null){
								evid2=id+"";
							}else{
								evid2 += ","+ id;
							}
						
					
					}
			
					String result_data = "{\"caseid\":\"" + evid2 +"\"}";
						//System.out.println(result_data);
						PrintWriter writer = null;
						try {
							writer = response.getWriter();
							writer.write(result_data);
							writer.flush();
						} catch (IOException e) {
							e.printStackTrace();
						} finally {
							if (writer != null) {
								writer.close();
							}
						}
				}
			
		// 查询所有的更新日志
			@RequestMapping(value = "/admin/aboutlogsss.php")
			public String aboutlogsss(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {

				String pageno = request.getParameter("pageno");


				int pageIndex = 1;
				int pageSize = 100;
				int num = 0;

				if (!StringUtils.isEmpty(pageno)) {
					pageIndex = Integer.parseInt(pageno);
				}
				UpdateLog update = new UpdateLog();


				List<UpdateLog> logs = sqlDao.getOrderListfromMysqlLike(update, (pageIndex - 1) * pageSize, pageSize, "id");
				int total = sqlDao.getcountfromMysqlLike(update);
				num = total / pageSize;
				List<Integer> pageList = new ArrayList<Integer>();
				if (num < 5) {
					for (int i = 1; i <= num; i++) {
						pageList.add(i);
					}
				} else {
					if (pageIndex <= 5) {
						for (int i = 1; i <= 5; i++) {
							pageList.add(i);
						}
					} else {
						if (pageIndex + 2 <= num) {
							pageList.add(pageIndex - 2);
							pageList.add(pageIndex - 1);
							pageList.add(pageIndex);
							pageList.add(pageIndex + 1);
							pageList.add(pageIndex + 2);
						} else if (pageIndex + 1 <= num) {
							pageList.add(pageIndex - 3);
							pageList.add(pageIndex - 2);
							pageList.add(pageIndex - 1);
							pageList.add(pageIndex);
							pageList.add(pageIndex + 1);
						} else {
							pageList.add(pageIndex - 4);
							pageList.add(pageIndex - 3);
							pageList.add(pageIndex - 2);
							pageList.add(pageIndex - 1);
							pageList.add(pageIndex);
						}
					}
				}
			
				JSONArray jsonArray = JSONArray.fromObject(logs);
				String json_str = jsonArray.toString();
				String result_data = "{\"totalNum\":\"" + total + "\",\"totalPages\":\"" + num + "\",\"nowPage\":\""
						+ pageIndex + "\",\"resData\":" + json_str + "}";
				
				
				PrintWriter writer = null;
				try {
					writer = response.getWriter();
					writer.write(result_data);
					writer.flush();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					if (writer != null) {
						writer.close();
					}
				}
				
				map.put("logs", result_data);
				map.put("totalNum", total);
				map.put("totalPages", num);
				map.put("nowPage", pageIndex);
				//map.put("pageList", pageList);

				// request.setAttribute("lab", map);
				return "updatalog";
			}
			
			// 线索导出
			@RequestMapping("/admin/Exportclue.php")
			@ResponseBody
			public void Exportclue(HttpServletRequest request, Map<String, Object> map, HttpSession session,
					HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException {

				String stunoStr = request.getParameter("stunoStr");
				String[] getStr = stunoStr.split(",");
				
				Involve_Person involve_person = new Involve_Person();
				String filename = "data";
				String projectpath = request.getSession().getServletContext().getRealPath("");

				try {
					HSSFWorkbook wb1 = null;
					POIFSFileSystem fs = null;
					String path1 = projectpath + filename + ".xls";
					File file = new File(path1);
					create2(path1);
					fs = new POIFSFileSystem(new FileInputStream(path1));
					wb1 = new HSSFWorkbook(fs);

					for (String str : getStr) {
						int a = Integer.parseInt(str);
						involve_person.setId(a);
						List<Involve_Person> slist = sqlDao.getListfromMysql(involve_person);
						for (int i = 0; i < slist.size(); i++) {
							write2(slist.get(i), wb1, path1);
						}
					}

					String fileName = null;// 下载文件名
					InputStream ins = null;
					OutputStream ous = null;
					try {
						if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") > 0) {
							fileName = new String(file.getName().getBytes(request.getCharacterEncoding()), "ISO8859-1");
						} else {
							fileName = URLEncoder.encode(file.getName(), "UTF-8");
						}
						response.addHeader("content-disposition", "attachment; filename=" + fileName);
						ins = new FileInputStream(file);
						ous = response.getOutputStream();
						int len = 0;
						byte[] buf = new byte[1024];
						while ((len = ins.read(buf)) != -1) {
							ous.write(buf, 0, len);
						}
						/* ous.flush(); */
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					} finally {
						if (ins != null) {
							try {
								ins.close();
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						if (ous != null) {
							try {
								ous.close();
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
					}
				} catch (Exception e) {
					// System.out.println(e);
				}
			}
			
			public void create2(String path) throws Exception {
				// 创建Excel的工作书册 Workbook,对应到一个excel文档
				HSSFWorkbook wb = new HSSFWorkbook();

				// 创建Excel的工作sheet,对应到一个excel文档的tab
				HSSFSheet sheet = wb.createSheet("sheet1");

				// 创建Excel的sheet的一行
				HSSFRow row = sheet.createRow(0);

				// 创建一个Excel的单元格
				HSSFCell cell = row.createCell(0);
				// 给Excel的单元格设置样式和赋值
				cell.setCellValue("线索编号");
				cell = row.createCell(1);
				cell.setCellValue("线索类型");
				cell = row.createCell(2);
				cell.setCellValue("线索接收时间");
				cell = row.createCell(3);
				cell.setCellValue("作案时间");
				cell = row.createCell(4);
				cell.setCellValue("线索来源方式");
				cell = row.createCell(5);
				cell.setCellValue("线索内容");
				cell = row.createCell(6);
				cell.setCellValue("创建时间");
				cell = row.createCell(7);
				cell.setCellValue("创建人");
				cell = row.createCell(8);
				cell.setCellValue("分局");
				cell = row.createCell(9);
				cell.setCellValue("线索处置");
				cell = row.createCell(10);
				cell.setCellValue("线索状态");
				cell = row.createCell(11);
				FileOutputStream os = new FileOutputStream(path);
				// FileOutputStream os = new FileOutputStream("c:\\spider\\tex.xls");
				wb.write(os);
				os.close();
			}
			public static void write2(Involve_Person ip, HSSFWorkbook wb1, String path1) throws Exception {
				HSSFSheet sheet = wb1.getSheetAt(0);
				int begin = sheet.getFirstRowNum();
				int end = sheet.getLastRowNum();
				int m = 0;
				for (int n = begin; n <= end; n++) {
					try {
						// String cell2 = sheet.getRow(n).getCell(0).toString();
						m++;
					} catch (Exception e) {
						break;
					}
				}

				HSSFRow row1 = sheet.createRow(m);

				// HSSFHyperlink link1 = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
				HSSFCell cell = row1.createCell(0);
				cell.setCellValue(ip.getThreadNum());
				cell = row1.createCell(1);
				cell.setCellValue(ip.getThreadType());
				cell = row1.createCell(2);
				cell.setCellValue(ip.getThreadAcceptDate());
				cell = row1.createCell(3);
				cell.setCellValue(ip.getCrimeDate());
				cell = row1.createCell(4);
				cell.setCellValue(ip.getThreadSource());
				cell = row1.createCell(5);
				cell.setCellValue(ip.getSusItem());
				cell = row1.createCell(6);
				cell.setCellValue(ip.getCreatedTime());
				cell = row1.createCell(7);
				cell.setCellValue(ip.getReportPerson());
				cell = row1.createCell(8);
				cell.setCellValue(ip.getSubstation());
				cell = row1.createCell(9);
				cell.setCellValue(ip.getDisposal());
				cell = row1.createCell(10);
				cell.setCellValue(ip.getStatus());
				cell = row1.createCell(11);

				FileOutputStream os = new FileOutputStream(path1);
				wb1.write(os);
				os.close();
			}
			
			//编辑线索
			@RequestMapping(value = "/admin/edit_person.php")
			public String edit_person(HttpServletRequest request, Map<String, Object> map, HttpServletResponse response,
					HttpSession session) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
					IllegalAccessException, InvocationTargetException, UnknownHostException {
				String id = request.getParameter("id");
				Involve_Person involve_person = new Involve_Person();
				Involve_Person involve_Person2 = new Involve_Person();
				involve_person.setId(Integer.parseInt(id));
				List<Involve_Person> listfromMysql = sqlDao.getListfromMysql(involve_person);
				
			//	SuspectInfo suspectInfo = new SuspectInfo();//嫌疑人
			//	SuspectAddress suspectaddress = new SuspectAddress();//地区
				//	SuspectUnit unit = new SuspectUnit();//单位
				List<SuspectAddress> listaddress = new ArrayList<SuspectAddress>();//地区
				List<SuspectInfo> supec = new ArrayList<SuspectInfo>();//嫌疑人
				List<SuspectUnit> sunit = new ArrayList<SuspectUnit>();//单位
				String stu = "";
				String Unit = "";
				String SuAddress = "";
				if(listfromMysql.size()>0){
					involve_Person2 = listfromMysql.get(0);
					String threadAcceptDate = involve_Person2.getSuspectAddressID();//获取地区id
					String[] mains = threadAcceptDate.split(",");
					if(mains.length>0 && mains!=null && !"".equals(mains)){
						for (String mainparit : mains) {
							if(mainparit!=null && mainparit!=""){
								SuspectAddress sadd = new SuspectAddress();
								sadd.setId(Integer.parseInt(mainparit));
								List<SuspectAddress> listfromMysql3 = sqlDao.getListfromMysql(sadd);
								SuspectAddress suspectaddress = listfromMysql3.get(0);
								String Province = suspectaddress.getProvince();
								String City = suspectaddress.getCity();
								String Town = suspectaddress.getTown();
								if ("".equals(SuAddress)) {
									SuAddress = Province + " " + City + " " + Town;
								} else {
									SuAddress += "/" + Province + " " + City + " " + Town;
								}
							}
						}
					}
					
					String SuspectID = involve_Person2.getSuspectID();//获取嫌疑人id
					String[] mains2= SuspectID.split(",");
					System.out.println(mains2.length);
					if(mains2.length>0 && mains2!=null && !"".equals(mains2)){
						for (String mainparit : mains2) {
							SuspectInfo sup = new SuspectInfo();
							if(mainparit!=null && mainparit!=""){
								sup.setId(Integer.parseInt(mainparit));
								List<SuspectInfo> listfromMysql2 = sqlDao.getListfromMysql(sup);
								if(listfromMysql2.size()>0){
									SuspectInfo suspect = listfromMysql2.get(0);
									
									String SuspectName = suspect.getSuspectName();
									String SuspectPhone = suspect.getSuspectPhone();
									String SuspectMail = suspect.getSuspectMail();
									if ("".equals(stu)) {
										stu = SuspectName + " " + SuspectPhone + " " + SuspectMail;
									} else {
										stu += "/" + SuspectName + " " + SuspectPhone + " " + SuspectMail;
									}
									//supec.add(suspect);
								}
							}
						}
					}
					
					
					String SuspectUnit = involve_Person2.getSuspectUnit();//获取单位id
					String[] mains3= SuspectUnit.split(",");
					if(mains3.length>0 && mains3!=null && !"".equals(mains3)){
						for (String mainparit : mains3) {
							if(mainparit!=null && mainparit!=""){
								SuspectUnit scunit = new SuspectUnit();
								scunit.setId(Integer.parseInt(mainparit));
								List<SuspectUnit> listfromMysql4 = sqlDao.getListfromMysql(scunit);
								if(listfromMysql4.size()>0){
									SuspectUnit unit = listfromMysql4.get(0);
									String Name = unit.getName();
									String Address = unit.getAddress();
									String Number = unit.getCustomsRegistrationNumber();
									if ("".equals(Unit)) {
										Unit = Name + " " + Address + " " + Number;
									} else {
										Unit += "/" + Name + " " + Address + " " + Number;
									}
									//sunit.add(unit);
								}
							}
						}
					}
					
				}
				
				map.put("unit", Unit);//单位
				map.put("SuAddress", SuAddress);//地区
				map.put("Person", involve_Person2);//线索
				map.put("stu", stu);//嫌疑人
				
				return "edit_Person";
			}

			// 点提交按钮 编辑案件
			@RequestMapping(value = "/admin/editcaseconfirm.php")
			public String editcasecomfirm(HttpServletRequest request, HttpServletResponse response, HttpSession session) throws UnknownHostException {
				response.setContentType("text/html;charset=utf-8");
				String clue_id = request.getParameter("clue_id");// 案件id
				String threadAcceptDate = (String) session.getAttribute("threadAcceptDate");//线索接受日期
				String crimeDate = request.getParameter("crimeDate");//作案日期
				String susItem = request.getParameter("susItem");//内容
				String mainParty = request.getParameter("mainParty");//人员
				String unitMainPartyss = request.getParameter("unitMainPartys");//单位
				String cityMainPartyss = request.getParameter("cityMainPartys");//地区
				String threadtypes = request.getParameter("threadtypes");//类型
				String threadSources = request.getParameter("threadSources");//来源
		
				System.out.println("mainParty传=="+mainParty);
				// 添加嫌疑人
				String mainParty2 = "";
				
				String suspectUnit = "";
				String suspectAddressID = "";
				SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
				String[] splits = mainParty.split("/");
				String[] splits2 = unitMainPartyss.split("/");//单位
				String[] splits3 = cityMainPartyss.split("/");
				
				for (String string : splits3) {
					String province = null;//省
					String city = null;//市
					String town = null;//区
					String[] split = string.split(" ");
					if (split.length > 0) {
						province = split[0];
					}
					if (split.length > 1) {
						String spu = split[1];
						city = spu;
					}
					if (split.length > 2) {
						String spu2 = split[2];
						town = spu2;
					}
					
					if (province!= null && !"".equals(province)) {
						SuspectAddress suspectaddress = new SuspectAddress();
/*					System.out.println("name="+name);
					System.out.println("number="+number);
					System.out.println("email="+email);*/
						suspectaddress.setProvince(province);
						suspectaddress.setCity(city);
						suspectaddress.setTown(town);
					List<SuspectAddress> listfromMysql = sqlDao.getListfromMysql(suspectaddress);
					
					int i = listfromMysql.size();
					if (i != 0) {
						int id = listfromMysql.get(0).getId();
						if (suspectAddressID == null) {
							suspectAddressID = "" + id;
							System.out.println("null==mainParty2>>>"+suspectAddressID);
						} else {
							suspectAddressID += "," + id;
							System.out.println("else==mainParty2>>>"+suspectAddressID);
						}
					} else {
						
						sqlDao.setBeanToMysql(suspectaddress);
					//	actionLog((String) session.getAttribute("userName"), "新增", "案件列表"+ caseName);
						List<SuspectAddress> listfromMysql2 = sqlDao.getListfromMysql(suspectaddress);
						int id = listfromMysql2.get(0).getId();
						
						if (suspectAddressID == null) {
							suspectAddressID = "" + id;
						} else {
							suspectAddressID += "," + id;
						}
						}
					}
				}
				
				if(suspectAddressID.length()>1){
					String substring = suspectAddressID.substring(0, 1);
					if(",".equals(substring)){
						suspectAddressID=	suspectAddressID.substring(1, suspectAddressID.length());
					}
				}
				
				for (String string : splits2) {
					String name = null;
					String address = null;//地点
					String customsRegistrationNumber = null;//编号
					String[] split = string.split(" ");
					if (split.length > 0) {
						name = split[0];
					}
					if (split.length > 1) {
						String spu = split[1];
						address = spu;
					}
					if (split.length > 2) {
						String spu2 = split[2];
						customsRegistrationNumber = spu2;
					}
					
					if (name!= null && !"".equals(name)) {
						SuspectUnit unit = new SuspectUnit();
/*					System.out.println("name="+name);
					System.out.println("number="+number);
					System.out.println("email="+email);*/
					
					unit.setName(name);
					unit.setAddress(address);
					unit.setCustomsRegistrationNumber(customsRegistrationNumber);
					List<SuspectUnit> listfromMysql = sqlDao.getListfromMysql(unit);
					
					int i = listfromMysql.size();
					if (i != 0) {
						int id = listfromMysql.get(0).getId();
						if (suspectUnit == null) {
							suspectUnit = "" + id;
							System.out.println("null==mainParty2>>>"+suspectUnit);
						} else {
							suspectUnit += "," + id;
							System.out.println("else==mainParty2>>>"+mainParty2);
						}
					} else {
						
						sqlDao.setBeanToMysql(unit);
					//	actionLog((String) session.getAttribute("userName"), "新增", "案件列表"+ caseName);
						List<SuspectUnit> listfromMysql2 = sqlDao.getListfromMysql(unit);
						int id = listfromMysql2.get(0).getId();
						
						if (suspectUnit == null) {
							suspectUnit = "" + id;
						} else {
							suspectUnit += "," + id;
						}
					}
					}
				}
				if(suspectUnit.length()>1){
					String substring = suspectUnit.substring(0, 1);
					if(",".equals(substring)){
						suspectUnit=	suspectUnit.substring(1, suspectUnit.length());
					}
				}
				for (String string : splits) {
					String name = null;
					String number = null;
					String email = null;
					String[] split = string.split(" ");
					if (split.length > 0) {
						name = split[0];
					}
					if (split.length > 1) {
//						number = split[1];
						String spu = split[1];
						if (spu.indexOf("@")>0) {
							email=spu;
						}else{
							number = spu;
						}
					}
					if (split.length > 2) {
//						email = split[2];
						String spu2 = split[2];
						if (spu2.indexOf("@")>0) {
							email=spu2;
						}else{
							number = spu2;
						}
					}
					
					if (name!= null && !"".equals(name)) {
					SuspectInfo suspectInfo = new SuspectInfo();
					System.out.println("name="+name);
					System.out.println("number="+number);
					System.out.println("email="+email);
					
					suspectInfo.setSuspectName(name);
					suspectInfo.setSuspectPhone(number);
					suspectInfo.setSuspectMail(email);
					List<SuspectInfo> listfromMysql = sqlDao.getListfromMysql(suspectInfo);
					
					int i = listfromMysql.size();
					if (i != 0) {
						int id = listfromMysql.get(0).getId();
						if (mainParty2 == null) {
							mainParty2 = "" + id;
							System.out.println("null==mainParty2>>>"+mainParty2);
						} else {
							mainParty2 += "," + id;
							System.out.println("else==mainParty2>>>"+mainParty2);
						}
					} else {
						suspectInfo.setCreateTime(dateFormat2.format(new Date()));
						sqlDao.setBeanToMysql(suspectInfo);
					//	actionLog((String) session.getAttribute("userName"), "新增", "案件列表"+ caseName);
						List<SuspectInfo> listfromMysql2 = sqlDao.getListfromMysql(suspectInfo);
						int id = listfromMysql2.get(0).getId();
						
						if (mainParty2 == null) {
							mainParty2 = "" + id;
						} else {
							mainParty2 += "," + id;
						}
					}
					}
				}
				if(mainParty2.length()>1){
					String substring = mainParty2.substring(0, 1);
					if(",".equals(substring)){
						mainParty2=	mainParty2.substring(1, mainParty2.length());
					}
				}
				
				Involve_Person involve_person = new Involve_Person();
				involve_person.setId(Integer.parseInt(clue_id));
				involve_person.setThreadAcceptDate(threadAcceptDate);
				involve_person.setCrimeDate(crimeDate);
				involve_person.setSusItem(susItem);
				involve_person.setThreadType(threadtypes);
				involve_person.setThreadSource(threadSources);
				involve_person.setSuspectID(mainParty2);
				involve_person.setSuspectUnit(suspectUnit);
				involve_person.setSuspectAddressID(suspectAddressID);
				System.out.println("mainParty2====="+mainParty2);

				sqlDao.updateToMysql(involve_person);
			//	actionLog((String) session.getAttribute("userName"), "编辑", "案件列表:"+ caseName);
				//writeLog( userName,"修改", userName + " 修改案件:" + caseName);
				PrintWriter pw = null;
				try {
					pw = response.getWriter();
					pw.write("{\"res\":\"succ\"}");
					pw.flush();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					if (pw != null) {
						pw.close();
					}
				}
				return "cluelist";
			}
			
			
			/**
		     * 线索登记
		     *
		     * @author YC
		     * @create 2017/11/10 14:32
		     */
		    @RequestMapping("/admin/addInvolve_Person.php")
		    public String adminaddInvolve_Person(HttpServletRequest request, Map<String, Object> map, HttpServletResponse response,
		                                         HttpSession session) {
		        final String userName = (String) session.getAttribute("userName");
//		        String section = (String) session.getAttribute("section");
//		        User user = (User) session.getAttribute("user");
		        String dataTypes = request.getParameter("dataTypes");
		        String status = request.getParameter("status");
		        String comment = request.getParameter("comment");// 证据描述
		        String threadNum = request.getParameter("threadNum"); //线索编号
		        String mainParty = request.getParameter("mainPartyHidden"); //涉嫌人员
		        String suspectUnit = request.getParameter("unitMainParty"); //涉嫌单位
		        String susItem = request.getParameter("susItem"); //线索内容
		        String region = request.getParameter("cityMainParty"); //作案区域
		        String threadSource = request.getParameter("threadSource"); //线索来源
		        String threadAcceptDate = request.getParameter("threadAcceptDate"); //线索接收日期
		        String crimeDate = request.getParameter("crimeDate"); //作案日期
		        String[] threadType = request.getParameterValues("threadType"); //线索类型
		        String getThreadType = "";
		        if (request.getParameterValues("threadType") != null) {
		            for (String s : threadType) {
		                String s1 = s + ",";
		                getThreadType += s1;
		            }
		            getThreadType = getThreadType.substring(0, getThreadType.length() - 1);
		        }

		        String mainParty2 = null;
		        // 添加涉嫌人员
		        SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
		        String[] splits = mainParty.split("/");
		        for (String string : splits) {
		            String name = null;
		            String number = null;
		            String email = null;
		            String[] split = string.split(" ");
		            if (split.length > 0) {
		                name = split[0];
		            }

		            if (split.length > 1) {
		                String spu = split[1];
		                if (spu.indexOf("@") > 0) {
		                    email = spu;
		                } else {
		                    number = spu;
		                }
		            }

		            if (split.length > 2) {
		                String spu2 = split[2];
		                if (spu2.indexOf("@") > 0) {
		                    email = spu2;
		                } else {
		                    number = spu2;
		                }
		            }

		            //下面的判断语句作用是防止插入空值
		            if ((!"".equals(name) && name != null) || (!"".equals(number) && number != null) || (!"".equals(email) && email != null)) {
		                SuspectInfo suspectInfo = new SuspectInfo();
		                suspectInfo.setSuspectName(name);
		                suspectInfo.setSuspectPhone(number);
		                suspectInfo.setSuspectMail(email);
		                suspectInfo.setCreateTime(dateFormat2.format(new Date()));
		                sqlDao.setBeanToMysql(suspectInfo);
		                List<SuspectInfo> listfromMysql2 = sqlDao.getListfromMysql(suspectInfo);
		                int id = listfromMysql2.get(0).getId();
		                if (mainParty2 == null) {
		                    mainParty2 = "" + id;
		                } else {
		                    mainParty2 += "," + id;
		                }

		            }
		        }

		        String addressMainParty2 = null;
		        // 添加作案区域信息
		        String[] addressSplits = region.split("/");
		        for (String string : addressSplits) {
		            String province = null;
		            String city = null;
		            String town = null;
		            String[] split = string.split(" ");
		            if (split.length > 0) {
		                province = split[0];
		            }

		            if (split.length > 1) {
		                city = split[1];
		            }

		            if (split.length > 2) {
		                town = split[2];
		            }

		            //下面的判断语句作用是防止插入空值
		            if ((!"".equals(province) && province != null) || (!"".equals(city) && city != null) || (!"".equals(town) && town != null)) {
		                SuspectAddress suspectAddress = new SuspectAddress();
		                suspectAddress.setProvince(province);
		                suspectAddress.setCity(city);
		                suspectAddress.setTown(town);
						suspectAddress.setRegion(string);
		                sqlDao.setBeanToMysql(suspectAddress);
		                List<SuspectAddress> listfromMysql2 = sqlDao.getListfromMysql(suspectAddress);
		                int id = listfromMysql2.get(0).getId();
		                if (addressMainParty2 == null) {
		                    addressMainParty2 = "" + id;
		                } else {
		                    addressMainParty2 += "," + id;
		                }

		            }
		        }

		        String unitMainParty2 = null;
		        // 添加涉嫌单位
		        String[] unitSplits = suspectUnit.split("/");
		        for (String string : unitSplits) {
		            String unitName = null;
		            String address = null;
		            String customsRegistrationNumber = null;
		            String[] split = string.split(" ");
		            if (split.length > 0) {
		                unitName = split[0];
		            }

		            if (split.length > 1) {
		                address = split[1];
		            }

		            if (split.length > 2) {
		                customsRegistrationNumber = split[2];
		            }

		            //下面的判断语句作用是防止插入空值
		            if ((!"".equals(unitName) && unitName != null) || (!"".equals(address) && address != null) || (!"".equals(customsRegistrationNumber) && customsRegistrationNumber != null)) {
		                SuspectUnit supectUnit = new SuspectUnit();
		                supectUnit.setName(unitName);
		                supectUnit.setAddress(address);
		                supectUnit.setCustomsRegistrationNumber(customsRegistrationNumber);

		                sqlDao.setBeanToMysql(supectUnit);
		                List<SuspectUnit> listfromMysql2 = sqlDao.getListfromMysql(supectUnit);
		                int id = listfromMysql2.get(0).getId();
		                if (unitMainParty2 == null) {
		                    unitMainParty2 = "" + id;
		                } else {
		                    unitMainParty2 += "," + id;
		                }

		            }
		        }

		        Involve_Person involve_person = new Involve_Person();
		        involve_person.setSusItem(susItem);
		        involve_person.setThreadType(getThreadType);
		        involve_person.setCreatedTime(dateFormat.format(new Date()));
		        involve_person.setSuspectID(mainParty2);
		        involve_person.setReportPerson(userName);
		        involve_person.setSuspectUnit(unitMainParty2);
		        involve_person.setSuspectAddressID(addressMainParty2);
		        involve_person.setThreadSource(threadSource);
		        involve_person.setCrimeDate(crimeDate);
		        involve_person.setThreadAcceptDate(threadAcceptDate);
		        involve_person.setStatus("办案中");
		        involve_person.setDisposal("未处置");
		        involve_person.setThreadNum(threadNum);
		        sqlDao.setBeanToMysql(involve_person);
		        return "newThread_success";
		    }

		    /**
		     * 线索登记_涉嫌人员批量导入的功能
		     *
		     * @author YC
		     * @create 2017/11/10 14:27
		     */
		    @RequestMapping(value = "/exThreadSuspectlist.php")
		    public void exSuspectlist(MultipartFile fileLoad, HttpServletRequest request, Map<String, Object> map,
		                              HttpServletResponse response, HttpSession session) throws IOException {
		        System.out.println("进入方法 ： ");
		        String res = "";
		        String suspectNameID = "";
		        if (fileLoad.getSize() > 0) {
		            // 得到项目在服务器的真实根路径，如：/home/tomcat/webapp/项目名/
		            String path = session.getServletContext().getRealPath("");
		            String fileName = fileLoad.getOriginalFilename();
		            File file = new File(path, fileName);
		            fileLoad.transferTo(file);
		            List<List<Object>> lists = ReadExcel.readExcel(file);
		            int i = 0;
		            List<SuspectInfo> suBeans = new ArrayList<SuspectInfo>();
		            if (lists.size() > 0) {
						for (List<Object> list2 : lists) {
							SuspectInfo suBean = new SuspectInfo();
							if (i++ == 0) {
								if (!(list2.get(0).toString()).equals("姓名")) {
									return;
								}

								if (!(list2.get(1).toString()).equals("性别")) {
									return;
								}

								if (!(list2.get(2).toString()).equals("手机号")) {
									return;
								}

								if (!(list2.get(3).toString()).equals("电子邮箱")) {
									return;
								}

								if (!(list2.get(4).toString()).equals("QQ号码")) {
									return;
								}

								if (!(list2.get(5).toString()).equals("位置")) {
									return;
								}

								if (!(list2.get(6).toString()).equals("所在组织名称")) {
									return;
								}

								if (!(list2.get(7).toString()).equals("组织地址")) {
									return;
								}

								if (!(list2.get(8).toString()).equals("身份证号")) {
									return;
								}

								if (!(list2.get(9).toString()).equals("社保号")) {
									return;
								}

								if (!(list2.get(10).toString()).equals("护照号")) {
									return;
								}

								if (!(list2.get(11).toString()).equals("Facebook账号")) {
									return;
								}

								if (!(list2.get(12).toString()).equals("Twitter账号")) {
									return;
								}

								if (!(list2.get(13).toString()).equals("微信号")) {
									return;
								}

								if (!(list2.get(14).toString()).equals("标签")) {
									return;
								}

							}

							System.out.println("#:#:# : " + list2.get(0).toString());
//		                    continue; // 表头不读取
							if (list2 == null || list2.size() == 0)
								break; // 读取到空结束

							if (list2.get(0).toString() == null) {
								suBean.setSuspectName("");
							} else {
								suBean.setSuspectName(list2.get(0).toString());
							}

							if (list2.get(1).toString() == null) {
								suBean.setSuspectSex("");
							} else {
								suBean.setSuspectSex(list2.get(1).toString());
							}

							if (list2.get(2).toString() == null) {
								suBean.setSuspectPhone("");
							} else {
								suBean.setSuspectPhone(list2.get(2).toString());
							}

							if (list2.get(3).toString() == null) {
								suBean.setSuspectMail("");
							} else {
								suBean.setSuspectMail(list2.get(3).toString());
							}

							if (list2.get(4).toString() == null) {
								suBean.setSuspectQQ("");
							} else {
								suBean.setSuspectQQ(list2.get(4).toString());
							}

							if (list2.get(5).toString() == null) {
								suBean.setSuspectHomeAddress("");
							} else {
								suBean.setSuspectHomeAddress(list2.get(5).toString());
							}

							if (list2.get(6).toString() == null) {
								suBean.setSuspectUnitName("");
							} else {
								suBean.setSuspectUnitName(list2.get(6).toString());
							}

							if (list2.get(7).toString() == null) {
								suBean.setSuspectUnitAddress("");
							} else {
								suBean.setSuspectUnitAddress(list2.get(7).toString());
							}

							if (list2.get(8).toString() == null) {
								suBean.setSuspectIDCardNumber("");
							} else {
								suBean.setSuspectIDCardNumber(list2.get(8).toString());
							}

							if (list2.get(9).toString() == null) {
								suBean.setSuspectSocialSecurity("");
							} else {
								suBean.setSuspectSocialSecurity(list2.get(9).toString());
							}

							if (list2.get(10).toString() == null) {
								suBean.setSuspectPassport("");
							} else {
								suBean.setSuspectPassport(list2.get(10).toString());
							}

							if (list2.get(11).toString() == null) {
								suBean.setSuspectFacebook("");
							} else {
								suBean.setSuspectFacebook(list2.get(11).toString());
							}

							if (list2.get(12).toString() == null) {
								suBean.setSuspectTwitter("");
							} else {
								suBean.setSuspectTwitter(list2.get(12).toString());
							}

							if (list2.get(13).toString() == null) {
								suBean.setSuspectMicroletters("");
							} else {
								suBean.setSuspectMicroletters(list2.get(13).toString());
							}

							if (list2.get(14).toString() == null) {
								suBean.setLabel("");
							} else {
								suBean.setLabel(list2.get(14).toString());
							}
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
							Date date = new Date();
							String createTime = sdf.format(date);
							suBean.setCreateTime(createTime);

							suBeans.add(suBean);
						}


						for (SuspectInfo suBean : suBeans) {
							sqlDao.setBeanToMysql(suBean);
							String getName = sqlDao.getListfromMysql(suBean).get(0).getSuspectName();
							String getPhone = sqlDao.getListfromMysql(suBean).get(0).getSuspectPhone();
							String getEmail = sqlDao.getListfromMysql(suBean).get(0).getSuspectMail();
							suspectNameID += getName + " " + getPhone + " " + getEmail + "/";
						}

						if (suspectNameID.length() > 0) {
							suspectNameID = suspectNameID.substring(0, suspectNameID.length() - 1);
						}

						System.out.println("###################### : " + suspectNameID);
						actionLog((String) session.getAttribute("userName"), "导入", "嫌疑人画像 导入嫌疑人");
						res = "导入成功！";
					} else {
						res = "导入失败！";
					}

		        } else {
		            res = "导入失败！";
		        }
		        map.put("res", res);
		        map.put("suspectNameID", suspectNameID);
		        PrintWriter writer = null;
		        try {
		            writer = response.getWriter();
		            writer.write(JsonUtil.map2json(map));
		            writer.flush();
		        } catch (IOException e) {
		            e.printStackTrace();
		        } finally {
		            if (writer != null) {
		                writer.close();
		            }
		        }

		    }

		    /**
		     * 线索登记_涉嫌人员，查询涉嫌单位是否存在
		     *
		     * @author YC
		     * @create 2017/11/10 14:30
		     */
		    @RequestMapping(value = "/checkSuspectUnit.php")
		    public void checkSuspectUnit(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		        response.setContentType("text/html;charset=utf-8");
		        String SuspectPhone = request.getParameter("SuspectPhone");
		        String suName = request.getParameter("suName");
		        String suPhone = request.getParameter("suPhone");
		        String suEmail = request.getParameter("suEmail");
		        List<SuspectUnit> suspectInfoList = new ArrayList<SuspectUnit>();
		        if (SuspectPhone != null && !"".equals(SuspectPhone)) {
		            if (!"".equals(suName) && suName != null) {
		                SuspectUnit suspectUnit = new SuspectUnit();
		                suspectUnit.setName(suName);
		                List<SuspectUnit> eviTemps = sqlDao.getListfromMysql(suspectUnit);
		                if (eviTemps.size() > 0) {
		                    suspectUnit = eviTemps.get(0);
		                    if (suspectInfoList.size() == 0) {
		                        System.out.println("(suspectInfoList.size()==" + suspectInfoList.size());
		                        suspectInfoList.add(suspectUnit);
		                    } else {
		                        int flag = 0;
		                        for (SuspectUnit suspectInfo11 : suspectInfoList) {
		                            if (suspectInfo11.getId() != suspectUnit.getId()) {
		                                flag = 1;
		                            }
		                        }
		                        if (flag == 1) {
		                            suspectInfoList.add(suspectUnit);
		                        }
		                    }
		                }
		            }

		            if (!"".equals(suPhone) && suPhone != null) {
		                SuspectUnit suspectInfo2 = new SuspectUnit();
		                suspectInfo2.setAddress(suPhone);
		                List<SuspectUnit> eviTemps2 = sqlDao.getListfromMysql(suspectInfo2);
		                if (eviTemps2.size() > 0) {
		                    suspectInfo2 = eviTemps2.get(0);
		                    if (suspectInfoList.size() == 0) {
		                        suspectInfoList.add(suspectInfo2);
		                    } else {
		                        int flag = 0;
		                        for (SuspectUnit suspectInfo22 : suspectInfoList) {
		                            if (suspectInfo22.getId() != suspectInfo2.getId()) {
		                                flag = 1;
		                            }
		                        }
		                        if (flag == 1) {
		                            suspectInfoList.add(suspectInfo2);
		                        }
		                    }
		                }
		            }

		            if (!"".equals(suEmail) && suEmail != null) {
		                SuspectUnit suspectInfo3 = new SuspectUnit();
		                suspectInfo3.setCustomsRegistrationNumber(suEmail);
		                List<SuspectUnit> eviTemps3 = sqlDao.getListfromMysql(suspectInfo3);
		                if (eviTemps3.size() > 0) {
		                    suspectInfo3 = eviTemps3.get(0);
		                    if (suspectInfoList.size() == 0) {
		                        suspectInfoList.add(suspectInfo3);
		                    } else {
		                        int flag = 0;
		                        for (SuspectUnit suspectInfo33 : suspectInfoList) {
		                            if (suspectInfo33.getId() != suspectInfo3.getId()) {
		                                flag = 1;
		                            }
		                        }
		                        if (flag == 1) {
		                            suspectInfoList.add(suspectInfo3);
		                        }
		                    }
		                }
		            }

		        }

		        for (SuspectUnit suspectUnit : suspectInfoList) {
		            System.out.println(suspectUnit.getId());
		            System.out.println(suspectUnit.getName());
		            System.out.println(suspectUnit.getAddress());
		            System.out.println(suspectUnit.getCustomsRegistrationNumber());
		        }

		        PrintWriter pw = null;
		        try {
		            pw = response.getWriter();
		            pw.write(JsonUtil.list2json(suspectInfoList));
		            pw.flush();
		        } catch (IOException e) {
		            e.printStackTrace();
		        } finally {
		            if (pw != null) {
		                pw.close();
		            }
		        }
		    }
		    
		    
		    //数据列表临时跳转详情页面
	  		@RequestMapping(value = "/admin/goClueDetails.php")
	  	    public String goClueDetails(HttpServletRequest request, Map<String, Object> map, HttpSession session,
	  				HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
	  				IllegalAccessException, InvocationTargetException {
	  			
//	  			String clueId = request.getParameter("oneClueId");
	  			String clueId = request.getParameter("id");
	  			
	  			User identify = (User) session.getAttribute("user");   //登录人职位
	  			String roless = identify.getPrivilege();
	  			System.out.println("identify=="+roless);
	  			
	  			Involve_Person involve_Person = new Involve_Person();
	  			involve_Person.setId(Integer.parseInt(clueId));
	  			Involve_Person involve_Personlist = sqlDao.getListfromMysql(involve_Person).get(0);
	  			
	  			String suspectId = involve_Personlist.getSuspectID();       //嫌疑人ID
	  			String[] suspectIdArray= suspectId.split(",");
	  			
	  			String suspectUnit = involve_Personlist.getSuspectUnit();	//涉嫌单位ID
	  			String[] suspectUnitArray= suspectUnit.split(",");
	  			
	  			List<SuspectInfo> suspectInfoList1 = new ArrayList<SuspectInfo>();
	  			List<SuspectUnit> suspectUnit31 = new ArrayList<SuspectUnit>();
	  			if(suspectIdArray.length > 0 && suspectIdArray != null && !"".equals(suspectIdArray)){
					for (String mainparit : suspectIdArray) {
			  			//查询涉嫌人员
			  			SuspectInfo suspectInfo = new SuspectInfo();
			  			suspectInfo.setId(Integer.parseInt(mainparit));
			  			
			  			List<SuspectInfo> suspectInfoList = sqlDao.getListfromMysql(suspectInfo);
			  			suspectInfoList1.addAll(suspectInfoList);
					}
	  			}
	  			
	  			if(suspectUnitArray.length > 0 && suspectUnitArray != null && !"".equals(suspectUnitArray)){
					for (String mainparit1 : suspectUnitArray) {
			  			//查询涉嫌单位
			  			SuspectUnit suspectUnit2 = new SuspectUnit();
			  			suspectUnit2.setId(Integer.parseInt(mainparit1));

			  			List<SuspectUnit> suspectUnit3 = sqlDao.getListfromMysql(suspectUnit2);
			  			suspectUnit31.addAll(suspectUnit3);
					}
	  			}
	  			
	  			map.put("roless", roless);			//登录人职位
	  			map.put("involve_Personlist", involve_Personlist);
	  			map.put("suspectInfoList", suspectInfoList1);
	  			map.put("suspectUnit3", suspectUnit31);
	  			
	  	        return "clueDetails";
	  	    }
	  		
	  		
	  	//线索处置和审批
	  	@RequestMapping(value = "/admin/clueHandleAndShenpi.php")
	  	public void getClueInfo(HttpServletRequest request, Map<String, Object> map, HttpSession session,
	  			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
	  			IllegalAccessException, InvocationTargetException {
	  			
	  			String clueId = request.getParameter("clueIds2");
//	  			String disposal = request.getParameter("paramHidden"); //线索处置
	  			
	  			String disposal = request.getParameter("chuzhi"); //线索处置
	  			System.out.println(disposal);
	  			
	  			String fenjuAndOther = request.getParameter("fenjuAndOther"); //分局   和  其他
	  			
	  			String departs21 = request.getParameter("departs21"); //勾选的分局名称
	  			String otherText = request.getParameter("otherText"); //选择其他  输入的文本
	  			
	  			String ifAgrees = request.getParameter("ifAgrees"); //审批是否同意
	  			String opinionInfo = request.getParameter("shenpi"); //线索审批备注
	  			
	  			
	  			System.out.println("clueId=="+clueId);
	  			
	  			Involve_Person involve_Person = new Involve_Person();
	  			involve_Person.setId(Integer.parseInt(clueId));
	  			List<Involve_Person> involve_Personlist = sqlDao.getListfromMysql(involve_Person);
	  			Involve_Person involve_Person1 = involve_Personlist.get(0);
	  			involve_Person1.setDisposal(disposal);
	  			
	  			involve_Person1.setSubstation(departs21);
	  			
	  			
	  			involve_Person1.setOtherText(otherText);
	  			
	  			involve_Person1.setAgreeStatus(ifAgrees);
	  			involve_Person1.setOpinionInfo(opinionInfo);
	  			sqlDao.updateToMysql(involve_Person1);
	  			
	  			PrintWriter pw = null;
	  			try {
	  				pw = response.getWriter();
	  				pw.write("{\"status\":\"success\"}");
	  				pw.flush();
	  			} catch (IOException e) {
	  				e.printStackTrace();
	  			} finally {
	  				if (pw != null) {
	  					pw.close();
	  				}
	  			}
	  	}
}
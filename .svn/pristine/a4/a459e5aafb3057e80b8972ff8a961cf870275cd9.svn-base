package com.xl.cloud.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.xl.cloud.bean.*;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.QueryStringQueryBuilder;
import org.elasticsearch.index.query.RangeQueryBuilder;
import org.elasticsearch.index.query.TermQueryBuilder;
import org.elasticsearch.index.query.WildcardQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.sort.SortBuilders;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import com.auxilii.msgparser.Message;
import com.auxilii.msgparser.MsgParser;
import com.mysql.jdbc.Statement;
import com.xl.cloud.common.Global;
import com.xl.cloud.dao.EmailDao;
import com.xl.cloud.dao.SqlDao;
import com.xl.cloud.dao.ip_SqlDAO;
import com.xl.cloud.util.EsClient;
import com.xl.cloud.util.JsonUtil;

import jodd.mail.EmailAttachment;
import jodd.mail.EmailMessage;
import jodd.mail.EmailUtil;
import jodd.mail.ReceivedEmail;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Controller
public class EmaiExcavatelAction {
	private SqlDao sqlDao = new SqlDao();
	private EmailDao  emailDao = new EmailDao();
	public SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	public List<EmailDTO> getDomainEmail = new ArrayList<EmailDTO>();
	final Logger logger = Logger.getLogger(BuildCollection.class);
	private ip_SqlDAO ip_Sqldao1;

	public EmaiExcavatelAction() throws Exception{
		ip_Sqldao1=new ip_SqlDAO();
	}
	// 操作记录
	public void actionLog(String name, String action, String module) throws UnknownHostException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		UserAction userActionBean = new UserAction();
		InetAddress address = InetAddress.getLocalHost();//获取的是本地的IP地址 //PC-20140317PXKX/192.168.0.121
		String hostAddress = address.getHostAddress();
		Date date = new Date();
		String createDate = sdf.format(date);
		userActionBean.setName(name);
		userActionBean.setAction(action);
		userActionBean.setModule(module);
		userActionBean.setCreateDate(createDate);
		userActionBean.setIp(hostAddress);
		sqlDao.setBeanToMysql(userActionBean);
	}

	/** 
	  * 判断查询结果集中是否存在某列 
	  * @param rs 查询结果集 
	  * @param columnName 列名 
	  * @return true 存在; false 不存咋 
	  */
	public boolean isExistColumn(ResultSet rs, String columnName) {  
		try {  
			if (rs.findColumn(columnName) > 0 ) {  
				return true;  
			}   
		}  
		catch (SQLException e) {  
			return false;  
		} 			       
		return false;  
	}  

	/**
	 * 数据管理-邮件工作台-查询邮件 执行分布式搜索访问并处理数据，邮件列表
	 * @throws UnknownHostException 
	 */
	@RequestMapping(value = "/emaiExcavatel/getEmailList.php")
	public void getEmailList(HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		response.setContentType("textml; charset=UTF-8");
		String sortType = request.getParameter("sortType");
		String regexpQuery = request.getParameter("regexpQuery");
		String emailKeyword = request.getParameter("emailKeyword");
		String caseidStr = request.getParameter("caseidStr");
		String pageIndexstr = request.getParameter("pageIndex");
		String startDate = request.getParameter("startDate");// 开始时间
		String endDate = request.getParameter("endDate");// 结束时间
		//高级搜索条件
		String orKey = request.getParameter("orKey");//or
		String andKey = request.getParameter("andKey");//and
		String notKey = request.getParameter("notKey");//not
		String timeType = request.getParameter("timeType");//之间,之外,之前,之后
		String kaishiTime = request.getParameter("kaishiTime");// 开始时间
		String jieshuTime = request.getParameter("jieshuTime");// 结束时间
		String matchingType = request.getParameter("matchingType");//1任意,2全部
		String emailstr = request.getParameter("emailstr");//邮箱地址
		String emailType = request.getParameter("emailType");//收发类型
		int pageIndex = 1;
		int pageSize = 10;
		if (pageIndexstr != null && !"".equals(pageIndexstr)) {
			pageIndex = Integer.parseInt(pageIndexstr);
		}
		// 默认最新数据的案件
		if (caseidStr == null || "".equals(caseidStr)) {
			caseidStr="-1";
		}
		String riqi = "";
		String read = "";
		String star = "";
		String fuj = "";

		String[] caseids = { "" };
		if (!"".equals(caseidStr)) {
			caseids = caseidStr.split(" ");
		}
		String sortConditon = "";
		if ("未读".equals(sortType)) {
			read = "0";
			sortConditon = "date";
		} else if ("已读".equals(sortType)) {
			read = "1";
			sortConditon = "date";
		} else if ("星标".equals(sortType)) {
			star = "1";
			sortConditon = "date";
		} else if ("日期".equals(sortType)) {
			sortConditon = "date";
		} else if ("收件人".equals(sortType)) {
			sortConditon = "toWho";
		} else if ("发件人".equals(sortType)) {
			sortConditon = "fromWho";
		} else if ("IP".equals(sortType)) {
			sortConditon = "ip";
		} else if ("附件".equals(sortType)) {
			fuj = "123";
			sortConditon = "date";
		}
		// 精确搜索
		BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		//mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档

		//高级搜索or
		if(orKey!=null && !"".equals(orKey)){
			String[] orKeylist = orKey.split(" ");
			// 组合 模糊查询  should  
			BoolQueryBuilder ors = QueryBuilders.boolQuery(); 
			for (String string : orKeylist) {
				TermQueryBuilder subject = QueryBuilders.termQuery("subject", string); 
				TermQueryBuilder content = QueryBuilders.termQuery("content", string);  
				TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", string);
				TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", string);
				TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", string);
				TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", string);  
				ors.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
			}
			if("1".equals(matchingType)){
				mustQuery.should(ors);
			}else{
				mustQuery.must(ors);
			}
		}

		//高级搜索and
		if(andKey!=null && !"".equals(andKey)){
			String[] andKeylist = andKey.split(" ");
			for (String string : andKeylist) {
				// 组合 模糊查询  should 
				BoolQueryBuilder ands = QueryBuilders.boolQuery(); 
				TermQueryBuilder subject = QueryBuilders.termQuery("subject", string); 
				TermQueryBuilder content = QueryBuilders.termQuery("content", string);  
				TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", string);
				TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", string);
				TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", string);
				TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", string);  
				ands.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
				if("1".equals(matchingType)){
					mustQuery.should(ands);
				}else{
					mustQuery.must(ands);
				}
			}
		}
		//高级搜索not
		if(notKey!=null && !"".equals(notKey)){
			String[] notKeylist = notKey.split(" ");
			for (String string : notKeylist) {
				// 组合 模糊查询  should  
				BoolQueryBuilder nots = QueryBuilders.boolQuery(); 
				TermQueryBuilder subject = QueryBuilders.termQuery("subject", string); 
				TermQueryBuilder content = QueryBuilders.termQuery("content", string);  
				TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", string);
				TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", string);
				TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", string);
				TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", string);  
				nots.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
				if("2".equals(matchingType)){
					mustQuery.mustNot(nots);
				}
			}
		}
		//高级搜索邮箱地址
		if(emailstr!=null && !"".equals(emailstr)){
			String[] emailstrKeylist = emailstr.split(" ");
			// 组合 模糊查询  should  
			BoolQueryBuilder emailstrs = QueryBuilders.boolQuery();
			for (String string : emailstrKeylist) {
				WildcardQueryBuilder fromWho = QueryBuilders.wildcardQuery("fromWho", "*"+string+"*");  
				WildcardQueryBuilder toWho = QueryBuilders.wildcardQuery("toWho", "*"+string+"*");  
				if("收发".equals(emailType)){
					emailstrs.should(fromWho).should(toWho);
				}else if("发".equals(emailType)){
					emailstrs.should(fromWho);
				}else if("收".equals(emailType)){
					emailstrs.should(toWho);
				}
			}
			if("1".equals(matchingType)){
				mustQuery.should(emailstrs);
			}else{
				mustQuery.must(emailstrs);
			}
		}
		//高级搜索 日期
		if("之间".equals(timeType) && kaishiTime!=null && !"".equals(kaishiTime) && jieshuTime!=null && !"".equals(jieshuTime)){
			RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").from(kaishiTime + " 00:00:00")
					.to(jieshuTime + " 23:59:59");
			if("1".equals(matchingType)){
				mustQuery.should(rangequerybuilder);
			}else{
				mustQuery.must(rangequerybuilder);
			}
		}else if("之外".equals(timeType) && kaishiTime!=null && !"".equals(kaishiTime) && jieshuTime!=null && !"".equals(jieshuTime)){
			// 组合 模糊查询  should  
			BoolQueryBuilder ors = QueryBuilders.boolQuery(); 
			RangeQueryBuilder subject = QueryBuilders.rangeQuery("date").lt(kaishiTime + " 00:00:00");
			RangeQueryBuilder content = QueryBuilders.rangeQuery("date").gt(jieshuTime + " 23:59:59");   
			ors.should(subject).should(content);
			if("1".equals(matchingType)){
				mustQuery.should(ors);
			}else{
				mustQuery.must(ors);
			}
		}else if("之前".equals(timeType) && kaishiTime!=null && !"".equals(kaishiTime)){
			RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").lt(kaishiTime + " 00:00:00");
			if("1".equals(matchingType)){
				mustQuery.should(rangequerybuilder);
			}else{
				mustQuery.must(rangequerybuilder);
			}
		}else if("之后".equals(timeType) && jieshuTime!=null && !"".equals(jieshuTime)){
			RangeQueryBuilder rangequerybuilder2 = QueryBuilders.rangeQuery("date").gt(jieshuTime + " 23:59:59");
			if("1".equals(matchingType)){
				mustQuery.should(rangequerybuilder2);
			}else{
				mustQuery.must(rangequerybuilder2);
			}
		}

		// caseid集合
		if (!"".equals(caseidStr)) {
			mustQuery.must(QueryBuilders.termsQuery("caseID", caseids));
		}
		// 已读未读状态
		if (!"".equals(read)) {
			mustQuery.must(QueryBuilders.matchPhraseQuery("readFlag", read));
			actionLog((String) session.getAttribute("userName"), "搜索邮件状态", "邮件挖掘 ");
		}
		// 星标状态
		if (!"".equals(star)) {
			mustQuery.must(QueryBuilders.matchPhraseQuery("starFlag", star));
			actionLog((String) session.getAttribute("userName"), "搜索星标", "邮件挖掘 ");
		}
		// 附件
		if (!"".equals(fuj)) {
			mustQuery.must(QueryBuilders.matchPhraseQuery("attachmentname", sortType));
			actionLog((String) session.getAttribute("userName"), "搜索附件", "邮件挖掘 ");
		}
		// 关键词搜索
		if (emailKeyword != null && !"".equals(emailKeyword)) {
			emailKeyword=emailKeyword.toLowerCase();
			// 组合 模糊查询  should  
			BoolQueryBuilder ors = QueryBuilders.boolQuery(); 
			TermQueryBuilder subject = QueryBuilders.termQuery("subject", emailKeyword); 
			TermQueryBuilder content = QueryBuilders.termQuery("content", emailKeyword);  
			TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", emailKeyword);
			TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", emailKeyword);
			TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", emailKeyword);
			TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", emailKeyword);  
			ors.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
			mustQuery.must(ors);
			actionLog((String) session.getAttribute("userName"), "搜索关键词："+emailKeyword, "邮件挖掘 ");
		}
		// 日期范围
		if (startDate != null && !"".equals(startDate)) {
			RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").from(startDate + " 00:00:00")
					.to(endDate + " 23:59:59");
			mustQuery.must(rangequerybuilder);
		}
		SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email")
				.setQuery(mustQuery).setFrom((pageIndex - 1) * pageSize)// 分页起始位置（跳过开始的n个）
				.setSize(10);// 本次返回的文档数量
				
		// 排序 执行
		SearchResponse searchResponse = null;
		if ("date".equals(sortConditon)) {
			searchResponse = searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH)
					.addSort(sortConditon, SortOrder.ASC).execute().actionGet();// 执行搜索
		} else {
			searchResponse = searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH)
					.addSort(sortConditon, SortOrder.ASC).execute().actionGet();// 执行搜索
		}
		SearchHit[] hits = searchResponse.getHits().getHits();
		long totalHits = searchResponse.getHits().getTotalHits();
		List<EmailDTO> emailDTOList = new ArrayList<EmailDTO>();
		MainFrameAction.ip_Sqldao=new ip_SqlDAO();
		java.sql.Connection conn1=MainFrameAction.ip_Sqldao.getConnection();				 
		Statement stmt=(Statement) conn1.createStatement();
		ResultSet rs1=null;
		for (SearchHit searchHit : hits) {
			EmailDTO emailDTO = new EmailDTO();
			String esID = (String) searchHit.getId();
			Map<String, Object> source = searchHit.getSource();
			String subject = (String) source.get("subject");
			String fromWho = (String) source.get("fromWho");
			String toWho = (String) source.get("toWho");
			String downloadUrl = (String) source.get("file_download_url");
			String date = (String) source.get("date");
			String attachmentname = (String) source.get("attachmentname");// LW:附件名
			String content = (String) source.get("content");
			String readFlag = (String) source.get("readFlag");
			String starFlag = (String) source.get("starFlag");
			String ip = (String) source.get("ip");
			String caseName = (String) source.get("caseName");
			String caseID = (String) source.get("caseID");
			String multiarea="";
			String sql="SELECT * FROM ipoff WHERE minip<=INET_ATON('"+ip+"') ORDER BY minip DESC LIMIT 1";
			// PreparedStatement st1=conn1.prepareStatement("SELECT * FROM ipoff WHERE minip<=INET_ATON('"+ip+"') ORDER BY minip DESC LIMIT 1");
			//st1.execute();
			//  ResultSet rs1=st1.getResultSet();
			 rs1=stmt.executeQuery(sql); 
			if(rs1!=null){
				
			while(rs1.next()){
				
					if(isExistColumn(rs1, "multiarea")){
						multiarea = rs1.getString("multiarea");
				
					break;
				}
				
			}			
			}
			
			
			//  [{"w":"47.615640","j":"-122.210880","p":"华盛顿","c":"贝尔维","d":""}]
			if(multiarea!=null&&!"".equals(multiarea)){
				String multiarea1=multiarea.replace("\"", "");
				String[] k = multiarea1.split(",|\\:");
				String lon=k[k.length-5];
				String lat=k[k.length-3];

				String address=lon+"-"+lat;
				emailDTO.setMultiarea(address);
			} 

			//Map<String, HighlightField> highlightFields = searchHit.getHighlightFields();
			int quickflagflag = 0;

			emailDTO.setEsID(esID);
			emailDTO.setRead(Integer.parseInt(readFlag));
			emailDTO.setStar(Integer.parseInt(starFlag));
			emailDTO.setIp(ip);
			emailDTO.setCaseName(caseName);
			emailDTO.setCaseID(caseID);
			emailDTO.setAttachmentname(attachmentname);
			if (emailKeyword != null && !"".equals(emailKeyword)) {
				 Pattern p = Pattern.compile("(?i)"+emailKeyword);
			        Matcher m = p.matcher( subject) ;
			        String mv = null;
			        String string = subject;
			        while ( m.find() ) {
			        	mv = m.group(0);
//			        	System.out.println( mv );
			        	string = string.replaceAll(mv, "<font style='color: red;background-color: yellow;'>" + mv + "</font>");
			        }
//				String s1 = subject.replace(emailKeyword,
//						"<font style='color: red;background-color: yellow;'>" + emailKeyword + "</font>");
				//emailDTO.setSubject(s1);
				emailDTO.setSubject(string);
			} else {
				emailDTO.setSubject(subject);
			}
			if (emailKeyword != null && !"".equals(emailKeyword)) {
				Pattern p = Pattern.compile("(?i)"+emailKeyword);
		        Matcher m = p.matcher( fromWho) ;
		        String mv = null;
		        String string = fromWho;
		        while ( m.find() ) {
		        	mv = m.group(0);
//		        	System.out.println( mv );
		        	string = string.replaceAll(mv, "<font style='color: red;background-color: yellow;'>" + mv + "</font>");
		        }
//				String s1 = fromWho.replace(emailKeyword,
//						"<font style='color: red;background-color: yellow;'>" + emailKeyword + "</font>");
				emailDTO.setFromWho(string);
			} else {
				emailDTO.setFromWho(fromWho);
			}
			if (emailKeyword != null && !"".equals(emailKeyword)) {
				Pattern p = Pattern.compile("(?i)"+emailKeyword);
		        Matcher m = p.matcher( toWho) ;
		        String mv = null;
		        String string = toWho;
		        while ( m.find() ) {
		        	mv = m.group(0);
//		        	System.out.println( mv );
		        	string = string.replaceAll(mv, "<font style='color: red;background-color: yellow;'>" + mv + "</font>");
		        }
//				String s1 = toWho.replace(emailKeyword,
//						"<font style='color: red;background-color: yellow;'>" + emailKeyword + "</font>");
				emailDTO.setToWho(string);
			} else {
				emailDTO.setToWho(toWho);
			}
			if (emailKeyword != null && !"".equals(emailKeyword)) {
				Pattern p = Pattern.compile("(?i)"+emailKeyword);
		        Matcher m = p.matcher( content) ;
		        String mv = null;
		        String string = content;
		        while ( m.find() ) {
		        	mv = m.group(0);
//		        	System.out.println( mv );
		        	string = string.replaceAll(mv, "<font style='color: red;background-color: yellow;'>" + mv + "</font>");
		        }
//				String s1 = content.replace(emailKeyword,
//						"<font style='color: red;background-color: yellow;'>" + emailKeyword + "</font>");
				emailDTO.setContent(string);
			}/* else if (quickflag != null && !"".equals(quickflag)) {
				quickflagflag = 1;
				String s1 = content;
				Pattern pattern = Pattern.compile(quickflag);
				// 创建匹配给定输入与此模式的匹配器。
				Matcher matcher = pattern.matcher(content);
				// 查找字符串中是否有符合的子字符串
				while (matcher.find()) {
					quickflagflag = 0;
					// 查找到符合的即输出
					String group = matcher.group();
					s1 = s1.replace(group, "<font style='color: red;background-color: yellow;'>" + group + "</font>");
				}
				emailDTO.setContent(s1);
			}*/ else {
				emailDTO.setContent(content);
			}
			if (emailKeyword != null && !"".equals(emailKeyword)) {
				Pattern p = Pattern.compile("(?i)"+emailKeyword);
		        Matcher m = p.matcher( date) ;
		        String mv = null;
		        String string = date;
		        while ( m.find() ) {
		        	mv = m.group(0);
//		        	System.out.println( mv );
		        	string = string.replaceAll(mv, "<font style='color: red;background-color: yellow;'>" + mv + "</font>");
		        }
//				String s1 = date.replace(emailKeyword,
//						"<font style='color: red;background-color: yellow;'>" + emailKeyword + "</font>");
				emailDTO.setDate(string);
			} else {
				emailDTO.setDate(date);
			}
			emailDTO.setDownloadUrl(downloadUrl);
			if (quickflagflag == 0) {
				emailDTOList.add(emailDTO);
			}

		}
		if(rs1!=null){
			rs1.close();
		}
		MainFrameAction.ip_Sqldao.close();
		/*
		 * 查询未读数目
		 */
		// 精确搜索
		BoolQueryBuilder mustQuery2 = QueryBuilders.boolQuery();
		//高级搜索or
		if(orKey!=null && !"".equals(orKey)){
			String[] orKeylist = orKey.split(" ");
			// 组合 模糊查询  should  
			BoolQueryBuilder ors = QueryBuilders.boolQuery(); 
			for (String string : orKeylist) {
				TermQueryBuilder subject = QueryBuilders.termQuery("subject", string); 
				TermQueryBuilder content = QueryBuilders.termQuery("content", string);  
				TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", string);
				TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", string);
				TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", string);
				TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", string);  
				ors.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
			}
			if("1".equals(matchingType)){
				mustQuery2.should(ors);
			}else{
				mustQuery2.must(ors);
			}
		}

		//高级搜索and
		if(andKey!=null && !"".equals(andKey)){
			String[] andKeylist = andKey.split(" ");
			for (String string : andKeylist) {
				// 组合 模糊查询  should 
				BoolQueryBuilder ands = QueryBuilders.boolQuery(); 
				TermQueryBuilder subject = QueryBuilders.termQuery("subject", string); 
				TermQueryBuilder content = QueryBuilders.termQuery("content", string);  
				TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", string);
				TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", string);
				TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", string);
				TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", string);  
				ands.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
				if("1".equals(matchingType)){
					mustQuery2.should(ands);
				}else{
					mustQuery2.must(ands);
				}
			}
		}
		//高级搜索not
		if(notKey!=null && !"".equals(notKey)){
			String[] notKeylist = notKey.split(" ");
			for (String string : notKeylist) {
				// 组合 模糊查询  should  
				BoolQueryBuilder nots = QueryBuilders.boolQuery(); 
				TermQueryBuilder subject = QueryBuilders.termQuery("subject", string); 
				TermQueryBuilder content = QueryBuilders.termQuery("content", string);  
				TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", string);
				TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", string);
				TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", string);
				TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", string);  
				nots.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
				if("2".equals(matchingType)){
					mustQuery2.mustNot(nots);
				}
			}
		}
		//高级搜索邮箱地址
		if(emailstr!=null && !"".equals(emailstr)){
			String[] emailstrKeylist = emailstr.split(" ");
			// 组合 模糊查询  should  
			BoolQueryBuilder emailstrs = QueryBuilders.boolQuery();
			for (String string : emailstrKeylist) {
				WildcardQueryBuilder fromWho = QueryBuilders.wildcardQuery("fromWho", "*"+string+"*");  
				WildcardQueryBuilder toWho = QueryBuilders.wildcardQuery("toWho", "*"+string+"*");  
				if("收发".equals(emailType)){
					emailstrs.should(fromWho).should(toWho);
				}else if("发".equals(emailType)){
					emailstrs.should(fromWho);
				}else if("收".equals(emailType)){
					emailstrs.should(toWho);
				}
			}
			if("1".equals(matchingType)){
				mustQuery2.should(emailstrs);
			}else{
				mustQuery2.must(emailstrs);
			}
		}
		//高级搜索 日期
		if("之间".equals(timeType) && kaishiTime!=null && !"".equals(kaishiTime) && jieshuTime!=null && !"".equals(jieshuTime)){
			RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").from(kaishiTime + " 00:00:00")
					.to(jieshuTime + " 23:59:59");
			if("1".equals(matchingType)){
				mustQuery2.should(rangequerybuilder);
			}else{
				mustQuery2.must(rangequerybuilder);
			}
		}else if("之外".equals(timeType) && kaishiTime!=null && !"".equals(kaishiTime) && jieshuTime!=null && !"".equals(jieshuTime)){
			// 组合 模糊查询  should  
			BoolQueryBuilder ors = QueryBuilders.boolQuery(); 
			RangeQueryBuilder subject = QueryBuilders.rangeQuery("date").lt(kaishiTime + " 00:00:00");
			RangeQueryBuilder content = QueryBuilders.rangeQuery("date").gt(jieshuTime + " 23:59:59");   
			ors.should(subject).should(content);
			if("1".equals(matchingType)){
				mustQuery2.should(ors);
			}else{
				mustQuery2.must(ors);
			}
		}else if("之前".equals(timeType) && kaishiTime!=null && !"".equals(kaishiTime)){
			RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").lt(kaishiTime + " 00:00:00");
			if("1".equals(matchingType)){
				mustQuery2.should(rangequerybuilder);
			}else{
				mustQuery2.must(rangequerybuilder);
			}
		}else if("之后".equals(timeType) && jieshuTime!=null && !"".equals(jieshuTime)){
			RangeQueryBuilder rangequerybuilder2 = QueryBuilders.rangeQuery("date").gt(jieshuTime + " 23:59:59");
			if("1".equals(matchingType)){
				mustQuery2.should(rangequerybuilder2);
			}else{
				mustQuery2.must(rangequerybuilder2);
			}
		}

		// caseid集合
		if (!"".equals(caseidStr)) {
			mustQuery2.must(QueryBuilders.termsQuery("caseID", caseids));
		}
		// 附件
		if (!"".equals(fuj)) {
			mustQuery2.must(QueryBuilders.matchPhraseQuery("attachmentname", sortType));
		}
		// 未读
		mustQuery2.must(QueryBuilders.matchPhraseQuery("readFlag", "0"));
		// 星标状态
		if (!"".equals(star)) {
			mustQuery2.must(QueryBuilders.matchPhraseQuery("starFlag", star));
		}
		// 关键词搜索
		if (emailKeyword != null && !"".equals(emailKeyword)) {
			emailKeyword=emailKeyword.toLowerCase();
			// 组合 模糊查询  should  
			BoolQueryBuilder ors = QueryBuilders.boolQuery(); 
			TermQueryBuilder subject = QueryBuilders.termQuery("subject", emailKeyword); 
			TermQueryBuilder content = QueryBuilders.termQuery("content", emailKeyword);  
			TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", emailKeyword);
			TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", emailKeyword);
			TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", emailKeyword);
			TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", emailKeyword);  
			ors.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
			mustQuery2.must(ors);
			actionLog((String) session.getAttribute("userName"), "搜索关键词："+emailKeyword, "邮件挖掘 ");
		}
		// 日期范围
		if (startDate != null && !"".equals(startDate)) {
			RangeQueryBuilder rangequerybuilder2 = QueryBuilders.rangeQuery("date").from(startDate + " 00:00:00")
					.to(endDate + " 23:59:59");
			mustQuery2.must(rangequerybuilder2);
		}
		SearchRequestBuilder searchRequestBuilder2 = EsClient.getClient().prepareSearch("es").setTypes("email")
				.setQuery(mustQuery2).setFrom(0)// 分页起始位置（跳过开始的n个）
				.setSize(1);// 本次返回的文档数量
		// 排序 执行
		SearchResponse searchResponse2 = searchRequestBuilder2.addSort(sortConditon, SortOrder.ASC)// 排序.addSort(SortBuilders.fieldSort(sortConditon))//按类型排序
				.execute().actionGet();// 执行搜索
		long read0 = searchResponse2.getHits().getTotalHits();
		if ("1".equals(read)) {
			read0 = 0;
		}
		Map<String, Object> map = new HashMap<String, Object>();
		getDomainEmail = emailDTOList;
		map.put("emailDTOList", emailDTOList);
		map.put("count", totalHits);
		map.put("read0", read0);
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.map2json(map));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}

	/**
	 * 邮件工作台-更改邮件状态和星标
	 */
	@RequestMapping(value = "/emaiExcavatel/upEmailStatus.php")
	public void upEmailStatus(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String read = request.getParameter("read");
		String star = request.getParameter("star");
		String esId = request.getParameter("esId");
		String key = "";
		String value = "";
		if (!"".equals(read)) {
			key = "readFlag";
			value = read;
		}
		if (!"".equals(star)) {
			key = "starFlag";
			value = star;
		}
		EsClient.update("es", "email", esId, key, value);
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(value + "");
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}

	/**
	 * 邮件挖掘-邮箱关系图
	 * 
	 * @author suny
	 * @time 2017-8-25
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws InterruptedException
	 */
	@RequestMapping(value = "/emaiExcavatel/contactsAnalyze.php")
	public void contactsAnalyze(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String caseidStr = request.getParameter("caseidStr");// 案件id
		String suspectsNameStr = request.getParameter("suspectsName");// 嫌疑人姓名
		String startDate = request.getParameter("startDate");// 开始时间
		String endDate = request.getParameter("endDate");// 结束时间
		List<EmailNodeDTO> emailNodeDTOList = new ArrayList<EmailNodeDTO>();
		if (caseidStr == null || "".equals(caseidStr)) {
			caseidStr="-1";
		}
		String[] caseids = caseidStr.split(" ");
		int caseidi = 0;
		int caseidiflag = 0;
		for (String caseid : caseids) {
			caseidiflag = 0;
			Caseinfo caseinfo = new Caseinfo();
			caseinfo.setId(Integer.parseInt(caseid));
			List<Caseinfo> listfromMysql = sqlDao.getListfromMysql(caseinfo);
			String caseName = listfromMysql.get(0).getCaseName();
			// 精确搜索
			BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
			mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件
			// 此处为匹配所有文档
			// caseid
			mustQuery.must(QueryBuilders.matchPhraseQuery("caseID", caseid));

			// 日期范围
			if (startDate != null && !"".equals(startDate)) {
				RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").from(startDate + " 00:00:00")
						.to(endDate + " 23:59:59");
				mustQuery.must(rangequerybuilder);
			}
			SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email");
			// 关键词搜索
			if (suspectsNameStr != null && !"".equals(suspectsNameStr)) {
				QueryBuilder queryBuilder = QueryBuilders.queryStringQuery(suspectsNameStr)
						.defaultOperator(QueryStringQueryBuilder.Operator.AND);// 不同关键词之间使用and关系
				mustQuery.must(queryBuilder);// 添加第4条must的条件 关键词全文搜索筛选条件
				actionLog((String) session.getAttribute("userName"), "搜索关键词："+suspectsNameStr, "邮件挖掘 ");
			}
			searchRequestBuilder.setQuery(mustQuery).setFrom(0)// 分页起始位置（跳过开始的n个）
			.setSize(10000);// 本次返回的文档数量
			// 排序 执行
			SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();// 执行搜索
			//searchResponse = searchRequestBuilder.execute().actionGet();
			//do {
				//searchResponse = EsClient.getClient().prepareSearchScroll(searchResponse.getScrollId()).execute().actionGet();
			//} while(searchResponse.getHits().getHits().length != 0);
		
			ArrayList<SearchHit[]> arrayList = new ArrayList<SearchHit[]>();
			SearchHit[] hits1 = searchResponse.getHits().getHits();
			arrayList.add(hits1);
			long totalHits = searchResponse.getHits().getTotalHits()/10000;
			for(int i=1;i<=totalHits;i++){
				searchResponse = searchRequestBuilder.setQuery(mustQuery).setFrom(i*10000)// 分页起始位置（跳过开始的n个）
						.setSize(10000).execute().actionGet();
				SearchHit[] hits  = searchResponse.getHits().getHits();
				arrayList.add(hits);
			}
			// List<EmailDTO> emailDTOList = new ArrayList<EmailDTO>();
			for (SearchHit[] searchHit2 : arrayList) {
				for (SearchHit searchHit : searchHit2) {
					caseidiflag = 1;
					String esID = (String) searchHit.getId();
					Map<String, Object> source = searchHit.getSource();
					String fromWho = (String) source.get("fromWho");
					String toWho = (String) source.get("toWho");
					// 发件人邮箱添加到node
					EmailNodeDTO emailNodeDTO = new EmailNodeDTO();
					emailNodeDTO.setName(fromWho.replace("&lt;", "<").replace("&gt", ">"));
					emailNodeDTO.setToWho(toWho.replace("&lt;", "<").replace("&gt", ">"));
					emailNodeDTO.setCategory(caseidi);
					emailNodeDTO.setCaseName(caseName);
					if (emailNodeDTOList.size() > 0) {
						int flag = 0;
						int i = 0;
						for (EmailNodeDTO emailNodeDTO2 : emailNodeDTOList) {
							if ((fromWho.replace("&lt;", "<").replace("&gt", ">")).equals(emailNodeDTO2.getName())) {
								flag = 1;
								emailNodeDTOList.get(i).setValue(emailNodeDTOList.get(i).getValue() + 1);
								emailNodeDTOList.get(i).setSymbolSize(emailNodeDTOList.get(i).getSymbolSize() + 1);
								if (!toWho.equals(emailNodeDTO2.getToWho())) {
									emailNodeDTOList.get(i).setToWho(emailNodeDTOList.get(i).getToWho() + "/" + toWho);
								}
							}
							i++;
						}
						if (flag == 0) {
							emailNodeDTO.setId(i);
							emailNodeDTO.setValue(1);
							emailNodeDTO.setSymbolSize(1);
							emailNodeDTOList.add(emailNodeDTO);
						}
					} else {
						emailNodeDTO.setId(0);
						emailNodeDTO.setValue(1);
						emailNodeDTO.setSymbolSize(1);
						emailNodeDTOList.add(emailNodeDTO);
					}
				}
				for (SearchHit searchHit : searchHit2) {
					// 收件人邮箱添加到node
					String esID = (String) searchHit.getId();
					Map<String, Object> source = searchHit.getSource();
					String fromWho = (String) source.get("fromWho");
					String toWho = (String) source.get("toWho");
					String[] toWhos = toWho.split(";;");
					for (String toWho2 : toWhos) {
						EmailNodeDTO emailNodeDTO3 = new EmailNodeDTO();
						emailNodeDTO3.setName(toWho2.replace("&lt;", "<").replace("&gt", ">"));
						emailNodeDTO3.setToWho(fromWho.replace("&lt;", "<").replace("&gt", ">"));
						emailNodeDTO3.setCategory(caseidi);
						emailNodeDTO3.setCaseName(caseName);
						if (emailNodeDTOList.size() > 0) {
							int flag = 0;
							int i = 0;
							for (EmailNodeDTO emailNodeDTO4 : emailNodeDTOList) {
								if ((toWho2.replace("&lt;", "<").replace("&gt", ">")).equals(emailNodeDTO4.getName())) {
									flag = 1;
									emailNodeDTOList.get(i).setValue(emailNodeDTOList.get(i).getValue() + 1);
									emailNodeDTOList.get(i).setSymbolSize(emailNodeDTOList.get(i).getSymbolSize() + 1);
								}
								i++;
							}
							if (flag == 0) {
								emailNodeDTO3.setId(i);
								emailNodeDTO3.setValue(1);
								emailNodeDTO3.setSymbolSize(1);
								emailNodeDTOList.add(emailNodeDTO3);
							}
						} else {
							emailNodeDTO3.setId(0);
							emailNodeDTO3.setValue(1);
							emailNodeDTO3.setSymbolSize(1);
							emailNodeDTOList.add(emailNodeDTO3);
						}
					}
				} // 遍历hits结束
				if (caseidiflag == 1) {
					caseidi++;
				}
			}
			

		}
		// Map<String, Object> map = new HashMap<String, Object>();
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.list2json(emailNodeDTOList));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}

	/**
	 * 邮件挖掘-嫌疑人关系图
	 * 
	 * @author suny
	 * @time 2017-8-28
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws InterruptedException
	 */
	@RequestMapping(value = "/emaiExcavatel/contactsAnalyze2.php")
	public void contactsAnalyze2(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String caseidStr = request.getParameter("caseidStr");// 案件id
		//String suspectsNameStr = request.getParameter("suspectsName");// 嫌疑人姓名
		//String startDate = request.getParameter("startDate");// 开始时间
		//String endDate = request.getParameter("endDate");// 结束时间
		String connectNum = request.getParameter("connectNum");//联系次数最小值
		//获取勾选的邮箱地址
		System.out.println("联系次数"+connectNum);
		if("".equals(connectNum)||connectNum==null){
			connectNum="1";
		}//第一次展示所有次数关系图
		/**
		 * ============前端选择的案件 ID 集合 ===============
		 */
		if (caseidStr == null || "".equals(caseidStr)) {
			caseidStr="-1";
		}
		String[] caseidStrs = caseidStr.split(" ");
		// 时间===================================="+new Date());
		/**
		 * ============嫌疑人list===============
		 */
		List<SuspectInfo> suspectsEmailList = new ArrayList<SuspectInfo>();
		/**
		 * ============所选案件下的所有嫌疑人 ===============
		 */
		for (String caseid : caseidStrs) {
			Caseinfo caseinfo = new Caseinfo();
			caseinfo.setId(Integer.parseInt(caseid));
			List<Caseinfo> listfromMysql = sqlDao.getListfromMysql(caseinfo);
			Caseinfo caseinfo2 = listfromMysql.get(0);
			String mainParty = caseinfo2.getMainParty();
			String[] split = mainParty.split(",");
			
			// 遍历嫌疑人
			for (String string : split) {
				if(!"".equals(string)){
					SuspectInfo suspectInfo = new SuspectInfo();
					suspectInfo.setId(Integer.parseInt(string));
					List<SuspectInfo> suspectsEmail = sqlDao.getListfromMysqlLike(suspectInfo);
					if (suspectsEmail.size() > 0) {
						suspectInfo = suspectsEmail.get(0);
					}
					int susFlag = 0;
					for (SuspectInfo suspectInfo2 : suspectsEmailList) {
						if (suspectInfo.getId() == suspectInfo2.getId()) {
							susFlag = 1;
						}
					}
					if (susFlag == 0) {
						suspectsEmailList.add(suspectInfo);
					}
				}
				
			}
		}
		
		/**
		 * ============创建node集合 和link集合 ===============
		 */
		List<EmailNodeDTO2> nodes = new ArrayList<EmailNodeDTO2>();
		List<EmailNode2LinkDTO> links = new ArrayList<EmailNode2LinkDTO>();
		/**
		 * ============查询===============
		 */
		List<Email_WorkDTO> arrayList = new ArrayList<Email_WorkDTO>();
		String caseid1=caseidStrs[0];//获取单个案件的id
		int caseidInt = Integer.valueOf(caseid1);
		System.out.println("caseid====="+caseid1);
		String tableName = "";
		if(caseidInt%9==0){
			tableName="from_to_count_0";
		} else if(caseidInt%9==1){
			tableName="from_to_count_1";
		} else if(caseidInt%9==2){
			tableName="from_to_count_2";
		} else if(caseidInt%9==3){
			tableName="from_to_count_3";
		} else if(caseidInt%9==4){
			tableName="from_to_count_4";
		} else if(caseidInt%9==5){
			tableName="from_to_count_5";
		} else if(caseidInt%9==6){
			tableName="from_to_count_6";
		} else if(caseidInt%9==7){
			tableName="from_to_count_7";
		} else if(caseidInt%9==8){
			tableName="from_to_count_8";
		}

		try {
			 arrayList = emailDao.getXYRFromToCount(caseid1,tableName,connectNum);
		} catch (SQLException e1) {
			e1.printStackTrace();
		}

			for (SuspectInfo suspectInfo : suspectsEmailList) {
				String suspectName = suspectInfo.getSuspectName();
				String suspectMail = suspectInfo.getSuspectMail();
					for (Email_WorkDTO email_WorkDTO : arrayList) {
						String fromWho = email_WorkDTO.getFormWho();// 发件人
						String toWho = email_WorkDTO.getToWho();
						int emailNum = email_WorkDTO.getEmailNum();
						String[] toWhos = toWho.split(";");
						if(suspectMail!=null && !"".equals(suspectMail)){
							if (fromWho.indexOf(suspectMail) != -1 || toWho.indexOf(suspectMail) != -1) {// //System.out.println("包含");
								// 发件人添加到nodescaseidi
								EmailNodeDTO2 node1 = new EmailNodeDTO2();
								if (fromWho.indexOf(suspectMail) != -1) {
									node1.setName(suspectName);
									node1.setIsSuspect(1);
								} else {
									node1.setName(fromWho);
									node1.setIsSuspect(0);
								}
								int flag1 = 0;
								for (EmailNodeDTO2 node : nodes) {
									if (node1.getName().equals(node.getName())) {
										flag1 = 1;
									}
								}
								if (flag1 == 0) {
									nodes.add(node1);
								}
								// 收件人添加到nodes
								for (String toWho2 : toWhos) {
									EmailNodeDTO2 node2 = new EmailNodeDTO2();
									if (toWho2.indexOf(suspectMail) != -1) {
										node2.setName(suspectName);
										node2.setIsSuspect(1);
									} else {
										node2.setName(toWho2);
										node2.setIsSuspect(0);
									}
									int flag2 = 0;
									for (EmailNodeDTO2 node : nodes) {
										if (node2.getName().equals(node.getName())) {
											flag2 = 1;
										}
									}
									if (flag2 == 0) {
										nodes.add(node2);
									}
									// 连线
									EmailNode2LinkDTO link = new EmailNode2LinkDTO();
									link.setFromWho(node1.getName());
									link.setToWho(node2.getName());
									link.setEsID("1");
									link.setValue(emailNum);
									links.add(link);
								}
							}
		
						}

			} // hits
		} // emails

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("nodes", nodes);// nodes"+nodes.size()+"=links="+links.size()+"==linksise="+linksise+"==
		map.put("links", links);
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.map2json(map));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}

	// 收发件分析 导出功能
	@RequestMapping("/ExportMail.php")
	public void ExportMail(HttpServletRequest request, Map<String, Object> map, HttpSession session,
			HttpServletResponse response) throws SecurityException, IllegalArgumentException, NoSuchMethodException,
	IllegalAccessException, InvocationTargetException {
		String filename = "data";
		String projectpath = request.getSession().getServletContext().getRealPath("");
		try {
			HSSFWorkbook wb = null;
			POIFSFileSystem fs = null;
			String path = projectpath + filename + ".xls";
			File file = new File(path);
			createMail(path);
			fs = new POIFSFileSystem(new FileInputStream(path));
			wb = new HSSFWorkbook(fs);
			for (EmailDTO testData : getDomainEmail) {
			}
			for (int i = 0; i < getDomainEmail.size(); i++) {
				writeMail(getDomainEmail.get(i), wb, path);
			}

			String fileName = null;// 下载文件名
			InputStream ins = null;
			OutputStream ous = null;
			try {
				if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") > 0) {
					fileName = new String(file.getName().getBytes(request.getCharacterEncoding()), "ISO8859-1");
				} else {
					fileName = URLEncoder.encode(file.getName(), "UTF-8");
				}
				response.addHeader("content-disposition", "attachment; filename=" + fileName);
				ins = new FileInputStream(file);
				ous = response.getOutputStream();
				int len = 0;
				byte[] buf = new byte[1024];
				while ((len = ins.read(buf)) != -1) {
					ous.write(buf, 0, len);
				}
				/* ous.flush(); */
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (ins != null) {
					try {
						ins.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if (ous != null) {
					try {
						ous.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
			// //System.out.println(JSON.toJSONString(bean));
		} catch (Exception e) {
			// System.out.println(e);
		}
	}

	public void createMail(String path) throws Exception {
		// 创建Excel的工作书册 Workbook,对应到一个excel文档
		HSSFWorkbook wb = new HSSFWorkbook();

		// 创建Excel的工作sheet,对应到一个excel文档的tab
		HSSFSheet sheet = wb.createSheet("sheet2");

		// 创建Excel的sheet的一行
		HSSFRow row = sheet.createRow(0);

		// 创建一个Excel的单元格
		HSSFCell cell = row.createCell(0);

		// 给Excel的单元格设置样式和赋值
		cell.setCellValue("邮件主题");
		cell = row.createCell(1);
		cell.setCellValue("发件人");
		cell = row.createCell(2);
		cell.setCellValue("收件人");
		cell = row.createCell(3);
		cell.setCellValue("发送日期");
		cell = row.createCell(4);

		FileOutputStream os = new FileOutputStream(path);
		// FileOutputStream os = new FileOutputStream("c:\\spider\\tex.xls");
		wb.write(os);
		os.close();
	}

	public static void writeMail(EmailDTO bean, HSSFWorkbook wb, String path) throws Exception {
		HSSFSheet sheet = wb.getSheetAt(0);
		int begin = sheet.getFirstRowNum();
		int end = sheet.getLastRowNum();
		int m = 0;
		for (int n = begin; n <= end; n++) {
			// //System.out.println(sheet.getRow(i).getCell(0).toString());
			try {
				// String cell2 = sheet.getRow(n).getCell(0).toString();
				m++;
			} catch (Exception e) {
				break;
			}
		}

		HSSFRow row1 = sheet.createRow(m);

		// HSSFHyperlink link1 = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
		HSSFCell cell = row1.createCell(0);
		cell.setCellValue(bean.getSubject());
		cell = row1.createCell(1);
		cell.setCellValue(bean.getFromWho());
		cell = row1.createCell(2);
		cell.setCellValue(bean.getToWho());
		cell = row1.createCell(3);
		cell.setCellValue(bean.getDate());
		cell = row1.createCell(4);

		FileOutputStream os = new FileOutputStream(path);
		// FileOutputStream os = new FileOutputStream("c:\\spider\\tex.xls");
		wb.write(os);
		os.close();
	}

	/**
	 * 数据管理-邮件工作台-快速标记查询
	 */
	@RequestMapping(value = "/emaiExcavatel/quickFlags.php")
	public void quickFlags(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		response.setContentType("textml; charset=UTF-8");
		String sortType = request.getParameter("sortType");
		String regexpQuery = request.getParameter("regexpQuery");
		String emailKeyword = request.getParameter("emailKeyword");
		String caseidStr = request.getParameter("caseidStr");
		String pageIndexstr = request.getParameter("pageIndex");
		String startDate = request.getParameter("startDate");// 开始时间
		String endDate = request.getParameter("endDate");// 结束时间
		int pageIndex = 1;
		int pageSize = 10;
		if (pageIndexstr != null && !"".equals(pageIndexstr)) {
			pageIndex = Integer.parseInt(pageIndexstr);
		}
		// 默认最新数据的案件
		if (caseidStr == null || "".equals(caseidStr)) {
			caseidStr="-1";
		}
		String riqi = "";
		String read = "";
		String star = "";
		String fuj = "";
		String[] caseids = { "" };
		if (!"".equals(caseidStr)) {
			caseids = caseidStr.split(" ");
		}
		String sortConditon = "";
		if ("未读".equals(sortType)) {
			read = "0";
			sortConditon = "date";
		} else if ("已读".equals(sortType)) {
			read = "1";
			sortConditon = "date";
		} else if ("星标".equals(sortType)) {
			star = "1";
			sortConditon = "date";
		} else if ("日期".equals(sortType)) {
			sortConditon = "date";
		} else if ("收件人".equals(sortType)) {
			sortConditon = "toWho";
		} else if ("发件人".equals(sortType)) {
			sortConditon = "fromWho";
		} else if ("IP".equals(sortType)) {
			sortConditon = "ip";
		} else if ("附件".equals(sortType)) {
			fuj = "123";
			sortConditon = "date";
		}
		String quickflag = "";
		if ("手机号".equals(regexpQuery)) {
			quickflag = Global.regPhone;
		} else if ("固定电话".equals(regexpQuery)) {
			quickflag = Global.regTel;
		} else if ("身份证号".equals(regexpQuery)) {
			quickflag = Global.regSFZ;
		} else if ("邮箱号".equals(regexpQuery)) {
			quickflag = Global.regEmail;
		} else if ("银行卡号".equals(regexpQuery)) {
			quickflag = Global.regCard;
		} else if ("车牌号".equals(regexpQuery)) {
			quickflag = Global.regLicense;
		} else if ("运输车号".equals(regexpQuery)) {
			quickflag = Global.regModel;
		} else if ("集装箱号".equals(regexpQuery)) {
			quickflag = Global.regContainer;
		} else if ("支付宝号".equals(regexpQuery)) {
			quickflag = Global.regUP;
		} else if ("价格".equals(regexpQuery)) {
			quickflag = Global.regPrice;
		} else if ("发票代码".equals(regexpQuery)) {
			quickflag = Global.regStamp;
		} else if ("信用证".equals(regexpQuery)) {
			quickflag = Global.regLC;
		} else if ("电汇".equals(regexpQuery)) {
			quickflag = Global.regTT;
		} else if ("QQ号".equals(regexpQuery)) {
			quickflag = Global.QQnumber;
		} else if ("推特号".equals(regexpQuery)) {
			quickflag = Global.twitter;
		} else if ("微信".equals(regexpQuery)) {
			quickflag = Global.weChat;
		} else if ("护照编号".equals(regexpQuery)) {
			quickflag = Global.passport;
		}
		// System.out.println("es查询开始========>>"+new Date());;
		// 精确搜索
		BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
		// caseid集合
		if (!"".equals(caseidStr)) {
			mustQuery.must(QueryBuilders.termsQuery("caseID", caseids));
		}
		// 已读未读状态
		if (!"".equals(read)) {
			mustQuery.must(QueryBuilders.matchPhraseQuery("readFlag", read));
		}
		// 星标状态
		if (!"".equals(star)) {
			mustQuery.must(QueryBuilders.matchPhraseQuery("starFlag", star));
		}
		// 附件
		if (!"".equals(fuj)) {
			mustQuery.mustNot(QueryBuilders.matchPhraseQuery("attachmentname", ""));
		}
		// 关键词搜索
		if (emailKeyword != null && !"".equals(emailKeyword)) {
			// 组合 模糊查询  should  
			BoolQueryBuilder ors = QueryBuilders.boolQuery(); 
			TermQueryBuilder subject = QueryBuilders.termQuery("subject", emailKeyword); 
			TermQueryBuilder content = QueryBuilders.termQuery("content", emailKeyword);  
			TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", emailKeyword);
			TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", emailKeyword);
			TermQueryBuilder attachmentname = QueryBuilders.termQuery("attachmentname", emailKeyword);
			TermQueryBuilder attachmentContent = QueryBuilders.termQuery("attachmentContent", emailKeyword);  
			ors.should(subject).should(content).should(fromWho).should(toWho).should(attachmentname).should(attachmentContent);
			mustQuery.must(ors);
		}
		// 日期范围
		if (startDate != null && !"".equals(startDate)) {
			RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").from(startDate + " 00:00:00")
					.to(endDate + " 23:59:59");
			// System.out.println("时间分割");
			mustQuery.must(rangequerybuilder);
		}

		SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email")
				.setQuery(mustQuery)
				// 模糊查询
				.setFrom(0)// 分页起始位置（跳过开始的n个）
				.setSize(10000);// 本次返回的文档数量

		// 排序 执行
		SearchResponse searchResponse = null;
		if ("date".equals(sortConditon)) {
			searchResponse = searchRequestBuilder.addSort(SortBuilders.fieldSort(sortConditon).order(SortOrder.DESC))// 按类型排序
					.execute().actionGet();// 执行搜索
		} else {
			searchResponse = searchRequestBuilder.addSort(SortBuilders.fieldSort(sortConditon).order(SortOrder.ASC))// 按类型排序
					.execute().actionGet();// 执行搜索
		}

		ArrayList<SearchHit[]> arrayList = new ArrayList<SearchHit[]>();
		SearchHit[] hits1 = searchResponse.getHits().getHits();
		arrayList.add(hits1);
		long totalHits = searchResponse.getHits().getTotalHits()/10000;
		for(int i=1;i<=totalHits;i++){
			searchResponse = searchRequestBuilder.setQuery(mustQuery).setFrom(i*10000)// 分页起始位置（跳过开始的n个）
					.setSize(10000).execute().actionGet();
			SearchHit[] hits  = searchResponse.getHits().getHits();
			arrayList.add(hits);
		}
			
				

		int read0 = 0;
		if ("1".equals(read)) {
			read0 = 0;
		}
		List<EmailDTO> emailDTOList = new ArrayList<EmailDTO>();

		long fori = 0;// 计数
		for (SearchHit[] searchHit2 : arrayList) {
		  for (SearchHit searchHit : searchHit2) {
			String esID = (String) searchHit.getId();
			Map<String, Object> source = searchHit.getSource();
			String subject = (String) source.get("subject");
			String fromWho = (String) source.get("fromWho");
			String toWho = (String) source.get("toWho");
			String downloadUrl = (String) source.get("file_download_url");
			String date = (String) source.get("date");
			String attachmentname = (String) source.get("attachmentname");// LW:附件名
			String content = (String) source.get("content");
			String readFlag = (String) source.get("readFlag");
			String starFlag = (String) source.get("starFlag");
			String ip = (String) source.get("ip");
			
			String caseID = (String) source.get("caseID");
			String caseName = (String) source.get("caseName");

			int quickflagflag = 0;
			EmailDTO emailDTO = new EmailDTO();
			emailDTO.setEsID(esID);
			emailDTO.setRead(Integer.parseInt(readFlag));
			emailDTO.setStar(Integer.parseInt(starFlag));
			emailDTO.setIp(ip);
			int zhenzeflag=0;
			Pattern pattern = Pattern.compile(quickflag);
			// 创建匹配给定输入与此模式的匹配器。
			Matcher matcher = pattern.matcher(content);
			// 查找字符串中是否有符合的子字符串
			while (matcher.find()) {
				zhenzeflag=0;
				quickflagflag = 1;
				// 查找到符合的即输出
				String group = matcher.group();
				if("身份证号".equals(regexpQuery)){
					String s = group;// 初次获取得到身份证号
					List<String> list = new ArrayList<String>();
					List<String> list2 = new ArrayList<String>();
					list2.add("7");
					list2.add("9");
					list2.add("10");
					list2.add("5");
					list2.add("8");
					list2.add("4");
					list2.add("2");
					list2.add("1");
					list2.add("6");
					list2.add("3");
					list2.add("7");
					list2.add("9");
					list2.add("10");
					list2.add("5");
					list2.add("8");
					list2.add("4");
					list2.add("2");
					for (int i = 0; i < s.length(); i++) {
						String substring = s.substring(i, i + 1);
						list.add(substring);
					}
					String lastbit=list.get(list.size() - 1);
					if("1".equals(lastbit)){
						lastbit="0";
					}else if ("0".equals(lastbit)) {
						lastbit="1";
					}else if ("0".equals(lastbit)) {
						lastbit="1";
					}else if ("X".equals(lastbit)||"x".equals(lastbit)) {
						lastbit="2";
					}else if ("9".equals(lastbit)) {
						lastbit="3";
					}else if ("8".equals(lastbit)) {
						lastbit="4";
					}else if ("7".equals(lastbit)) {
						lastbit="5";
					}else if ("6".equals(lastbit)) {
						lastbit="6";
					}else if ("5".equals(lastbit)) {
						lastbit="7";
					}else if ("4".equals(lastbit)) {
						lastbit="8";
					}else if ("3".equals(lastbit)) {
						lastbit="9";
					}else if ("2".equals(lastbit)) {
						lastbit="10";
					}
					double c = 0;
					double num = 0 ;
					for (int i = 0; i < list2.size(); i++) {
						int a = (Integer.parseInt(list.get(i)));
						int b = (Integer.parseInt(list2.get(i)));
						double num2 = a * b;
						num+=num2;
						 c = (num) % 11;
					}
					double x = Integer.parseInt(lastbit);
					if (c != x) {
						//System.out.println(s);
						zhenzeflag=1;
					}
					
				}
				if("集装箱号".equals(regexpQuery)){
					 String s =group;// 初次获取得到集装箱号
					 List<String> list = new ArrayList<String>();
					 for (int i = 0; i < s.length(); i++) {
					 String substring = s.substring(i, i + 1);
					 String replace = substring.replace("A", "10").replace("B",
					 "12").replace("C", "13").replace("D", "14")
					 .replace("E", "15").replace("F", "16").replace("G",
					 "17").replace("H", "18").replace("I", "19")
					 .replace("J", "20").replace("K", "21").replace("L",
					 "23").replace("M", "24").replace("N", "25")
					 .replace("O", "26").replace("P", "27").replace("Q",
					 "28").replace("R", "29").replace("S", "30")
					 .replace("T", "31").replace("U", "32").replace("V",
					 "34").replace("W", "35").replace("X", "36")
					 .replace("Y", "37").replace("Z", "38");
					 list.add(replace);
					 //System.out.println("aaaaa" + list.get(i));
					 }
					 double c = 0;
					 double num = 0;
					 for (int i = 0; i < list.size()-1; i++) {
					 double d = Math.pow(2, i);
					 //System.out.println("n" + i + "次方" + d);
					 int a = (Integer.parseInt(list.get(i)));
					 double num2 = a * d;
					 num+=num2;
					 c = (num) % 11;
					 }
					 //System.out.println(num);
					 double x = Integer.parseInt(list.get(list.size() - 1));
					 if (c != x) {
							//System.out.println(s);
							zhenzeflag=1;
						}
				}
				if("银行卡号".equals(regexpQuery)){
					String sfz = group;
					char res = getBankCardCheckCode(sfz.substring(0, sfz.length()-1));//得到的校验码
					String charJX = sfz.substring(sfz.length() - 1);// 银行卡号最后一位
			        if(!charJX.equals(String.valueOf(res))){//如果校验码不等于卡号最后一位，说明银行卡号是错的
			        	zhenzeflag=1;
			        }
			        
				}
				content = content.replace(group,
						"<font style='color: red;background-color: yellow;'>" + group + "</font>");
				if(subject.contains(group)){
					subject = subject.replace(group,
							"<font style='color: red;background-color: yellow;'>" + group + "</font>");
				}
				if(toWho.contains(group)){
					toWho = toWho.replace(group,
							"<font style='color: red;background-color: yellow;'>" + group + "</font>");
				}
				if(fromWho.contains(group)){
					fromWho = fromWho.replace(group,
							"<font style='color: red;background-color: yellow;'>" + group + "</font>");
				}
				if(attachmentname.contains(group)){
					attachmentname = attachmentname.replace(group,
							"<font style='color: red;background-color: yellow;'>" + group + "</font>");
				}
			
			}
			emailDTO.setContent(content);
			emailDTO.setDate(date);
			emailDTO.setDownloadUrl(downloadUrl);
			
			emailDTO.setCaseID(caseID);
			emailDTO.setCaseName(caseName);
			emailDTO.setAttachmentname(attachmentname);
			emailDTO.setSubject(subject);
			emailDTO.setFromWho(fromWho);
			emailDTO.setToWho(toWho);
			
			if (quickflagflag == 1) {
				if(zhenzeflag!=1){
					if (fori >= ((pageIndex - 1) * 10) && fori < (pageIndex * 10)) {// 页数
						emailDTOList.add(emailDTO);
					}
					if ("0".equals(readFlag)) {
						read0 += 1;
					}
					fori += 1;
				}
			}
		}
		}
		/*
		 * 查询未读数目
		 */

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("emailDTOList", emailDTOList);
		map.put("count", fori);
		map.put("read0", read0);
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.map2json(map));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}

	}

	/**
	 * 获取原格式邮件详情
	 * 
	 * @param request
	 * @param response
	 * @param session
	 */
	@RequestMapping(value = "/getCorrectEml.php")
	public void getCorrectEml(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		String emlPath = request.getParameter("emlpath");
		JSONObject resResult = new JSONObject();
		String attachmentname = request.getParameter("attachmentname");
		String keyword = request.getParameter("keyword");// 关键词
		String orkey = request.getParameter("orkey");
		String andkey = request.getParameter("andkey");
		File tempFilePath = new File("/temp/");

		String regexpQuery = request.getParameter("zhengzeType");
		String quickflag = "";
		if ("手机号".equals(regexpQuery)) {
			quickflag = Global.regPhone;
		} else if ("固定电话".equals(regexpQuery)) {
			quickflag = Global.regTel;
		} else if ("身份证号".equals(regexpQuery)) {
			quickflag = Global.regSFZ;
		} else if ("邮箱号".equals(regexpQuery)) {
			quickflag = Global.regEmail;
		} else if ("银行卡号".equals(regexpQuery)) {
			quickflag = Global.regCard;
		} else if ("车牌号".equals(regexpQuery)) {
			quickflag = Global.regLicense;
		} else if ("运输车号".equals(regexpQuery)) {
			quickflag = Global.regModel;
		} else if ("集装箱号".equals(regexpQuery)) {
			quickflag = Global.regContainer;
		} else if ("支付宝号".equals(regexpQuery)) {
			quickflag = Global.regUP;
		} else if ("价格".equals(regexpQuery)) {
			quickflag = Global.regPrice;
		} else if ("发票代码".equals(regexpQuery)) {
			quickflag = Global.regStamp;
		} else if ("信用证".equals(regexpQuery)) {
			quickflag = Global.regLC;
		} else if ("电汇".equals(regexpQuery)) {
			quickflag = Global.regTT;
		} else if ("QQ号".equals(regexpQuery)) {
			quickflag = Global.QQnumber;
		} else if ("推特号".equals(regexpQuery)) {
			quickflag = Global.twitter;
		} else if ("微信".equals(regexpQuery)) {
			quickflag = Global.weChat;
		} else if ("护照编号".equals(regexpQuery)) {
			quickflag = Global.passport;
		}
		if (!tempFilePath.exists()) {
			tempFilePath.mkdir();
		}
		try {
			String cmd = "hadoop fs -copyToLocal " + emlPath + " /temp/";
			Process process = Runtime.getRuntime().exec(cmd);
			process.waitFor();
		} catch (Exception e1) {
			// e1.printStackTrace();
			// System.out.println(e1.getMessage());
		}
		int inx = emlPath.lastIndexOf("/");
		String fname = emlPath.substring(inx + 1);
		File tempFile = new File("/temp/" + fname);
		String content = "";
		if(fname.endsWith(".eml")){
			try {
				if (tempFile.exists()) {
					ReceivedEmail email = EmailUtil.parseEML(tempFile);
					List<EmailMessage> messageList = email.getAllMessages();
					for (EmailMessage message : messageList) {
						content = message.getContent();
					}
					List<EmailAttachment> attachments = email.getAttachments();
					if (attachments != null) {
						String destPathStr = Global.tomcatPath + "/eml/";

						File destPath = new File(destPathStr);
						//// System.out.println(destPath.exists()+"destPath11111111111111111111"+destPathStr);
						if (!destPath.exists()) {
							destPath.mkdirs();
							//// System.out.println("destPath2222222222222222222222"+destPath.exists());
						}
						for (EmailAttachment attachment : attachments) {
							if (attachment.isInline()) {
								attachment.writeToFile(new File(destPathStr + attachment.getName()));
								String contentId = attachment.getContentId();
								//// System.out.println("contentId<<<<<<<<<<<<>>>>>>>>>>"+contentId);
								contentId = contentId.replace("<", "");
								contentId = contentId.replace(">", "");
								content = content.replace("src=\"cid:" + contentId + "\"",
										"src=\"/emlpic/" + attachment.getName() + "\"");
								//// System.out.println();
							}
						}
					}
				}
				//// System.out.println(content);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (MessagingException e) {
				e.printStackTrace();
			} catch (Exception e) {
				// System.out.println(e.getMessage());
			}
		}else{
			MsgParser msgp = new MsgParser();
			try {
				Message msg = msgp.parseMsg(tempFile);
				content = msg.getBodyText();

			} catch (UnsupportedOperationException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
		if (content == null) {
			resResult.put("content", "");
		} else {
			if (!StringUtils.isEmpty(keyword)) {
				content = content.replace(keyword,
						"<font style='color: red;background-color: yellow;'>" + keyword + "</font>");
				//// System.out.println(content);
			}
			if (!"".equals(quickflag)) {
				Pattern pattern = Pattern.compile(quickflag);
				Matcher matcher = pattern.matcher(content);
				while (matcher.find()) {
					String temp = matcher.group(1);
					content = content.replace(temp,
							"<font style='color: red;background-color: yellow;'>" + temp + "</font>");
				}
			}
			if (!StringUtils.isEmpty(orkey)) {
				String[] split = orkey.split(" ");
				for (String string : split) {
					content = content.replace(string,
							"<font style='color: red;background-color: yellow;'>" + string + "</font>");
				}
			}
			if (!StringUtils.isEmpty(andkey)) {
				String[] split = andkey.split(" ");
				for (String string : split) {
					content = content.replace(string,
							"<font style='color: red;background-color: yellow;'>" + string + "</font>");
				}
			}
			// content = content.replaceAll("\r\n", "<br/>");
			// content = content.replaceAll("\n", "<br/>");
			 if(!content.startsWith("<html")){
			 content = "<pre>"+content+"</pre>";
			 }
			resResult.put("content", content);
		}
		// content = content.replaceAll("\r\n", "<br/>");
		// content = content.replaceAll("\n", "<br/>");
		if (attachmentname == null)
			resResult.put("attfile", "null");
		else {
			if(fname.endsWith(".eml")){
				JSONArray ja = new JSONArray();
				JSONArray ja2 = new JSONArray();
				//			JSONArray ja3 = new JSONArray();
				String[] attfileArray = attachmentname.split("-----");
				for (int k = 0; k < attfileArray.length; k++) {
					try {
						String[] temparr = attfileArray[k].split(":");
						if (temparr.length > 1) {
							ja.add(temparr[1]);
							ja2.add(URLEncoder.encode(temparr[1], "utf-8"));
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				resResult.put("attfile", ja);
				resResult.put("attfile_encode", ja2);
				//			resResult.put("fujianPic", ja3);
			}
		}
		PrintWriter pw = null;
		try {
			response.setCharacterEncoding("utf-8");
			response.setContentType("text/html; charset=utf-8");
			pw = response.getWriter();
			// pw.write(content);
			pw.write("{\"resData\":" + resResult.toString() + "}");
			pw.flush();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null) {
				pw.close();
			}
		}
	}

	/**
	 * 下载邮件附件
	 * 
	 * @param request
	 * @param response
	 * @param session
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping(value = "/downAttachment.php")
	public void downAttachment(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws UnsupportedEncodingException {
		request.setCharacterEncoding("utf-8");
		String path = request.getParameter("path");
		String destPathStr = Global.tomcatPath + "/eml/";
		File destPath = new File(destPathStr);
		if (!destPath.exists()) {
			// System.out.println("eml文件夹不存在");
			destPath.mkdirs();
		}

		// System.out.println(path);
		try {
			path = URLDecoder.decode(path, "utf-8");
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}

		String cmd = "hadoop fs -get " + path + " " + destPathStr;
		try {
			Process process = Runtime.getRuntime().exec(cmd);
			process.waitFor();
		} catch (IOException e2) {
			e2.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		String fname = "";
		if (!StringUtils.isEmpty(path)) {
			int inx = path.lastIndexOf("/");
			fname = path.substring(inx + 1);
		}

		String name = request.getParameter("name");
		// System.out.println(name);

		try {
			name = URLDecoder.decode(name, "utf-8");
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}

		// System.out.println("文件名=======" + name);
		// System.out.println("文件路径=======" + path);
		// System.out.println("文件保存路径：" + destPathStr + fname);
		File f = new File(name);
		try {
			ReceivedEmail tempMail = EmailUtil.parseEML(new File(destPathStr + fname));
			List<EmailAttachment> attachments = tempMail.getAttachments();
			String fileName = null;
			if (tempMail != null && attachments != null) {
				for (EmailAttachment temp : attachments) {
					fileName = temp.getName();
					if (fileName == null)
						continue;
					if (fileName.contains("<script") || fileName.contains("<style")) {
						String preName = fileName.substring(0, fileName.indexOf("<"));
						String suffix = null;
						if (fileName.contains(".")) {
							suffix = fileName.substring(fileName.lastIndexOf("."));
						} else {
							suffix = ".txt";
						}
						fileName = preName + suffix;
					}
					// System.out.println("----" + fileName);
					if (fileName.equals(name)) {
						temp.writeToFile(f);
					}

				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (MessagingException e) {
			e.printStackTrace();
		}

		String fileName = f.getName();
		try {
			if (request.getHeader("User-Agent").toLowerCase().indexOf("firefox") > 0) {
				fileName = new String(f.getName().getBytes(request.getCharacterEncoding()), "ISO8859-1");
				// fileName = URLDecoder.decode(fileName, "ISO8859-1");
				response.setHeader("content-disposition", "attachment;filename=\"" + fileName + "\"");
				response.setContentType("application/octet-stream");
			} else if (request.getHeader("USER-AGENT").toLowerCase().indexOf("msie") > 0
					|| request.getHeader("USER-AGENT").indexOf("like Gecko") > 0) {
				fileName = URLEncoder.encode(fileName, "utf-8");
				fileName = fileName.replace("+", "%20");// 处理空格变“+”的问题
				response.addHeader("content-disposition", "attachment; filename=" + fileName);
			} else {
				fileName = URLDecoder.decode(fileName, "UTF-8");
				response.addHeader("content-disposition", "attachment; filename=" + fileName);
			}
			// System.out.println("++++" + fileName);
			InputStream is = new FileInputStream(f);
			OutputStream os = response.getOutputStream();
			int len = 0;
			byte[] buf = new byte[1024];
			while ((len = is.read(buf)) != -1) {
				os.write(buf, 0, len);
			}
			is.close();
			os.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}


	@RequestMapping(value = "/emaiExcavatel/addBiaoJi.php")
	public void addBiaoJi(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		response.setContentType("textml; charset=UTF-8");

		String caseIDs = request.getParameter("caseIDs");
		String caseNames = request.getParameter("caseNames");
		String emailurl = request.getParameter("emailurl");

		String biaojiContent = request.getParameter("biaojiContent");
		logger.info("添加的标记文本："+biaojiContent);

		PrintWriter writer = null;
		try {
			Map<String, String> map = new HashMap<String, String>();
			map.put("caseID", caseIDs);
			map.put("caseName", caseNames);
			map.put("file_download_url", emailurl);
			map.put("content", biaojiContent);

			// 设置标记时间
			String biaojiTime = DateFormatUtils.format(System.currentTimeMillis(), "yyyy-MM-dd HH:mm:ss");
			logger.info("添加的标记时间："+biaojiTime);
			// 设置标记人
			HttpSession httpSession = request.getSession();
			String biaojiPerson = (String) httpSession.getAttribute("userName");

			User user = new User();
			user.setUsername(biaojiPerson);
			List<User> listfromMysql = sqlDao.getListfromMysql(user);

			String departmentName="";
			if(listfromMysql.size()>0){
				User user2 = listfromMysql.get(0);
				String partment = user2.getPartment();
				Department partment2 = new Department();
				partment2.setId(Integer.parseInt(partment));
				List<Department> listfromMysql2 = sqlDao.getListfromMysql(partment2);
				if(listfromMysql2.size()>0){
					Department Department2 = listfromMysql2.get(0);
					departmentName = Department2.getDepartmentName();
				}
			}

			String sectionName="";
			if(listfromMysql.size()>0){
				User user2 = listfromMysql.get(0);
				String section = user2.getSection();
				//			Department partment2 = new Department();
				Section section2 = new Section();
				section2.setId(Integer.parseInt(section));
				List<Section> listfromMysql2 = sqlDao.getListfromMysql(section2);
				if(listfromMysql2.size()>0){
					Section section3 = listfromMysql2.get(0);
					sectionName = section3.getSectionName();
				}
			}

			Caseinfo caseinfo = new Caseinfo();
			caseinfo.setId(Integer.parseInt(caseIDs));
			List<Caseinfo> cas = sqlDao.getListfromMysql(caseinfo);

			String supName="";
			String supPhone="";
			String supEmail="";
			SuspectInfo suspectInfo =new SuspectInfo();
			if(cas.size()>0){
				Caseinfo cas2 = cas.get(0);
				String MainPartys = cas2.getMainParty();

				String[] split = MainPartys.split(",");
				if(split.length>0){
					for (String caseinfo2 : split) {
						if (!"".equals(caseinfo2) && caseinfo2 !=null) {
							suspectInfo.setId(Integer.parseInt(caseinfo2));
							List<SuspectInfo> listfromMysql2 = sqlDao.getListfromMysql(suspectInfo);	
							if(listfromMysql2.size()>0){
								SuspectInfo suspectInfo2 = listfromMysql2.get(0);
								supName =suspectInfo2.getSuspectName();
								supPhone =suspectInfo2.getSuspectPhone();
								supEmail =suspectInfo2.getSuspectMail();
							}
						}
						
					}
				}
			}




			logger.info("添加的部门："+sectionName);
			map.put("saveTime", biaojiTime);
			map.put("name", biaojiPerson);
			map.put("department", departmentName);
			map.put("section", sectionName);
			map.put("suspectName", supName);
			map.put("phone", supPhone);
			map.put("email", supEmail);


			List<Map<String, String>> indexData = new ArrayList<>();
			indexData.add(map);
			EsClient.save("mail", "clue", indexData);
			writer = response.getWriter();
			writer.write(JsonUtil.map2json(map));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}


	/**
	 * 邮件工作台-高级搜索-邮箱列表
	 */
	@RequestMapping(value = "/emaiExcavatel/seekEmail.php")
	public void seekEmail(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String caseidStr = request.getParameter("caseidStr");
		String emailAddress = request.getParameter("emailAddress");

		// 默认最新数据的案件
		if (caseidStr == null || "".equals(caseidStr)) {
			caseidStr="-1";
		}
		String[] caseids = { "" };
		if (!"".equals(caseidStr)) {
			caseids = caseidStr.split(" ");
		}
		// 精确搜索
		BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
		// caseid集合
		if (!"".equals(caseidStr)) {
			mustQuery.must(QueryBuilders.termsQuery("caseID", caseids));
		}
		//邮箱地址
		if(emailAddress!=null && !"".equals(emailAddress)){
			// 组合 模糊查询  should  
			BoolQueryBuilder emailstrs = QueryBuilders.boolQuery();
			WildcardQueryBuilder fromWho = QueryBuilders.wildcardQuery("fromWho", "*"+emailAddress+"*");  
			WildcardQueryBuilder toWho = QueryBuilders.wildcardQuery("toWho", "*"+emailAddress+"*");  
			emailstrs.should(fromWho).should(toWho);
			mustQuery.must(emailstrs);
		}
		SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email");
		searchRequestBuilder.setQuery(mustQuery)
		.setFrom(0)// 分页起始位置（跳过开始的n个）
		.setSize(10000);
		// 排序 执行
		SearchResponse searchResponse = searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH)
				.addSort("date", SortOrder.ASC).execute().actionGet();// 执行搜索
		ArrayList<SearchHit[]> arrayList2 = new ArrayList<SearchHit[]>();
		SearchHit[] hits1 = searchResponse.getHits().getHits();
		arrayList2.add(hits1);
		long totalHits = searchResponse.getHits().getTotalHits()/10000;
		for(int i=1;i<=totalHits;i++){
			searchResponse = searchRequestBuilder.setQuery(mustQuery).setFrom(i*10000)// 分页起始位置（跳过开始的n个）
					.setSize(10000).execute().actionGet();
			SearchHit[] hits  = searchResponse.getHits().getHits();
			arrayList2.add(hits);
		}

		ArrayList<String> arrayList = new ArrayList<>();
		for (SearchHit[] searchHit2 : arrayList2) {
		  for (SearchHit searchHit : searchHit2) {
			Map<String, Object> source = searchHit.getSource();
			String fromWho = (String) source.get("fromWho");
			int flag1=0;
			for (String string2 : arrayList) {
				if(string2.equals(fromWho)){
					flag1=1;
				}
			}
			if(flag1==0){
				if(emailAddress!=null && !"".equals(emailAddress)){
					if( fromWho.indexOf(emailAddress)>0){
						arrayList.add(fromWho);
					}
				}
				else{
					arrayList.add(fromWho);
				}

			}
			String toWho = (String) source.get("toWho");
			String[] toWhos = toWho.split(";;");
			for (String string : toWhos) {
				int flag2=0;
				for (String string2 : arrayList) {
					if(string2.equals(string)){
						flag2=1;
					}
				}
				if(flag2==0){
					if(emailAddress!=null && !"".equals(emailAddress)){
						if(string.indexOf(emailAddress)>0){
							arrayList.add(string);
						}
					}
					else{
						arrayList.add(string);
					}
				}
			}
		}
		ArrayList<Map> mapList = new ArrayList<Map>();
		Map<String, List<String>> map = new HashMap<String, List<String>>();
		for (String string : arrayList) {
			int lastIndex=string.length();
			if(string.indexOf("&gt")>0){
				lastIndex=string.lastIndexOf("&gt");
			}
			String yuming = string.substring(string.lastIndexOf("@")+1, lastIndex);
			int j=0;
			Set<String> set = map.keySet();
			for (String key : set) {
				if(key.equals(yuming)){
					String string2=string;
					if(string.indexOf("&gt")<1){
						string2="("+string+")";
					}
					map.get(key).add(string2.replace("&lt;", "(").replace("&gt", ")"));
					j=1;
				}
			}
			if(j==0){
				List<String> list= new ArrayList<String>();
				String string2=string;
				if(string.indexOf("&gt")<1){
					string2="("+string+")";
				}
				list.add(string2.replace("&lt;", "(").replace("&gt", ")"));
				if(yuming!=null && !"".equals(yuming)){
					map.put(yuming, list);
				}
			}
		}
		Set<String> set2 = map.keySet();
		for (String key : set2) {
			Map<String, List<String>> map2 = new HashMap<String, List<String>>();
			List<String> list2= map.get(key);
			list2.add(key);
			map2.put("yuming", list2);
			mapList.add(map2);
		}
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.list2json(mapList));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	  }
	}


	/**
	 * 邮件工作台-高级搜索-邮箱标记
	 */
	@RequestMapping(value = "/emaiExcavatel/signEmail.php")
	public void signEmail(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		response.setContentType("textml; charset=UTF-8");
		String pageIndex = request.getParameter("pageIndex");
		String name = request.getParameter("name");

		actionLog((String) session.getAttribute("userName"), "查看", "邮件标记 ");
		// 精确搜索
		BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
		Caseinfo cas = new Caseinfo();
		User user = (User) session.getAttribute("user");
		String roleName="" ;
		if(user != null){
			String userrole = user.getUserrole();
			Role role = new Role();
			role.setId(Integer.parseInt(userrole));
			List<Role> roleList = sqlDao.getListfromMysql(role);
			if(roleList.size()>0){
				Role role2 = roleList.get(0);
				roleName = role2.getDataScope();
				 
			}
		}
		if (roleName.equals("科室数据") ) {// 科长
			cas.setSection(user.getSection()+"/"+user.getUsername());
		} else if (roleName.equals("部门数据") ) {// 部长
			cas.setDepartment(user.getPartment());
		} else if (roleName.equals("个人数据") ) {// 科员
			cas.setUserName(user.getUsername());
		} else if (roleName.equals("所有数据")) {// 局长
			cas.setId(-1);
		} else {
			cas.setId(-2);
		}
		List<Caseinfo> listfromMysqlLikeOR = sqlDao.getListfromMysqlLikeOR(cas);
		ArrayList<String> caseids = new ArrayList<String>();
		for (Caseinfo caseinfo : listfromMysqlLikeOR) {
			caseids.add(caseinfo.getId()+"");
		}
		// caseid集合
				mustQuery.must(QueryBuilders.termsQuery("caseID", caseids));
		//邮箱地址
		if(name!=null && !"".equals(name)){
			// 组合 模糊查询  should  
			BoolQueryBuilder emailstrs = QueryBuilders.boolQuery();
			WildcardQueryBuilder name1 = QueryBuilders.wildcardQuery("name", "*"+name+"*");  
			emailstrs.should(name1);
			mustQuery.must(emailstrs);
		}
		SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("mail").setTypes("clue")
				.setQuery(mustQuery)
				.setFrom((Integer.parseInt(pageIndex) - 1) * 10)// 分页起始位置（跳过开始的n个）
				.setSize(10);
		// 排序 执行
		SearchResponse searchResponse = searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH)
				.addSort("saveTime", SortOrder.DESC).execute().actionGet();// 执行搜索
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(searchResponse.toString());
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}
	/**
	 * 数据管理-邮件工作台-查询邮件 收发件人
	 * @throws UnknownHostException 
	 */
	@RequestMapping(value = "/emaiExcavatel/getEmailListtofrom.php")
	public void getEmailListtofrom(HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		response.setContentType("textml; charset=UTF-8");

		String caseidStr = request.getParameter("caseidStr");
		String pageIndexstr = request.getParameter("pageIndex");
		String startDate = request.getParameter("startDate");// 开始时间
		String endDate = request.getParameter("endDate");// 结束时间
		String emailkey = request.getParameter("emailkey");//关键词
		String emailstr = request.getParameter("emailstr");//邮箱地址
		System.out.println("-------"+emailstr);
		String emailType = request.getParameter("tofromType");//收发类型
		//emailstr = emailstr.replace( "<","&lt;").replace( ">","&gt");
		
		int pageIndex = 1;
		int pageSize = 10;
		if (pageIndexstr != null && !"".equals(pageIndexstr)) {
			pageIndex = Integer.parseInt(pageIndexstr);
		}
		String[] caseids = { "" };
		if (!"".equals(caseidStr)) {
			caseids = caseidStr.split(" ");
		}
		// 精确搜索
		BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		//mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档
		//邮箱地址
		if(emailstr!=null && !"".equals(emailstr)){
			// 组合 模糊查询  should  
			BoolQueryBuilder emailstrs = QueryBuilders.boolQuery();
			TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", emailstr);
			TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", emailstr);
			if("from".equals(emailType)){
				emailstrs.should(fromWho);
			}else if("to".equals(emailType)){
				emailstrs.should(toWho);
			}else{
				emailstrs.should(fromWho).should(toWho);
			}
			mustQuery.must(emailstrs);
		}
		// 关键词搜索
		if (emailkey != null && !"".equals(emailkey)) {
			QueryBuilder queryBuilder = QueryBuilders.queryStringQuery(emailkey)
					.defaultOperator(QueryStringQueryBuilder.Operator.AND);// 不同关键词之间使用and关系
			mustQuery.must(queryBuilder);// 添加第4条must的条件 关键词全文搜索筛选条件
			actionLog((String) session.getAttribute("userName"), "搜索关键词："+emailkey, "邮件挖掘 ");
		}
		// caseid集合
		if (!"".equals(caseidStr)) {
			mustQuery.must(QueryBuilders.termsQuery("caseID", caseids));
		}
		// 日期范围
		if (startDate != null && !"".equals(startDate)) {
			RangeQueryBuilder rangequerybuilder = QueryBuilders.rangeQuery("date").from(startDate + " 00:00:00")
					.to(endDate + " 23:59:59");
			mustQuery.must(rangequerybuilder);
		}
		SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email")
				.setQuery(mustQuery).setFrom((pageIndex - 1) * pageSize)// 分页起始位置（跳过开始的n个）
				.setSize(pageSize);// 本次返回的文档数量
		// 排序 执行
		SearchResponse searchResponse =  searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH)
					.addSort("date", SortOrder.ASC).execute().actionGet();// 执行搜索
		SearchHit[] hits = searchResponse.getHits().getHits();
		long totalHits = searchResponse.getHits().getTotalHits();
		
		System.out.println("==="+searchRequestBuilder);
		//long all = 0;
		//long notRead = 0;
				
		List<EmailDTO> emailDTOList = new ArrayList<EmailDTO>();
		for (SearchHit searchHit : hits) {
			EmailDTO emailDTO = new EmailDTO();
			String esID = (String) searchHit.getId();
			Map<String, Object> source = searchHit.getSource();
			String subject = (String) source.get("subject");
			
			String fromWho = (String) source.get("fromWho");
			String toWho = (String) source.get("toWho");
			String downloadUrl = (String) source.get("file_download_url");
			String date = (String) source.get("date");
			String attachmentname = (String) source.get("attachmentname");// LW:附件名
			String content = (String) source.get("content");
			String readFlag = (String) source.get("readFlag");
			String starFlag = (String) source.get("starFlag");
			String ip = (String) source.get("ip");
			String caseName = (String) source.get("caseName");
			String caseID = (String) source.get("caseID");
			emailDTO.setEsID(esID);
			emailDTO.setRead(Integer.parseInt(readFlag));
			emailDTO.setStar(Integer.parseInt(starFlag));
			emailDTO.setIp(ip);
			emailDTO.setCaseName(caseName);
			emailDTO.setCaseID(caseID);
			emailDTO.setAttachmentname(attachmentname);
			emailDTO.setSubject(subject);
			emailDTO.setFromWho(fromWho);
			emailDTO.setToWho(toWho);
			emailDTO.setContent(content);
			emailDTO.setDate(date);
		    emailDTO.setDownloadUrl(downloadUrl);
			emailDTOList.add(emailDTO);
		}
		/*
		 * 查询未读数目
		 */
		// 精确搜索
		BoolQueryBuilder mustQuery2 = QueryBuilders.boolQuery();

		// caseid集合
		if (!"".equals(caseidStr)) {
			mustQuery2.must(QueryBuilders.termsQuery("caseID", caseids));
		}
		//邮箱地址
		if(emailstr!=null && !"".equals(emailstr)){
			// 组合 模糊查询  should  
			BoolQueryBuilder emailstrs = QueryBuilders.boolQuery();
			TermQueryBuilder fromWho = QueryBuilders.termQuery("fromWho", emailstr);
			TermQueryBuilder toWho = QueryBuilders.termQuery("toWho", emailstr);
			if("from".equals(emailType)){
				emailstrs.should(fromWho);
			}else if("to".equals(emailType)){
				emailstrs.should(toWho);
			}else{
				emailstrs.should(fromWho).should(toWho);
			}
			mustQuery2.must(emailstrs);
		}
		// 关键词搜索
		if (emailkey != null && !"".equals(emailkey)) {
			QueryBuilder queryBuilder = QueryBuilders.queryStringQuery(emailkey)
					.defaultOperator(QueryStringQueryBuilder.Operator.AND);// 不同关键词之间使用and关系
			mustQuery2.must(queryBuilder);// 添加第4条must的条件 关键词全文搜索筛选条件
			//actionLog((String) session.getAttribute("userName"), "搜索关键词："+emailkey, "邮件挖掘 ");
		}
		// 未读
		mustQuery2.must(QueryBuilders.matchPhraseQuery("readFlag", "0"));
		// 日期范围
		if (startDate != null && !"".equals(startDate)) {
			RangeQueryBuilder rangequerybuilder2 = QueryBuilders.rangeQuery("date").from(startDate + " 00:00:00")
					.to(endDate + " 23:59:59");
			mustQuery2.must(rangequerybuilder2);
		}
		SearchRequestBuilder searchRequestBuilder2 = EsClient.getClient().prepareSearch("es").setTypes("email")
				.setQuery(mustQuery2).setFrom(0)// 分页起始位置（跳过开始的n个）
				.setSize(1);// 本次返回的文档数量
		// 排序 执行
		SearchResponse searchResponse2 = searchRequestBuilder2.addSort("date", SortOrder.ASC)// 排序.addSort(SortBuilders.fieldSort(sortConditon))//按类型排序
				.execute().actionGet();// 执行搜索
		long read0 = searchResponse2.getHits().getTotalHits();
		Map<String, Object> map = new HashMap<String, Object>();
		getDomainEmail = emailDTOList;
		map.put("emailDTOList", emailDTOList);
		map.put("count", totalHits);
		map.put("read0",read0);
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.map2json(map));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}
	// 银行卡校验
	public static char getBankCardCheckCode(String nonCheckCodeCardId) {
		//System.out.println("进入银行卡校验");
		if (nonCheckCodeCardId == null || nonCheckCodeCardId.trim().length() == 0 || !nonCheckCodeCardId.matches("\\d+")
				|| nonCheckCodeCardId.trim().length() < 15 || nonCheckCodeCardId.trim().length() > 18) {
			// 如果传的数据不合法返回N
			//System.out.println("银行卡号不合法！");
			return 'N';
		}
		char[] chs = nonCheckCodeCardId.trim().toCharArray();
		int luhmSum = 0;
		// 执行luh算法
		for (int i = chs.length - 1, j = 0; i >= 0; i--, j++) {
			int k = chs[i] - '0';
			if (j % 2 == 0) { // 偶数位处理
				k *= 2;
				k = k / 10 + k % 10;
			}
			luhmSum += k;
		}
		return (luhmSum % 10 == 0) ? '0' : (char) ((10 - luhmSum % 10) + '0');
	}
	
	/**
	 * 数据管理-邮件工作台-快速标记查询数量
	 */
	@RequestMapping(value = "/emaiExcavatel/quickFlagstotal.php")
	public void quickFlagstotal(HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		response.setContentType("textml; charset=UTF-8");
		String caseidStr = request.getParameter("caseidStr");
		String[] dataArr = new String[] { "手机号","集装箱号","银行卡号","身份证号","邮箱号","车牌号", "固定电话","价格" };
		String quickflag = "";
		
		// 默认最新数据的案件
		if (caseidStr == null || "".equals(caseidStr)) {
			caseidStr="-1";
		}
		String[] caseids = { "" };//2307 [23007]
		
		if (!"".equals(caseidStr)) {
			caseids = caseidStr.split(" ");
		}
			
		// 精确搜索
		BoolQueryBuilder mustQuery = QueryBuilders.boolQuery();
		mustQuery.must(QueryBuilders.matchAllQuery()); // 添加第1条must的条件 此处为匹配所有文档

		// caseid集合
		if (!"".equals(caseidStr)) {
			mustQuery.must(QueryBuilders.termsQuery("caseID", caseids));
		}
		
		SearchRequestBuilder searchRequestBuilder = EsClient.getClient().prepareSearch("es").setTypes("email")
				.setQuery(mustQuery)
				// 模糊查询
				.setFrom(0)// 分页起始位置（跳过开始的n个）
				.setSize(10000);// 本次返回的文档数量
		// 排序 执行
				SearchResponse searchResponse = null;
					searchResponse = searchRequestBuilder.execute().actionGet();// 执行搜索

		SearchHit[] hits = searchResponse.getHits().getHits();

		long talfori = 0;// 手机号计数
		long jzfori = 0;// 集装箱号计数
		long yhkfori = 0;// 银行卡号计数
		long sfzfori = 0;// 身份证号计数
		long yxfori = 0;// 邮箱号计数
		long cpfori = 0;// 车牌号计数
		long gddhfori = 0;// 固定电话计数
		long jgfori = 0;// 价格计数
		
		for (SearchHit searchHit : hits) {
			Map<String, Object> source = searchHit.getSource();
			String content = (String) source.get("content");
			for (int i = 0; i < dataArr.length; i++) {
				if ("手机号".equals(dataArr[i])) {
					quickflag = Global.regPhone;
				} else if ("固定电话".equals(dataArr[i])) {
					quickflag = Global.regTel;
				} else if ("身份证号".equals(dataArr[i])) {
					quickflag = Global.regSFZ;
				} else if ("邮箱号".equals(dataArr[i])) {
					quickflag = Global.regEmail;
				} else if ("银行卡号".equals(dataArr[i])) {
					quickflag = Global.regCard;
				} else if ("车牌号".equals(dataArr[i])) {
					quickflag = Global.regLicense;
				} else if ("集装箱号".equals(dataArr[i])) {
					quickflag = Global.regContainer;
				} else if ("价格".equals(dataArr[i])) {
					quickflag = Global.regPrice;
				}
			Pattern pattern = Pattern.compile(quickflag);
			// 创建匹配给定输入与此模式的匹配器。
			Matcher matcher = pattern.matcher(content);
			// 查找字符串中是否有符合的子字符串
			while (matcher.find()) {
				
				// 查找到符合的即输出
				String group = matcher.group();
				if("身份证号".equals(dataArr[i])){
					String s = group;// 初次获取得到身份证号
					List<String> list = new ArrayList<String>();
					List<String> list2 = new ArrayList<String>();
					list2.add("7");
					list2.add("9");
					list2.add("10");
					list2.add("5");
					list2.add("8");
					list2.add("4");
					list2.add("2");
					list2.add("1");
					list2.add("6");
					list2.add("3");
					list2.add("7");
					list2.add("9");
					list2.add("10");
					list2.add("5");
					list2.add("8");
					list2.add("4");
					list2.add("2");
					for (int t = 0; t < s.length(); t++) {
						String substring = s.substring(t, t + 1);
						list.add(substring);
					}
					String lastbit=list.get(list.size() - 1);
					if("1".equals(lastbit)){
						lastbit="0";
					}else if ("0".equals(lastbit)) {
						lastbit="1";
					}else if ("0".equals(lastbit)) {
						lastbit="1";
					}else if ("X".equals(lastbit)||"x".equals(lastbit)) {
						lastbit="2";
					}else if ("9".equals(lastbit)) {
						lastbit="3";
					}else if ("8".equals(lastbit)) {
						lastbit="4";
					}else if ("7".equals(lastbit)) {
						lastbit="5";
					}else if ("6".equals(lastbit)) {
						lastbit="6";
					}else if ("5".equals(lastbit)) {
						lastbit="7";
					}else if ("4".equals(lastbit)) {
						lastbit="8";
					}else if ("3".equals(lastbit)) {
						lastbit="9";
					}else if ("2".equals(lastbit)) {
						lastbit="10";
					}
					double c = 0;
					double num = 0 ;
					for (int g = 0; g < list2.size(); g++) {
						int a = (Integer.parseInt(list.get(g)));
						int b = (Integer.parseInt(list2.get(g)));
						double num2 = a * b;
						num+=num2;
						 c = (num) % 11;
					}
					double x = Integer.parseInt(lastbit);
					if (c == x) {
						sfzfori += 1;
						break;
					}
					
				}
				if("集装箱号".equals(dataArr[i])){
					 String s =group;// 初次获取得到集装箱号
					 List<String> list = new ArrayList<String>();
					 for (int k = 0; k < s.length(); k++) {
					 String substring = s.substring(k, k + 1);
					 String replace = substring.replace("A", "10").replace("B",
					 "12").replace("C", "13").replace("D", "14")
					 .replace("E", "15").replace("F", "16").replace("G",
					 "17").replace("H", "18").replace("I", "19")
					 .replace("J", "20").replace("K", "21").replace("L",
					 "23").replace("M", "24").replace("N", "25")
					 .replace("O", "26").replace("P", "27").replace("Q",
					 "28").replace("R", "29").replace("S", "30")
					 .replace("T", "31").replace("U", "32").replace("V",
					 "34").replace("W", "35").replace("X", "36")
					 .replace("Y", "37").replace("Z", "38");
					 list.add(replace);
					 }
					 double c = 0;
					 double num = 0;
					 for (int q = 0; q < list.size()-1; q++) {
					 double d = Math.pow(2, q);
					 //System.out.println("n" + i + "次方" + d);
					 int a = (Integer.parseInt(list.get(q)));
					 double num2 = a * d;
					 num+=num2;
					 c = (num) % 11;
					 }
					 double x = Integer.parseInt(list.get(list.size() - 1));
					 if (c == x) {
						 jzfori += 1;
						break;
						}
				}
				if("银行卡号".equals(dataArr[i])){
					String sfz = group;
					char res =getBankCardCheckCode(sfz.substring(0, sfz.length()-1));//得到的校验码
					String charJX = sfz.substring(sfz.length() - 1);// 银行卡号最后一位
					if (res != 'N') {
						 if(charJX.equals(String.valueOf(res))){//如果校验码不等于卡号最后一位，说明银行卡号是错的
					        	yhkfori += 1;
					        	break;
					        }
					}
				}
				if("手机号".equals(dataArr[i])){
					talfori += 1;	
					break;
				}
				if("邮箱号".equals(dataArr[i])){
					yxfori += 1;	
					break;
				}
				if("车牌号".equals(dataArr[i])){
					cpfori += 1;
					break;
				}
				if("固定电话".equals(dataArr[i])){
					gddhfori += 1;	
					break;
				}
				if("价格".equals(dataArr[i])){
						jgfori += 1;
						break;
				}
			}
		}
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("talfori", talfori);
		map.put("jzfori", jzfori);
		map.put("yhkfori", yhkfori);
		map.put("sfzfori", sfzfori);
		map.put("yxfori", yxfori);
		map.put("cpfori", cpfori);
		map.put("gddhfori", gddhfori);
		map.put("jgfori", jgfori);
		PrintWriter writer = null;
		try {
			writer = response.getWriter();
			writer.write(JsonUtil.map2json(map));
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				writer.close();
			}
		}
	}
}
/**
 *  说明：树型结构加载
 *  版本：v0.01  
 *  新增：1 可设置节点是否支持编辑 在wish-tree的DIV上设置data-isedit="true"即可
 *           2 可隐藏根节点 在初始化函数 第二个传参设置 true 进行隐藏，initTree(wish_tree_dataList, true);
 *           3 可以设置默认树是否展开 在初始化initTree函数中设置第三个参数，initTree(wish_tree_dataList, true ,true);
 *           4  可以根据JSON传至是否包含count节点 自动判断加载节点中是否需要包含括号+数字的字符串
 *   导入JS: jquery.js 
 *  @class TreeData
 *  @constructor TreeData
 *  @author ED.J.Yan
 *  @createDate 2016-07-07
 */

function TreeData(id, defaultType, isShowStyle) {
  this.$block = $("#"+id);  
  this.onDelete = new Function();
  this.onEdit = new Function();
  this.onNodeClick = new Function();
  this.onTerminalNodeClick = new Function();
  this.isDefaultOpen = defaultType ? defaultType :false;
  this.isEdit = this.$block.attr("data-isedit") ? true : false;
  this.isSetbg = isShowStyle;
}

if (TreeData.isInit === undefined) {

  TreeData.prototype = {
    constructor: TreeData,
  
     /**
     * 说明；递归加载
     * @method  recursionLoad
     * @for TreeData
     * @param {array} list  弹出层标题
     * @return  {string} 返回递归加载后的HTML  
     */
     recursionLoad: function (list, laynum) {
        var _list = list,  myHtml = "", itype = this.isDefaultOpen ? "open":"closed" ;
        
        var dataLaynum = "", terminalNode;
        
        for( var i = 0, len = _list.length; i < len; i++ ){ //循环加载数结构，支持多树结构加载
           
            
            var iCount = ''; 
            try{              
                      iCount = _list[i].count ?  '（'+ _list[i].count +'）' : '';                           
                      dataLaynum = this.isSetbg ?   'data-laynum="'+laynum+'"' : "";
                     
                      if( _list[i].childs.length > 0 ){
                         
                         myHtml += '<ul><li class="'+itype+'"><div class="title" '+dataLaynum+'><i></i><p><a data-id="'+  _list[i].id + '" class="js-tree-childnode">' + _list[i].title + iCount +'</a>';
                         
                         if(this.isEdit){ //改变树结构是否可以编辑
                           myHtml += '<span data-id="'+  _list[i].id + '" class="js-del del"></span><span data-id="'+  _list[i].id + '" class="js-edd edd"></span></p></div>'
                         }else{
                           myHtml += '</p></div>';            
                         }
                         
                         myHtml += this.recursionLoad(_list[i].childs, (laynum+1));
                      }else{        
                         if ( _list[i].terminalNode ){
                           terminalNode = 'data-terminalNode="{}"';                           
                         }else{
                           terminalNode = "";                           
                         }
                         myHtml += '<ul><li ><div class="title" '+dataLaynum+'   '+ terminalNode +'><i></i><p><a  data-id="'+  _list[i].id + '" class="js-tree-childnode">' + _list[i].title + iCount +'</a>';      
                         if(this.isEdit){ //改变树结构是否可以编辑
                           myHtml += '<span data-id="'+  _list[i].id + '" class="js-del del"></span><span data-id="'+  _list[i].id + '" class="js-edd edd"></span></p></div>'
                         }else{
                           myHtml += '</p></div>';            
                         }            
                      }        
                      myHtml +=  '</li></ul>';
            }catch(e){}       
        }
        return myHtml;
    },
    
     /**
     * 说明；操作事件加载
     * @method  bindOptionEvent
     * @for TreeData
     * @param undefined
     * @return  undefined
     */
    bindOptionEvent : function (){
      var _that = this;
      _that.$block.find("[data-id]").on("click",function(){
        var $cur = $(this);
        if( $cur.hasClass("js-del") ){
            _that.onDelete( $cur.attr("data-id"), $cur );
          
        }else if( $cur.hasClass("js-edd") ){
            _that.onEdit( $cur.attr("data-id"), $cur );
          
        }else if( $cur.hasClass("js-tree-childnode") ){
            _that.onNodeClick(  $cur.attr("data-id"), $cur );
          
        }else{}       
       
      });
      
      this.getTerminalNodes().click(function(){
        _that.onTerminalNodeClick(  $(this).find("a").attr("data-id"), $(this) );
      })
      
    },
    
    setSelectedById:function (id){
      var $searchObj =  this.$block.find(".js-tree-childnode");
      $.each($searchObj, function(){
        if( $(this).attr("data-id") === id ){
           $(this).parent("p").addClass("selected"); 
        }else{
          $(this).parent("p").removeClass("selected"); 
        }
      });      
    },
    
    getTerminalNodes:function(){
        return this.$block.find("div[data-terminalNode]");      
    }
     
  }
  TreeData.isInit = true;
}

/**
  * 说明：树形图事件加载
  * @method initTree
  * @param {array} dataTree 结构数据
  * @param {bool} isHideRoot 是否隐藏根节点
  * @param {bool} isOpen 是否默认展开树
  * @return {json} treeObjList
  */
function initTree( dataTree, isHideRoot, isOpen, isAllwidth){
  

      
  if ( dataTree.id != undefined ) {
    
    var treeObjList = {},           
          tempId = "tree_" + dataTree.id, 
          allWidth = isAllwidth ? "allwidth":"",
          myHtml = "";   
          
          try{
            if( isShowStyle) {
               var styles = '<style>#'+tempId+' ul{ width:100%; }</style>';
               $("#"+tempId).append(styles);   
            }
          }catch(e){}
        //判断是否有子节点 根节点显示
        if( dataTree.childs.length > 0 ){
          
           //根据传参设置是否隐藏根节点
           var isHideStyle = isHideRoot ? 'style="display:none"' : "";
           
           myHtml += '<ul class="'+allWidth+'"><li class="open"><div class="title" '+isHideStyle+'><i></i><h1>' + dataTree.title +'（'+ dataTree.count +'）</h1></div>';           
          
          
            //声明一个对应操作的类
           treeObjList = new TreeData( tempId,  isOpen, isAllwidth);
           
            //子节点加载          
           myHtml +=  treeObjList.recursionLoad( dataTree.childs , 0);//返回对应的HTML         
        }else{        
           myHtml += '<ul class="'+allWidth+'"><li><div class="title"><i></i><h1>' + dataTree.title +'（'+ dataTree.count +'）</h1></div>';      
        }
        
        
        myHtml +=  '</li></ul>'
        
        
        $("#"+tempId).removeClass("onload").html(myHtml);

        //绑定操作事件
        treeObjList.bindOptionEvent();
    
        

    //收缩展开事件加载 
    var $temp = $(".wish-tree i");
    $temp.unbind("click");
    $temp.click(function(){
       var $stateObj = $(this).parent().parent("li");
       
       if( $stateObj.hasClass("open") ){
          $stateObj.attr("class", "closed");
       }else if( $stateObj.hasClass("closed") ){
          $stateObj.attr("class", "open");
       }else{
       
       }
    });
    
    return treeObjList;
  }
}

